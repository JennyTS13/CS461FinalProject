Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "LEX_ERROR" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]LEX_ERROR [3]CLASS [4]EXTENDS 
[5]IF [6]ELSE [7]WHILE [8]FOR [9]BREAK 
[10]NEW [11]RETURN [12]INSTANCEOF [13]PLUS [14]MINUS 
[15]TIMES [16]DIVIDE [17]MODULUS [18]NOT [19]AND 
[20]OR [21]EQ [22]NE [23]LT [24]LEQ 
[25]GT [26]GEQ [27]ASSIGN [28]INCR [29]DECR 
[30]LPAREN [31]RPAREN [32]LBRACE [33]RBRACE [34]LSQBRACE 
[35]RSQBRACE [36]SEMI [37]COMMA [38]DOT [39]ID 
[40]INT_CONST [41]BOOLEAN_CONST [42]STRING_CONST [43]SIGNEDLEFTSHIFT [44]SIGNEDRIGHTSHIFT 
[45]UNSIGNEDRIGHTSHIFT [46]BITOR [47]BITXOR [48]BITAND [49]BITNOT 
[50]PLUSASSIGN [51]MINUSASSIGN [52]TIMESASSIGN [53]DIVASSIGN [54]MODASSIGN 


===== Non terminals =====
[0]$START [1]program [2]class_list [3]class [4]member_list 
[5]member [6]method [7]field [8]formal_list [9]formal 
[10]stmt_list [11]stmt [12]expr_list [13]expr [14]expr_stmt 
[15]decl_stmt [16]if_stmt [17]while_stmt [18]for_stmt [19]break_stmt 
[20]ret_stmt [21]block_stmt [22]assign_expr [23]plus_equals_expr [24]minus_equals_expr 
[25]times_equals_expr [26]div_equals_expr [27]mod_equals_expr [28]arr_assign_expr [29]dispatch_expr 
[30]new_expr [31]new_arr_expr [32]instanceof_expr [33]cast_expr [34]binary_expr 
[35]binary_arith_expr [36]binary_comp_expr [37]binary_logic_expr [38]unary_expr [39]unary_neg_expr 
[40]unary_not_expr [41]unary_bit_not_expr [42]unary_incr_expr [43]unary_decr_expr [44]const_expr 
[45]var_expr [46]arr_expr 

===== Productions =====
[0] program ::= class_list 
[1] $START ::= program EOF 
[2] class_list ::= class 
[3] class_list ::= class_list class 
[4] class ::= CLASS ID LBRACE member_list RBRACE 
[5] class ::= CLASS ID EXTENDS ID LBRACE member_list RBRACE 
[6] member_list ::= 
[7] member_list ::= member_list member 
[8] member ::= method 
[9] member ::= field 
[10] method ::= ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
[11] method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
[12] field ::= ID ID SEMI 
[13] field ::= ID LSQBRACE RSQBRACE ID SEMI 
[14] field ::= ID ID ASSIGN expr SEMI 
[15] field ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
[16] formal_list ::= 
[17] formal_list ::= formal_list formal 
[18] formal_list ::= formal_list formal COMMA 
[19] formal ::= ID ID 
[20] formal ::= ID LSQBRACE RSQBRACE ID 
[21] stmt_list ::= 
[22] stmt_list ::= stmt_list stmt 
[23] stmt ::= expr_stmt 
[24] stmt ::= decl_stmt 
[25] stmt ::= if_stmt 
[26] stmt ::= while_stmt 
[27] stmt ::= for_stmt 
[28] stmt ::= break_stmt 
[29] stmt ::= ret_stmt 
[30] stmt ::= block_stmt 
[31] expr_stmt ::= expr SEMI 
[32] decl_stmt ::= ID ID ASSIGN expr SEMI 
[33] decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
[34] if_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
[35] if_stmt ::= IF LPAREN expr RPAREN stmt 
[36] while_stmt ::= WHILE LPAREN expr RPAREN stmt 
[37] for_stmt ::= FOR LPAREN SEMI SEMI RPAREN stmt 
[38] for_stmt ::= FOR LPAREN expr SEMI SEMI RPAREN stmt 
[39] for_stmt ::= FOR LPAREN SEMI expr SEMI RPAREN stmt 
[40] for_stmt ::= FOR LPAREN SEMI SEMI expr RPAREN stmt 
[41] for_stmt ::= FOR LPAREN expr SEMI expr SEMI RPAREN stmt 
[42] for_stmt ::= FOR LPAREN expr SEMI SEMI expr RPAREN stmt 
[43] for_stmt ::= FOR LPAREN SEMI expr SEMI expr RPAREN stmt 
[44] for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt 
[45] break_stmt ::= BREAK SEMI 
[46] ret_stmt ::= RETURN SEMI 
[47] ret_stmt ::= RETURN expr SEMI 
[48] block_stmt ::= LBRACE stmt_list RBRACE 
[49] expr_list ::= 
[50] expr_list ::= expr_list expr 
[51] expr_list ::= expr_list expr COMMA 
[52] expr ::= assign_expr 
[53] expr ::= arr_assign_expr 
[54] expr ::= dispatch_expr 
[55] expr ::= new_expr 
[56] expr ::= new_arr_expr 
[57] expr ::= instanceof_expr 
[58] expr ::= cast_expr 
[59] expr ::= binary_expr 
[60] expr ::= unary_expr 
[61] expr ::= const_expr 
[62] expr ::= var_expr 
[63] expr ::= arr_expr 
[64] expr ::= LPAREN expr RPAREN 
[65] assign_expr ::= ID ASSIGN expr 
[66] assign_expr ::= ID DOT ID ASSIGN expr 
[67] assign_expr ::= plus_equals_expr 
[68] assign_expr ::= minus_equals_expr 
[69] assign_expr ::= times_equals_expr 
[70] assign_expr ::= div_equals_expr 
[71] assign_expr ::= mod_equals_expr 
[72] plus_equals_expr ::= ID PLUSASSIGN expr 
[73] plus_equals_expr ::= ID DOT ID PLUSASSIGN expr 
[74] minus_equals_expr ::= ID MINUSASSIGN expr 
[75] minus_equals_expr ::= ID DOT ID MINUSASSIGN expr 
[76] times_equals_expr ::= ID TIMESASSIGN expr 
[77] times_equals_expr ::= ID DOT ID TIMESASSIGN expr 
[78] div_equals_expr ::= ID DIVASSIGN expr 
[79] div_equals_expr ::= ID DOT ID DIVASSIGN expr 
[80] mod_equals_expr ::= ID MODASSIGN expr 
[81] mod_equals_expr ::= ID DOT ID MODASSIGN expr 
[82] arr_assign_expr ::= ID LSQBRACE expr RSQBRACE ASSIGN expr 
[83] arr_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr 
[84] dispatch_expr ::= ID LPAREN expr_list RPAREN 
[85] dispatch_expr ::= expr DOT ID LPAREN expr_list RPAREN 
[86] dispatch_expr ::= ID DOT ID LPAREN expr_list RPAREN 
[87] new_expr ::= NEW ID LPAREN RPAREN 
[88] new_arr_expr ::= NEW ID LSQBRACE expr RSQBRACE 
[89] instanceof_expr ::= expr INSTANCEOF ID 
[90] instanceof_expr ::= expr INSTANCEOF ID LSQBRACE RSQBRACE 
[91] cast_expr ::= LPAREN ID RPAREN LPAREN expr RPAREN 
[92] cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN 
[93] const_expr ::= INT_CONST 
[94] const_expr ::= BOOLEAN_CONST 
[95] const_expr ::= STRING_CONST 
[96] binary_expr ::= binary_arith_expr 
[97] binary_expr ::= binary_comp_expr 
[98] binary_expr ::= binary_logic_expr 
[99] binary_arith_expr ::= expr PLUS expr 
[100] binary_arith_expr ::= expr MINUS expr 
[101] binary_arith_expr ::= expr TIMES expr 
[102] binary_arith_expr ::= expr DIVIDE expr 
[103] binary_arith_expr ::= expr MODULUS expr 
[104] binary_comp_expr ::= expr EQ expr 
[105] binary_comp_expr ::= expr NE expr 
[106] binary_comp_expr ::= expr LT expr 
[107] binary_comp_expr ::= expr LEQ expr 
[108] binary_comp_expr ::= expr GT expr 
[109] binary_comp_expr ::= expr GEQ expr 
[110] binary_logic_expr ::= expr AND expr 
[111] binary_logic_expr ::= expr OR expr 
[112] binary_logic_expr ::= expr BITOR expr 
[113] binary_logic_expr ::= expr BITXOR expr 
[114] binary_logic_expr ::= expr BITAND expr 
[115] binary_logic_expr ::= expr SIGNEDLEFTSHIFT expr 
[116] binary_logic_expr ::= expr SIGNEDRIGHTSHIFT expr 
[117] binary_logic_expr ::= expr UNSIGNEDRIGHTSHIFT expr 
[118] unary_expr ::= unary_neg_expr 
[119] unary_expr ::= unary_not_expr 
[120] unary_expr ::= unary_bit_not_expr 
[121] unary_expr ::= unary_incr_expr 
[122] unary_expr ::= unary_decr_expr 
[123] unary_neg_expr ::= MINUS expr 
[124] unary_not_expr ::= NOT expr 
[125] unary_bit_not_expr ::= BITNOT expr 
[126] unary_incr_expr ::= INCR expr 
[127] unary_incr_expr ::= expr INCR 
[128] unary_decr_expr ::= DECR expr 
[129] unary_decr_expr ::= expr DECR 
[130] var_expr ::= ID 
[131] var_expr ::= ID DOT ID 
[132] arr_expr ::= ID LSQBRACE expr RSQBRACE 
[133] arr_expr ::= ID DOT ID LSQBRACE expr RSQBRACE 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [class ::= (*) CLASS ID EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class_list ::= (*) class , {EOF CLASS }]
  [class ::= (*) CLASS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [$START ::= (*) program EOF , {EOF }]
  [class_list ::= (*) class_list class , {EOF CLASS }]
  [program ::= (*) class_list , {EOF }]
}
transition on CLASS to state [4]
transition on class to state [3]
transition on program to state [2]
transition on class_list to state [1]

-------------------
lalr_state [1]: {
  [class ::= (*) CLASS ID EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class ::= (*) CLASS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class_list ::= class_list (*) class , {EOF CLASS }]
  [program ::= class_list (*) , {EOF }]
}
transition on CLASS to state [4]
transition on class to state [277]

-------------------
lalr_state [2]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [276]

-------------------
lalr_state [3]: {
  [class_list ::= class (*) , {EOF CLASS }]
}

-------------------
lalr_state [4]: {
  [class ::= CLASS (*) ID EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
  [class ::= CLASS (*) ID LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on ID to state [5]

-------------------
lalr_state [5]: {
  [class ::= CLASS ID (*) LBRACE member_list RBRACE , {EOF CLASS }]
  [class ::= CLASS ID (*) EXTENDS ID LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on EXTENDS to state [7]
transition on LBRACE to state [6]

-------------------
lalr_state [6]: {
  [class ::= CLASS ID LBRACE (*) member_list RBRACE , {EOF CLASS }]
  [member_list ::= (*) member_list member , {RBRACE ID }]
  [member_list ::= (*) , {RBRACE ID }]
}
transition on member_list to state [274]

-------------------
lalr_state [7]: {
  [class ::= CLASS ID EXTENDS (*) ID LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on ID to state [8]

-------------------
lalr_state [8]: {
  [class ::= CLASS ID EXTENDS ID (*) LBRACE member_list RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [9]

-------------------
lalr_state [9]: {
  [member_list ::= (*) member_list member , {RBRACE ID }]
  [class ::= CLASS ID EXTENDS ID LBRACE (*) member_list RBRACE , {EOF CLASS }]
  [member_list ::= (*) , {RBRACE ID }]
}
transition on member_list to state [10]

-------------------
lalr_state [10]: {
  [field ::= (*) ID ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member ::= (*) method , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [member_list ::= member_list (*) member , {RBRACE ID }]
  [method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= (*) ID ID SEMI , {RBRACE ID }]
  [member ::= (*) field , {RBRACE ID }]
  [class ::= CLASS ID EXTENDS ID LBRACE member_list (*) RBRACE , {EOF CLASS }]
}
transition on method to state [15]
transition on member to state [14]
transition on field to state [13]
transition on RBRACE to state [12]
transition on ID to state [11]

-------------------
lalr_state [11]: {
  [field ::= ID (*) LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [method ::= ID (*) ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID (*) LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= ID (*) ID SEMI , {RBRACE ID }]
  [field ::= ID (*) ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= ID (*) LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on LSQBRACE to state [17]
transition on ID to state [16]

-------------------
lalr_state [12]: {
  [class ::= CLASS ID EXTENDS ID LBRACE member_list RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [13]: {
  [member ::= field (*) , {RBRACE ID }]
}

-------------------
lalr_state [14]: {
  [member_list ::= member_list member (*) , {RBRACE ID }]
}

-------------------
lalr_state [15]: {
  [member ::= method (*) , {RBRACE ID }]
}

-------------------
lalr_state [16]: {
  [method ::= ID ID (*) LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID ID (*) SEMI , {RBRACE ID }]
  [field ::= ID ID (*) ASSIGN expr SEMI , {RBRACE ID }]
}
transition on ASSIGN to state [266]
transition on LPAREN to state [265]
transition on SEMI to state [264]

-------------------
lalr_state [17]: {
  [field ::= ID LSQBRACE (*) RSQBRACE ID SEMI , {RBRACE ID }]
  [field ::= ID LSQBRACE (*) RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= ID LSQBRACE (*) RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on RSQBRACE to state [18]

-------------------
lalr_state [18]: {
  [field ::= ID LSQBRACE RSQBRACE (*) ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= ID LSQBRACE RSQBRACE (*) ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID LSQBRACE RSQBRACE (*) ID SEMI , {RBRACE ID }]
}
transition on ID to state [19]

-------------------
lalr_state [19]: {
  [field ::= ID LSQBRACE RSQBRACE ID (*) ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= ID LSQBRACE RSQBRACE ID (*) LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= ID LSQBRACE RSQBRACE ID (*) SEMI , {RBRACE ID }]
}
transition on ASSIGN to state [22]
transition on LPAREN to state [21]
transition on SEMI to state [20]

-------------------
lalr_state [20]: {
  [field ::= ID LSQBRACE RSQBRACE ID SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [21]: {
  [formal_list ::= (*) , {RPAREN ID }]
  [formal_list ::= (*) formal_list formal COMMA , {RPAREN ID }]
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN (*) formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal_list ::= (*) formal_list formal , {RPAREN ID }]
}
transition on formal_list to state [178]

-------------------
lalr_state [22]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [field ::= ID LSQBRACE RSQBRACE ID ASSIGN (*) expr SEMI , {RBRACE ID }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [53]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [23]: {
  [unary_expr ::= unary_incr_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [24]: {
  [expr ::= new_arr_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [25]: {
  [assign_expr ::= div_equals_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [26]: {
  [expr ::= new_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [27]: {
  [expr ::= var_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [28]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= LPAREN (*) expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= LPAREN (*) ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= LPAREN (*) ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [166]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [165]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [29]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= DECR (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [164]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [30]: {
  [unary_expr ::= unary_decr_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [31]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= INCR (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [163]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [32]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= MINUS (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [162]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [33]: {
  [assign_expr ::= plus_equals_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [34]: {
  [expr ::= assign_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [35]: {
  [expr ::= dispatch_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [36]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= NOT (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [161]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [37]: {
  [expr ::= unary_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [38]: {
  [binary_expr ::= binary_comp_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [39]: {
  [assign_expr ::= mod_equals_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [40]: {
  [expr ::= const_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [41]: {
  [plus_equals_expr ::= ID (*) PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= ID (*) DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= ID (*) ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= ID (*) DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= ID (*) MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= ID (*) LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= ID (*) DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= ID (*) DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= ID (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= ID (*) DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= ID (*) TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= ID (*) DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= ID (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= ID (*) MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= ID (*) DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= ID (*) LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= ID (*) DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on LSQBRACE to state [127]
transition on LPAREN to state [126]
transition on MODASSIGN to state [125]
transition on TIMESASSIGN to state [124]
transition on DIVASSIGN to state [123]
transition on ASSIGN to state [122]
transition on DOT to state [121]
transition on PLUSASSIGN to state [120]
transition on MINUSASSIGN to state [119]

-------------------
lalr_state [42]: {
  [binary_expr ::= binary_arith_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [43]: {
  [unary_expr ::= unary_bit_not_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [44]: {
  [const_expr ::= INT_CONST (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [45]: {
  [new_expr ::= NEW (*) ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= NEW (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on ID to state [113]

-------------------
lalr_state [46]: {
  [expr ::= arr_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [47]: {
  [expr ::= instanceof_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [48]: {
  [expr ::= binary_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [49]: {
  [unary_expr ::= unary_not_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [50]: {
  [assign_expr ::= minus_equals_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [51]: {
  [binary_expr ::= binary_logic_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [52]: {
  [expr ::= cast_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [53]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [field ::= ID LSQBRACE RSQBRACE ID ASSIGN expr (*) SEMI , {RBRACE ID }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on SEMI to state [112]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [54]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= BITNOT (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [60]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [55]: {
  [expr ::= arr_assign_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [56]: {
  [const_expr ::= BOOLEAN_CONST (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [57]: {
  [assign_expr ::= times_equals_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [58]: {
  [const_expr ::= STRING_CONST (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [59]: {
  [unary_expr ::= unary_neg_expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [60]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= BITNOT expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [61]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr TIMES (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [111]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [62]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr GEQ (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [110]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [63]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr BITAND (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [109]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [64]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr AND (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [108]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [65]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr LT (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [107]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [66]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr NE (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [106]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [67]: {
  [unary_incr_expr ::= expr INCR (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [68]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr PLUS (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [105]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [69]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr OR (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [104]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [70]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr BITOR (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [103]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [71]: {
  [unary_decr_expr ::= expr DECR (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [72]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr GT (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [102]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [73]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr SIGNEDRIGHTSHIFT (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [101]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [74]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr SIGNEDLEFTSHIFT (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [100]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [75]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr DIVIDE (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [99]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [76]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr MINUS (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [98]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [77]: {
  [dispatch_expr ::= expr DOT (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on ID to state [92]

-------------------
lalr_state [78]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr EQ (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [91]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [79]: {
  [binary_logic_expr ::= expr BITXOR (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [90]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [80]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr LEQ (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [89]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [81]: {
  [instanceof_expr ::= expr INSTANCEOF (*) ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr INSTANCEOF (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on ID to state [86]

-------------------
lalr_state [82]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr MODULUS (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [85]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [83]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr UNSIGNEDRIGHTSHIFT (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [84]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [84]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr UNSIGNEDRIGHTSHIFT expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [85]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr MODULUS expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [86]: {
  [instanceof_expr ::= expr INSTANCEOF ID (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr INSTANCEOF ID (*) LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on LSQBRACE to state [87]

-------------------
lalr_state [87]: {
  [instanceof_expr ::= expr INSTANCEOF ID LSQBRACE (*) RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on RSQBRACE to state [88]

-------------------
lalr_state [88]: {
  [instanceof_expr ::= expr INSTANCEOF ID LSQBRACE RSQBRACE (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [89]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr LEQ expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [90]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr BITXOR expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [91]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr EQ expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [92]: {
  [dispatch_expr ::= expr DOT ID (*) LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on LPAREN to state [93]

-------------------
lalr_state [93]: {
  [expr_list ::= (*) , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [expr_list ::= (*) expr_list expr COMMA , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [dispatch_expr ::= expr DOT ID LPAREN (*) expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= (*) expr_list expr , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on expr_list to state [94]

-------------------
lalr_state [94]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= expr_list (*) expr , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [dispatch_expr ::= expr DOT ID LPAREN expr_list (*) RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= expr_list (*) expr COMMA , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [96]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on RPAREN to state [95]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [95]: {
  [dispatch_expr ::= expr DOT ID LPAREN expr_list RPAREN (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [96]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= expr_list expr (*) , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= expr_list expr (*) COMMA , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on COMMA to state [97]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [97]: {
  [expr_list ::= expr_list expr COMMA (*) , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [98]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr MINUS expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [99]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr DIVIDE expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [100]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr SIGNEDLEFTSHIFT expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [101]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr SIGNEDRIGHTSHIFT expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [102]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr GT expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [103]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr BITOR expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [104]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr OR expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [105]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr PLUS expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [106]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr NE expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [107]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr LT expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [108]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr AND expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [109]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr BITAND expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [110]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr GEQ expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [111]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr TIMES expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [112]: {
  [field ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [113]: {
  [new_expr ::= NEW ID (*) LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= NEW ID (*) LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on LPAREN to state [115]
transition on LSQBRACE to state [114]

-------------------
lalr_state [114]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= NEW ID LSQBRACE (*) expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [117]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [115]: {
  [new_expr ::= NEW ID LPAREN (*) RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on RPAREN to state [116]

-------------------
lalr_state [116]: {
  [new_expr ::= NEW ID LPAREN RPAREN (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [117]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= NEW ID LSQBRACE expr (*) RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on RSQBRACE to state [118]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [118]: {
  [new_arr_expr ::= NEW ID LSQBRACE expr RSQBRACE (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [119]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= ID MINUSASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [160]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [120]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= ID PLUSASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [159]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [121]: {
  [arr_assign_expr ::= ID DOT (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= ID DOT (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= ID DOT (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= ID DOT (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= ID DOT (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= ID DOT (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= ID DOT (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= ID DOT (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= ID DOT (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= ID DOT (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on ID to state [138]

-------------------
lalr_state [122]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= ID ASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [137]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [123]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= ID DIVASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [136]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [124]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= ID TIMESASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [135]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [125]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= ID MODASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [134]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [126]: {
  [expr_list ::= (*) , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [dispatch_expr ::= ID LPAREN (*) expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= (*) expr_list expr COMMA , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [expr_list ::= (*) expr_list expr , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on expr_list to state [132]

-------------------
lalr_state [127]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= ID LSQBRACE (*) expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [128]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [128]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= ID LSQBRACE expr (*) RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= ID LSQBRACE expr (*) RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on RSQBRACE to state [129]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [129]: {
  [arr_expr ::= ID LSQBRACE expr RSQBRACE (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= ID LSQBRACE expr RSQBRACE (*) ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on ASSIGN to state [130]

-------------------
lalr_state [130]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= ID LSQBRACE expr RSQBRACE ASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [131]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [131]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= ID LSQBRACE expr RSQBRACE ASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [132]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= ID LPAREN expr_list (*) RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= expr_list (*) expr , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= expr_list (*) expr COMMA , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [96]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on RPAREN to state [133]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [133]: {
  [dispatch_expr ::= ID LPAREN expr_list RPAREN (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [134]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= ID MODASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [135]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= ID TIMESASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [136]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= ID DIVASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [137]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= ID ASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [138]: {
  [times_equals_expr ::= ID DOT ID (*) TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= ID DOT ID (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= ID DOT ID (*) DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= ID DOT ID (*) PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= ID DOT ID (*) LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= ID DOT ID (*) MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= ID DOT ID (*) MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= ID DOT ID (*) ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= ID DOT ID (*) LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= ID DOT ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on ASSIGN to state [146]
transition on LPAREN to state [145]
transition on PLUSASSIGN to state [144]
transition on DIVASSIGN to state [143]
transition on LSQBRACE to state [142]
transition on MINUSASSIGN to state [141]
transition on TIMESASSIGN to state [140]
transition on MODASSIGN to state [139]

-------------------
lalr_state [139]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= ID DOT ID MODASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [158]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [140]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= ID DOT ID TIMESASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [157]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [141]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= ID DOT ID MINUSASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [156]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [142]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= ID DOT ID LSQBRACE (*) expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= ID DOT ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [152]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [143]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= ID DOT ID DIVASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [151]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [144]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= ID DOT ID PLUSASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [150]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [145]: {
  [expr_list ::= (*) , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [dispatch_expr ::= ID DOT ID LPAREN (*) expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= (*) expr_list expr COMMA , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [expr_list ::= (*) expr_list expr , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on expr_list to state [148]

-------------------
lalr_state [146]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= ID DOT ID ASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [147]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [147]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= ID DOT ID ASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [148]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= expr_list (*) expr , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr_list ::= expr_list (*) expr COMMA , {NEW MINUS NOT INCR DECR LPAREN RPAREN ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [dispatch_expr ::= ID DOT ID LPAREN expr_list (*) RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [96]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on RPAREN to state [149]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [149]: {
  [dispatch_expr ::= ID DOT ID LPAREN expr_list RPAREN (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [150]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= ID DOT ID PLUSASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [151]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= ID DOT ID DIVASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [152]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= ID DOT ID LSQBRACE expr (*) RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= ID DOT ID LSQBRACE expr (*) RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on RSQBRACE to state [153]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [153]: {
  [arr_expr ::= ID DOT ID LSQBRACE expr RSQBRACE (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE (*) ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on ASSIGN to state [154]

-------------------
lalr_state [154]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) const_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) div_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID DOT ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) var_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_comp_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) mod_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) dispatch_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_expr ::= (*) binary_logic_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) new_arr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE ASSIGN (*) expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) instanceof_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) cast_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) INT_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) binary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) BOOLEAN_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) unary_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [const_expr ::= (*) STRING_CONST , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [var_expr ::= (*) ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= (*) expr EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [expr ::= (*) assign_expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [155]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [155]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [arr_assign_expr ::= ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [156]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= ID DOT ID MINUSASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [157]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [times_equals_expr ::= ID DOT ID TIMESASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [158]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [mod_equals_expr ::= ID DOT ID MODASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [159]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [plus_equals_expr ::= ID PLUSASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [160]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= ID MINUSASSIGN expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [161]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_not_expr ::= NOT expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [162]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_neg_expr ::= MINUS expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [163]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= INCR expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [164]: {
  [binary_comp_expr ::= expr (*) EQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LEQ expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MINUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) NE expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) AND expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_decr_expr ::= DECR expr (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [165]: {
  [plus_equals_expr ::= ID (*) PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= ID (*) DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= LPAREN ID (*) LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [assign_expr ::= ID (*) ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= ID (*) DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= ID (*) MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= ID (*) DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= ID (*) DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= ID (*) DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= ID (*) TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= ID (*) DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= ID (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= LPAREN ID (*) RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [minus_equals_expr ::= ID (*) MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= ID (*) DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= ID (*) LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= ID (*) DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on LSQBRACE to state [169]
transition on LPAREN to state [126]
transition on MODASSIGN to state [125]
transition on TIMESASSIGN to state [124]
transition on DIVASSIGN to state [123]
transition on RPAREN to state [168]
transition on ASSIGN to state [122]
transition on DOT to state [121]
transition on PLUSASSIGN to state [120]
transition on MINUSASSIGN to state [119]

-------------------
lalr_state [166]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= LPAREN expr (*) RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on RPAREN to state [167]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [167]: {
  [expr ::= LPAREN expr RPAREN (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [168]: {
  [cast_expr ::= LPAREN ID RPAREN (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on LPAREN to state [175]

-------------------
lalr_state [169]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= LPAREN ID LSQBRACE (*) RSQBRACE RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on RSQBRACE to state [170]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [128]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [170]: {
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE (*) RPAREN LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on RPAREN to state [171]

-------------------
lalr_state [171]: {
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN (*) LPAREN expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}
transition on LPAREN to state [172]

-------------------
lalr_state [172]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN (*) expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [173]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [173]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr (*) RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on RPAREN to state [174]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [174]: {
  [cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [175]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= LPAREN ID RPAREN LPAREN (*) expr RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [176]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [176]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= LPAREN ID RPAREN LPAREN expr (*) RPAREN , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on RPAREN to state [177]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [177]: {
  [cast_expr ::= LPAREN ID RPAREN LPAREN expr RPAREN (*) , {NEW INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS NOT AND OR EQ NE LT LEQ GT GEQ INCR DECR LPAREN RPAREN RSQBRACE SEMI COMMA DOT ID INT_CONST BOOLEAN_CONST STRING_CONST SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND BITNOT }]
}

-------------------
lalr_state [178]: {
  [formal ::= (*) ID ID , {RPAREN COMMA ID }]
  [formal_list ::= formal_list (*) formal COMMA , {RPAREN ID }]
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list (*) RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal ::= (*) ID LSQBRACE RSQBRACE ID , {RPAREN COMMA ID }]
  [formal_list ::= formal_list (*) formal , {RPAREN ID }]
}
transition on formal to state [181]
transition on RPAREN to state [180]
transition on ID to state [179]

-------------------
lalr_state [179]: {
  [formal ::= ID (*) LSQBRACE RSQBRACE ID , {RPAREN COMMA ID }]
  [formal ::= ID (*) ID , {RPAREN COMMA ID }]
}
transition on LSQBRACE to state [261]
transition on ID to state [260]

-------------------
lalr_state [180]: {
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN (*) LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on LBRACE to state [183]

-------------------
lalr_state [181]: {
  [formal_list ::= formal_list formal (*) COMMA , {RPAREN ID }]
  [formal_list ::= formal_list formal (*) , {RPAREN ID }]
}
transition on COMMA to state [182]

-------------------
lalr_state [182]: {
  [formal_list ::= formal_list formal COMMA (*) , {RPAREN ID }]
}

-------------------
lalr_state [183]: {
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE (*) stmt_list RBRACE , {RBRACE ID }]
  [stmt_list ::= (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [stmt_list ::= (*) stmt_list stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt_list to state [184]

-------------------
lalr_state [184]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list (*) RBRACE , {RBRACE ID }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt_list ::= stmt_list (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [202]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on RBRACE to state [199]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [185]: {
  [stmt ::= ret_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [186]: {
  [stmt ::= for_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [187]: {
  [for_stmt ::= FOR (*) LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR (*) LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR (*) LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR (*) LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR (*) LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR (*) LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR (*) LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR (*) LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on LPAREN to state [230]

-------------------
lalr_state [188]: {
  [stmt ::= break_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [189]: {
  [if_stmt ::= IF (*) LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [if_stmt ::= IF (*) LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on LPAREN to state [224]

-------------------
lalr_state [190]: {
  [plus_equals_expr ::= ID (*) PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= ID (*) DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= ID (*) LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= ID (*) ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= ID (*) DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= ID (*) LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [mod_equals_expr ::= ID (*) MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= ID (*) LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= ID (*) DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= ID (*) DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= ID (*) , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= ID (*) DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= ID (*) TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= ID (*) DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= ID (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= ID (*) DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= ID (*) MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= ID (*) ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [div_equals_expr ::= ID (*) DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= ID (*) LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= ID (*) DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on LSQBRACE to state [215]
transition on LPAREN to state [126]
transition on MODASSIGN to state [125]
transition on TIMESASSIGN to state [124]
transition on DIVASSIGN to state [123]
transition on ASSIGN to state [122]
transition on DOT to state [121]
transition on ID to state [214]
transition on PLUSASSIGN to state [120]
transition on MINUSASSIGN to state [119]

-------------------
lalr_state [191]: {
  [stmt ::= decl_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [192]: {
  [stmt ::= block_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [193]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= RETURN (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= RETURN (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [212]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on SEMI to state [211]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [194]: {
  [stmt ::= expr_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [195]: {
  [stmt ::= while_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [196]: {
  [break_stmt ::= BREAK (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on SEMI to state [210]

-------------------
lalr_state [197]: {
  [stmt_list ::= (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [block_stmt ::= LBRACE (*) stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [stmt_list ::= (*) stmt_list stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt_list to state [208]

-------------------
lalr_state [198]: {
  [while_stmt ::= WHILE (*) LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on LPAREN to state [204]

-------------------
lalr_state [199]: {
  [method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE (*) , {RBRACE ID }]
}

-------------------
lalr_state [200]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on SEMI to state [203]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [201]: {
  [stmt ::= if_stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [202]: {
  [stmt_list ::= stmt_list stmt (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [203]: {
  [expr_stmt ::= expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [204]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= WHILE LPAREN (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [205]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [205]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= WHILE LPAREN expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on RPAREN to state [206]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [206]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [while_stmt ::= WHILE LPAREN expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [207]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [207]: {
  [while_stmt ::= WHILE LPAREN expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [208]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= LBRACE stmt_list (*) RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt_list ::= stmt_list (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [202]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on RBRACE to state [209]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [209]: {
  [block_stmt ::= LBRACE stmt_list RBRACE (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [210]: {
  [break_stmt ::= BREAK SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [211]: {
  [ret_stmt ::= RETURN SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [212]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= RETURN expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on SEMI to state [213]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [213]: {
  [ret_stmt ::= RETURN expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [214]: {
  [decl_stmt ::= ID ID (*) ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on ASSIGN to state [221]

-------------------
lalr_state [215]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= ID LSQBRACE (*) expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= ID LSQBRACE (*) expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= ID LSQBRACE (*) RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RSQBRACE DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on RSQBRACE to state [216]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [128]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [216]: {
  [decl_stmt ::= ID LSQBRACE RSQBRACE (*) ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on ID to state [217]

-------------------
lalr_state [217]: {
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID (*) ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on ASSIGN to state [218]

-------------------
lalr_state [218]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [219]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [219]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on SEMI to state [220]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [220]: {
  [decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [221]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= ID ID ASSIGN (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [222]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [222]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= ID ID ASSIGN expr (*) SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on SEMI to state [223]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [223]: {
  [decl_stmt ::= ID ID ASSIGN expr SEMI (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [224]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= IF LPAREN (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= IF LPAREN (*) expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [225]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [225]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= IF LPAREN expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= IF LPAREN expr (*) RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on RPAREN to state [226]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [226]: {
  [if_stmt ::= IF LPAREN expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [if_stmt ::= IF LPAREN expr RPAREN (*) stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [227]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [227]: {
  [if_stmt ::= IF LPAREN expr RPAREN stmt (*) ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [if_stmt ::= IF LPAREN expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on ELSE to state [228]

-------------------
lalr_state [228]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [if_stmt ::= IF LPAREN expr RPAREN stmt ELSE (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [229]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [229]: {
  [if_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [230]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN (*) SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN (*) SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN (*) SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN (*) expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN (*) SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [232]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on SEMI to state [231]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [231]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI (*) expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI (*) expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [248]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on SEMI to state [247]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [232]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr (*) SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on SEMI to state [233]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [233]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [235]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on SEMI to state [234]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [234]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [243]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on RPAREN to state [242]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [235]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI expr (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI expr (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on SEMI to state [236]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [236]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [238]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on RPAREN to state [237]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [237]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [241]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [238]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on RPAREN to state [239]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [239]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [240]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [240]: {
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [241]: {
  [for_stmt ::= FOR LPAREN expr SEMI expr SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [242]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [246]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [243]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on RPAREN to state [244]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [244]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR LPAREN expr SEMI SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [245]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [245]: {
  [for_stmt ::= FOR LPAREN expr SEMI SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [246]: {
  [for_stmt ::= FOR LPAREN expr SEMI SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [247]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [256]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on RPAREN to state [255]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [248]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI expr (*) SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI expr (*) SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on SEMI to state [249]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [249]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI (*) expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [251]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on RPAREN to state [250]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [250]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [254]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [251]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on RPAREN to state [252]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [252]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR LPAREN SEMI expr SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [253]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [253]: {
  [for_stmt ::= FOR LPAREN SEMI expr SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [254]: {
  [for_stmt ::= FOR LPAREN SEMI expr SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [255]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR LPAREN SEMI SEMI RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [259]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [256]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= FOR LPAREN SEMI SEMI expr (*) RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR RPAREN DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on RPAREN to state [257]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [257]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [for_stmt ::= FOR LPAREN SEMI SEMI expr RPAREN (*) stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [258]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [258]: {
  [for_stmt ::= FOR LPAREN SEMI SEMI expr RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [259]: {
  [for_stmt ::= FOR LPAREN SEMI SEMI RPAREN stmt (*) , {IF ELSE WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}

-------------------
lalr_state [260]: {
  [formal ::= ID ID (*) , {RPAREN COMMA ID }]
}

-------------------
lalr_state [261]: {
  [formal ::= ID LSQBRACE (*) RSQBRACE ID , {RPAREN COMMA ID }]
}
transition on RSQBRACE to state [262]

-------------------
lalr_state [262]: {
  [formal ::= ID LSQBRACE RSQBRACE (*) ID , {RPAREN COMMA ID }]
}
transition on ID to state [263]

-------------------
lalr_state [263]: {
  [formal ::= ID LSQBRACE RSQBRACE ID (*) , {RPAREN COMMA ID }]
}

-------------------
lalr_state [264]: {
  [field ::= ID ID SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [265]: {
  [method ::= ID ID LPAREN (*) formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [formal_list ::= (*) , {RPAREN ID }]
  [formal_list ::= (*) formal_list formal COMMA , {RPAREN ID }]
  [formal_list ::= (*) formal_list formal , {RPAREN ID }]
}
transition on formal_list to state [269]

-------------------
lalr_state [266]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [field ::= ID ID ASSIGN (*) expr SEMI , {RBRACE ID }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on BITNOT to state [54]
transition on expr to state [267]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on binary_arith_expr to state [42]
transition on ID to state [41]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]

-------------------
lalr_state [267]: {
  [binary_comp_expr ::= expr (*) EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_decr_expr ::= expr (*) DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [unary_incr_expr ::= expr (*) INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= expr (*) DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [field ::= ID ID ASSIGN expr (*) SEMI , {RBRACE ID }]
  [binary_arith_expr ::= expr (*) MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= expr (*) LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_logic_expr ::= expr (*) SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= expr (*) INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= expr (*) PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
}
transition on UNSIGNEDRIGHTSHIFT to state [83]
transition on MODULUS to state [82]
transition on INSTANCEOF to state [81]
transition on LEQ to state [80]
transition on BITXOR to state [79]
transition on EQ to state [78]
transition on DOT to state [77]
transition on MINUS to state [76]
transition on DIVIDE to state [75]
transition on SIGNEDLEFTSHIFT to state [74]
transition on SIGNEDRIGHTSHIFT to state [73]
transition on GT to state [72]
transition on DECR to state [71]
transition on BITOR to state [70]
transition on SEMI to state [268]
transition on OR to state [69]
transition on PLUS to state [68]
transition on INCR to state [67]
transition on NE to state [66]
transition on LT to state [65]
transition on AND to state [64]
transition on BITAND to state [63]
transition on GEQ to state [62]
transition on TIMES to state [61]

-------------------
lalr_state [268]: {
  [field ::= ID ID ASSIGN expr SEMI (*) , {RBRACE ID }]
}

-------------------
lalr_state [269]: {
  [formal ::= (*) ID ID , {RPAREN COMMA ID }]
  [formal_list ::= formal_list (*) formal COMMA , {RPAREN ID }]
  [formal ::= (*) ID LSQBRACE RSQBRACE ID , {RPAREN COMMA ID }]
  [formal_list ::= formal_list (*) formal , {RPAREN ID }]
  [method ::= ID ID LPAREN formal_list (*) RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on formal to state [181]
transition on RPAREN to state [270]
transition on ID to state [179]

-------------------
lalr_state [270]: {
  [method ::= ID ID LPAREN formal_list RPAREN (*) LBRACE stmt_list RBRACE , {RBRACE ID }]
}
transition on LBRACE to state [271]

-------------------
lalr_state [271]: {
  [stmt_list ::= (*) , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [method ::= ID ID LPAREN formal_list RPAREN LBRACE (*) stmt_list RBRACE , {RBRACE ID }]
  [stmt_list ::= (*) stmt_list stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt_list to state [272]

-------------------
lalr_state [272]: {
  [binary_logic_expr ::= (*) expr BITXOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_expr ::= (*) NEW ID LPAREN RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) const_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_decr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_arith_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) div_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID DOT ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr NE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DOT ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) for_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [method ::= ID ID LPAREN formal_list RPAREN LBRACE stmt_list (*) RBRACE , {RBRACE ID }]
  [binary_logic_expr ::= (*) expr BITAND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [new_arr_expr ::= (*) NEW ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) var_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [while_stmt ::= (*) WHILE LPAREN expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_neg_expr ::= (*) MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_comp_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) mod_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [break_stmt ::= (*) BREAK SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) dispatch_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) break_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDLEFTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_not_expr ::= (*) NOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_expr ::= (*) binary_logic_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [arr_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr LEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [mod_equals_expr ::= (*) ID DOT ID MODASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) ret_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr SIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [instanceof_expr ::= (*) expr INSTANCEOF ID LSQBRACE RSQBRACE , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_bit_not_expr ::= (*) BITNOT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr PLUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [plus_equals_expr ::= (*) ID DOT ID PLUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [ret_stmt ::= (*) RETURN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) new_arr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) block_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr UNSIGNEDRIGHTSHIFT expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) INCR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MINUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt_list ::= stmt_list (*) stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [block_stmt ::= (*) LBRACE stmt_list RBRACE , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_comp_expr ::= (*) expr GEQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [arr_assign_expr ::= (*) ID DOT ID LSQBRACE expr RSQBRACE ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) instanceof_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr_stmt ::= (*) expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_neg_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [cast_expr ::= (*) LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) ID DOT ID ASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_incr_expr ::= (*) expr INCR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr TIMES expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [minus_equals_expr ::= (*) ID DOT ID MINUSASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) expr_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr AND expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) cast_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) INT_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) plus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI expr SEMI RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) DECR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr DIVIDE expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) decl_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr OR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) expr DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) binary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [decl_stmt ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_bit_not_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) BOOLEAN_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) minus_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN expr SEMI SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_decr_expr ::= (*) expr DECR , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_arith_expr ::= (*) expr MODULUS expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [times_equals_expr ::= (*) ID DOT ID TIMESASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) if_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [binary_logic_expr ::= (*) expr BITOR expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [dispatch_expr ::= (*) ID DOT ID LPAREN expr_list RPAREN , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) unary_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [if_stmt ::= (*) IF LPAREN expr RPAREN stmt ELSE stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [unary_expr ::= (*) unary_incr_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [const_expr ::= (*) STRING_CONST , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [assign_expr ::= (*) times_equals_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [for_stmt ::= (*) FOR LPAREN SEMI expr SEMI expr RPAREN stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
  [var_expr ::= (*) ID , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [binary_comp_expr ::= (*) expr EQ expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [div_equals_expr ::= (*) ID DIVASSIGN expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [expr ::= (*) assign_expr , {INSTANCEOF PLUS MINUS TIMES DIVIDE MODULUS AND OR EQ NE LT LEQ GT GEQ INCR DECR SEMI DOT SIGNEDLEFTSHIFT SIGNEDRIGHTSHIFT UNSIGNEDRIGHTSHIFT BITOR BITXOR BITAND }]
  [stmt ::= (*) while_stmt , {IF WHILE FOR BREAK NEW RETURN MINUS NOT INCR DECR LPAREN LBRACE RBRACE ID INT_CONST BOOLEAN_CONST STRING_CONST BITNOT }]
}
transition on stmt to state [202]
transition on unary_neg_expr to state [59]
transition on STRING_CONST to state [58]
transition on times_equals_expr to state [57]
transition on BOOLEAN_CONST to state [56]
transition on arr_assign_expr to state [55]
transition on if_stmt to state [201]
transition on BITNOT to state [54]
transition on expr to state [200]
transition on RBRACE to state [273]
transition on WHILE to state [198]
transition on cast_expr to state [52]
transition on binary_logic_expr to state [51]
transition on LBRACE to state [197]
transition on minus_equals_expr to state [50]
transition on unary_not_expr to state [49]
transition on binary_expr to state [48]
transition on BREAK to state [196]
transition on while_stmt to state [195]
transition on instanceof_expr to state [47]
transition on arr_expr to state [46]
transition on NEW to state [45]
transition on expr_stmt to state [194]
transition on INT_CONST to state [44]
transition on unary_bit_not_expr to state [43]
transition on RETURN to state [193]
transition on block_stmt to state [192]
transition on binary_arith_expr to state [42]
transition on decl_stmt to state [191]
transition on ID to state [190]
transition on IF to state [189]
transition on const_expr to state [40]
transition on mod_equals_expr to state [39]
transition on binary_comp_expr to state [38]
transition on unary_expr to state [37]
transition on NOT to state [36]
transition on dispatch_expr to state [35]
transition on assign_expr to state [34]
transition on break_stmt to state [188]
transition on plus_equals_expr to state [33]
transition on MINUS to state [32]
transition on FOR to state [187]
transition on INCR to state [31]
transition on unary_decr_expr to state [30]
transition on DECR to state [29]
transition on LPAREN to state [28]
transition on var_expr to state [27]
transition on new_expr to state [26]
transition on div_equals_expr to state [25]
transition on for_stmt to state [186]
transition on new_arr_expr to state [24]
transition on unary_incr_expr to state [23]
transition on ret_stmt to state [185]

-------------------
lalr_state [273]: {
  [method ::= ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE (*) , {RBRACE ID }]
}

-------------------
lalr_state [274]: {
  [field ::= (*) ID ID ASSIGN expr SEMI , {RBRACE ID }]
  [method ::= (*) ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [member ::= (*) method , {RBRACE ID }]
  [class ::= CLASS ID LBRACE member_list (*) RBRACE , {EOF CLASS }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID SEMI , {RBRACE ID }]
  [member_list ::= member_list (*) member , {RBRACE ID }]
  [method ::= (*) ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE , {RBRACE ID }]
  [field ::= (*) ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI , {RBRACE ID }]
  [field ::= (*) ID ID SEMI , {RBRACE ID }]
  [member ::= (*) field , {RBRACE ID }]
}
transition on method to state [15]
transition on member to state [14]
transition on field to state [13]
transition on RBRACE to state [275]
transition on ID to state [11]

-------------------
lalr_state [275]: {
  [class ::= CLASS ID LBRACE member_list RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [276]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
lalr_state [277]: {
  [class_list ::= class_list class (*) , {EOF CLASS }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 3:SHIFT(to state 4)]
From state #1
 [term 0:REDUCE(with prod 0)] [term 3:SHIFT(to state 4)]
From state #2
 [term 0:SHIFT(to state 276)]
From state #3
 [term 0:REDUCE(with prod 2)] [term 3:REDUCE(with prod 2)]
From state #4
 [term 39:SHIFT(to state 5)]
From state #5
 [term 4:SHIFT(to state 7)] [term 32:SHIFT(to state 6)]
From state #6
 [term 33:REDUCE(with prod 6)] [term 39:REDUCE(with prod 6)]
From state #7
 [term 39:SHIFT(to state 8)]
From state #8
 [term 32:SHIFT(to state 9)]
From state #9
 [term 33:REDUCE(with prod 6)] [term 39:REDUCE(with prod 6)]
From state #10
 [term 33:SHIFT(to state 12)] [term 39:SHIFT(to state 11)]
From state #11
 [term 34:SHIFT(to state 17)] [term 39:SHIFT(to state 16)]
From state #12
 [term 0:REDUCE(with prod 5)] [term 3:REDUCE(with prod 5)]
From state #13
 [term 33:REDUCE(with prod 9)] [term 39:REDUCE(with prod 9)]
From state #14
 [term 33:REDUCE(with prod 7)] [term 39:REDUCE(with prod 7)]
From state #15
 [term 33:REDUCE(with prod 8)] [term 39:REDUCE(with prod 8)]
From state #16
 [term 27:SHIFT(to state 266)] [term 30:SHIFT(to state 265)]
 [term 36:SHIFT(to state 264)]
From state #17
 [term 35:SHIFT(to state 18)]
From state #18
 [term 39:SHIFT(to state 19)]
From state #19
 [term 27:SHIFT(to state 22)] [term 30:SHIFT(to state 21)]
 [term 36:SHIFT(to state 20)]
From state #20
 [term 33:REDUCE(with prod 13)] [term 39:REDUCE(with prod 13)]
From state #21
 [term 31:REDUCE(with prod 16)] [term 39:REDUCE(with prod 16)]
From state #22
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #23
 [term 10:REDUCE(with prod 121)] [term 12:REDUCE(with prod 121)]
 [term 13:REDUCE(with prod 121)] [term 14:REDUCE(with prod 121)]
 [term 15:REDUCE(with prod 121)] [term 16:REDUCE(with prod 121)]
 [term 17:REDUCE(with prod 121)] [term 18:REDUCE(with prod 121)]
 [term 19:REDUCE(with prod 121)] [term 20:REDUCE(with prod 121)]
 [term 21:REDUCE(with prod 121)] [term 22:REDUCE(with prod 121)]
 [term 23:REDUCE(with prod 121)] [term 24:REDUCE(with prod 121)]
 [term 25:REDUCE(with prod 121)] [term 26:REDUCE(with prod 121)]
 [term 28:REDUCE(with prod 121)] [term 29:REDUCE(with prod 121)]
 [term 30:REDUCE(with prod 121)] [term 31:REDUCE(with prod 121)]
 [term 35:REDUCE(with prod 121)] [term 36:REDUCE(with prod 121)]
 [term 37:REDUCE(with prod 121)] [term 38:REDUCE(with prod 121)]
 [term 39:REDUCE(with prod 121)] [term 40:REDUCE(with prod 121)]
 [term 41:REDUCE(with prod 121)] [term 42:REDUCE(with prod 121)]
 [term 43:REDUCE(with prod 121)] [term 44:REDUCE(with prod 121)]
 [term 45:REDUCE(with prod 121)] [term 46:REDUCE(with prod 121)]
 [term 47:REDUCE(with prod 121)] [term 48:REDUCE(with prod 121)]
 [term 49:REDUCE(with prod 121)]
From state #24
 [term 10:REDUCE(with prod 56)] [term 12:REDUCE(with prod 56)]
 [term 13:REDUCE(with prod 56)] [term 14:REDUCE(with prod 56)]
 [term 15:REDUCE(with prod 56)] [term 16:REDUCE(with prod 56)]
 [term 17:REDUCE(with prod 56)] [term 18:REDUCE(with prod 56)]
 [term 19:REDUCE(with prod 56)] [term 20:REDUCE(with prod 56)]
 [term 21:REDUCE(with prod 56)] [term 22:REDUCE(with prod 56)]
 [term 23:REDUCE(with prod 56)] [term 24:REDUCE(with prod 56)]
 [term 25:REDUCE(with prod 56)] [term 26:REDUCE(with prod 56)]
 [term 28:REDUCE(with prod 56)] [term 29:REDUCE(with prod 56)]
 [term 30:REDUCE(with prod 56)] [term 31:REDUCE(with prod 56)]
 [term 35:REDUCE(with prod 56)] [term 36:REDUCE(with prod 56)]
 [term 37:REDUCE(with prod 56)] [term 38:REDUCE(with prod 56)]
 [term 39:REDUCE(with prod 56)] [term 40:REDUCE(with prod 56)]
 [term 41:REDUCE(with prod 56)] [term 42:REDUCE(with prod 56)]
 [term 43:REDUCE(with prod 56)] [term 44:REDUCE(with prod 56)]
 [term 45:REDUCE(with prod 56)] [term 46:REDUCE(with prod 56)]
 [term 47:REDUCE(with prod 56)] [term 48:REDUCE(with prod 56)]
 [term 49:REDUCE(with prod 56)]
From state #25
 [term 10:REDUCE(with prod 70)] [term 12:REDUCE(with prod 70)]
 [term 13:REDUCE(with prod 70)] [term 14:REDUCE(with prod 70)]
 [term 15:REDUCE(with prod 70)] [term 16:REDUCE(with prod 70)]
 [term 17:REDUCE(with prod 70)] [term 18:REDUCE(with prod 70)]
 [term 19:REDUCE(with prod 70)] [term 20:REDUCE(with prod 70)]
 [term 21:REDUCE(with prod 70)] [term 22:REDUCE(with prod 70)]
 [term 23:REDUCE(with prod 70)] [term 24:REDUCE(with prod 70)]
 [term 25:REDUCE(with prod 70)] [term 26:REDUCE(with prod 70)]
 [term 28:REDUCE(with prod 70)] [term 29:REDUCE(with prod 70)]
 [term 30:REDUCE(with prod 70)] [term 31:REDUCE(with prod 70)]
 [term 35:REDUCE(with prod 70)] [term 36:REDUCE(with prod 70)]
 [term 37:REDUCE(with prod 70)] [term 38:REDUCE(with prod 70)]
 [term 39:REDUCE(with prod 70)] [term 40:REDUCE(with prod 70)]
 [term 41:REDUCE(with prod 70)] [term 42:REDUCE(with prod 70)]
 [term 43:REDUCE(with prod 70)] [term 44:REDUCE(with prod 70)]
 [term 45:REDUCE(with prod 70)] [term 46:REDUCE(with prod 70)]
 [term 47:REDUCE(with prod 70)] [term 48:REDUCE(with prod 70)]
 [term 49:REDUCE(with prod 70)]
From state #26
 [term 10:REDUCE(with prod 55)] [term 12:REDUCE(with prod 55)]
 [term 13:REDUCE(with prod 55)] [term 14:REDUCE(with prod 55)]
 [term 15:REDUCE(with prod 55)] [term 16:REDUCE(with prod 55)]
 [term 17:REDUCE(with prod 55)] [term 18:REDUCE(with prod 55)]
 [term 19:REDUCE(with prod 55)] [term 20:REDUCE(with prod 55)]
 [term 21:REDUCE(with prod 55)] [term 22:REDUCE(with prod 55)]
 [term 23:REDUCE(with prod 55)] [term 24:REDUCE(with prod 55)]
 [term 25:REDUCE(with prod 55)] [term 26:REDUCE(with prod 55)]
 [term 28:REDUCE(with prod 55)] [term 29:REDUCE(with prod 55)]
 [term 30:REDUCE(with prod 55)] [term 31:REDUCE(with prod 55)]
 [term 35:REDUCE(with prod 55)] [term 36:REDUCE(with prod 55)]
 [term 37:REDUCE(with prod 55)] [term 38:REDUCE(with prod 55)]
 [term 39:REDUCE(with prod 55)] [term 40:REDUCE(with prod 55)]
 [term 41:REDUCE(with prod 55)] [term 42:REDUCE(with prod 55)]
 [term 43:REDUCE(with prod 55)] [term 44:REDUCE(with prod 55)]
 [term 45:REDUCE(with prod 55)] [term 46:REDUCE(with prod 55)]
 [term 47:REDUCE(with prod 55)] [term 48:REDUCE(with prod 55)]
 [term 49:REDUCE(with prod 55)]
From state #27
 [term 10:REDUCE(with prod 62)] [term 12:REDUCE(with prod 62)]
 [term 13:REDUCE(with prod 62)] [term 14:REDUCE(with prod 62)]
 [term 15:REDUCE(with prod 62)] [term 16:REDUCE(with prod 62)]
 [term 17:REDUCE(with prod 62)] [term 18:REDUCE(with prod 62)]
 [term 19:REDUCE(with prod 62)] [term 20:REDUCE(with prod 62)]
 [term 21:REDUCE(with prod 62)] [term 22:REDUCE(with prod 62)]
 [term 23:REDUCE(with prod 62)] [term 24:REDUCE(with prod 62)]
 [term 25:REDUCE(with prod 62)] [term 26:REDUCE(with prod 62)]
 [term 28:REDUCE(with prod 62)] [term 29:REDUCE(with prod 62)]
 [term 30:REDUCE(with prod 62)] [term 31:REDUCE(with prod 62)]
 [term 35:REDUCE(with prod 62)] [term 36:REDUCE(with prod 62)]
 [term 37:REDUCE(with prod 62)] [term 38:REDUCE(with prod 62)]
 [term 39:REDUCE(with prod 62)] [term 40:REDUCE(with prod 62)]
 [term 41:REDUCE(with prod 62)] [term 42:REDUCE(with prod 62)]
 [term 43:REDUCE(with prod 62)] [term 44:REDUCE(with prod 62)]
 [term 45:REDUCE(with prod 62)] [term 46:REDUCE(with prod 62)]
 [term 47:REDUCE(with prod 62)] [term 48:REDUCE(with prod 62)]
 [term 49:REDUCE(with prod 62)]
From state #28
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 165)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #29
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #30
 [term 10:REDUCE(with prod 122)] [term 12:REDUCE(with prod 122)]
 [term 13:REDUCE(with prod 122)] [term 14:REDUCE(with prod 122)]
 [term 15:REDUCE(with prod 122)] [term 16:REDUCE(with prod 122)]
 [term 17:REDUCE(with prod 122)] [term 18:REDUCE(with prod 122)]
 [term 19:REDUCE(with prod 122)] [term 20:REDUCE(with prod 122)]
 [term 21:REDUCE(with prod 122)] [term 22:REDUCE(with prod 122)]
 [term 23:REDUCE(with prod 122)] [term 24:REDUCE(with prod 122)]
 [term 25:REDUCE(with prod 122)] [term 26:REDUCE(with prod 122)]
 [term 28:REDUCE(with prod 122)] [term 29:REDUCE(with prod 122)]
 [term 30:REDUCE(with prod 122)] [term 31:REDUCE(with prod 122)]
 [term 35:REDUCE(with prod 122)] [term 36:REDUCE(with prod 122)]
 [term 37:REDUCE(with prod 122)] [term 38:REDUCE(with prod 122)]
 [term 39:REDUCE(with prod 122)] [term 40:REDUCE(with prod 122)]
 [term 41:REDUCE(with prod 122)] [term 42:REDUCE(with prod 122)]
 [term 43:REDUCE(with prod 122)] [term 44:REDUCE(with prod 122)]
 [term 45:REDUCE(with prod 122)] [term 46:REDUCE(with prod 122)]
 [term 47:REDUCE(with prod 122)] [term 48:REDUCE(with prod 122)]
 [term 49:REDUCE(with prod 122)]
From state #31
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #32
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #33
 [term 10:REDUCE(with prod 67)] [term 12:REDUCE(with prod 67)]
 [term 13:REDUCE(with prod 67)] [term 14:REDUCE(with prod 67)]
 [term 15:REDUCE(with prod 67)] [term 16:REDUCE(with prod 67)]
 [term 17:REDUCE(with prod 67)] [term 18:REDUCE(with prod 67)]
 [term 19:REDUCE(with prod 67)] [term 20:REDUCE(with prod 67)]
 [term 21:REDUCE(with prod 67)] [term 22:REDUCE(with prod 67)]
 [term 23:REDUCE(with prod 67)] [term 24:REDUCE(with prod 67)]
 [term 25:REDUCE(with prod 67)] [term 26:REDUCE(with prod 67)]
 [term 28:REDUCE(with prod 67)] [term 29:REDUCE(with prod 67)]
 [term 30:REDUCE(with prod 67)] [term 31:REDUCE(with prod 67)]
 [term 35:REDUCE(with prod 67)] [term 36:REDUCE(with prod 67)]
 [term 37:REDUCE(with prod 67)] [term 38:REDUCE(with prod 67)]
 [term 39:REDUCE(with prod 67)] [term 40:REDUCE(with prod 67)]
 [term 41:REDUCE(with prod 67)] [term 42:REDUCE(with prod 67)]
 [term 43:REDUCE(with prod 67)] [term 44:REDUCE(with prod 67)]
 [term 45:REDUCE(with prod 67)] [term 46:REDUCE(with prod 67)]
 [term 47:REDUCE(with prod 67)] [term 48:REDUCE(with prod 67)]
 [term 49:REDUCE(with prod 67)]
From state #34
 [term 10:REDUCE(with prod 52)] [term 12:REDUCE(with prod 52)]
 [term 13:REDUCE(with prod 52)] [term 14:REDUCE(with prod 52)]
 [term 15:REDUCE(with prod 52)] [term 16:REDUCE(with prod 52)]
 [term 17:REDUCE(with prod 52)] [term 18:REDUCE(with prod 52)]
 [term 19:REDUCE(with prod 52)] [term 20:REDUCE(with prod 52)]
 [term 21:REDUCE(with prod 52)] [term 22:REDUCE(with prod 52)]
 [term 23:REDUCE(with prod 52)] [term 24:REDUCE(with prod 52)]
 [term 25:REDUCE(with prod 52)] [term 26:REDUCE(with prod 52)]
 [term 28:REDUCE(with prod 52)] [term 29:REDUCE(with prod 52)]
 [term 30:REDUCE(with prod 52)] [term 31:REDUCE(with prod 52)]
 [term 35:REDUCE(with prod 52)] [term 36:REDUCE(with prod 52)]
 [term 37:REDUCE(with prod 52)] [term 38:REDUCE(with prod 52)]
 [term 39:REDUCE(with prod 52)] [term 40:REDUCE(with prod 52)]
 [term 41:REDUCE(with prod 52)] [term 42:REDUCE(with prod 52)]
 [term 43:REDUCE(with prod 52)] [term 44:REDUCE(with prod 52)]
 [term 45:REDUCE(with prod 52)] [term 46:REDUCE(with prod 52)]
 [term 47:REDUCE(with prod 52)] [term 48:REDUCE(with prod 52)]
 [term 49:REDUCE(with prod 52)]
From state #35
 [term 10:REDUCE(with prod 54)] [term 12:REDUCE(with prod 54)]
 [term 13:REDUCE(with prod 54)] [term 14:REDUCE(with prod 54)]
 [term 15:REDUCE(with prod 54)] [term 16:REDUCE(with prod 54)]
 [term 17:REDUCE(with prod 54)] [term 18:REDUCE(with prod 54)]
 [term 19:REDUCE(with prod 54)] [term 20:REDUCE(with prod 54)]
 [term 21:REDUCE(with prod 54)] [term 22:REDUCE(with prod 54)]
 [term 23:REDUCE(with prod 54)] [term 24:REDUCE(with prod 54)]
 [term 25:REDUCE(with prod 54)] [term 26:REDUCE(with prod 54)]
 [term 28:REDUCE(with prod 54)] [term 29:REDUCE(with prod 54)]
 [term 30:REDUCE(with prod 54)] [term 31:REDUCE(with prod 54)]
 [term 35:REDUCE(with prod 54)] [term 36:REDUCE(with prod 54)]
 [term 37:REDUCE(with prod 54)] [term 38:REDUCE(with prod 54)]
 [term 39:REDUCE(with prod 54)] [term 40:REDUCE(with prod 54)]
 [term 41:REDUCE(with prod 54)] [term 42:REDUCE(with prod 54)]
 [term 43:REDUCE(with prod 54)] [term 44:REDUCE(with prod 54)]
 [term 45:REDUCE(with prod 54)] [term 46:REDUCE(with prod 54)]
 [term 47:REDUCE(with prod 54)] [term 48:REDUCE(with prod 54)]
 [term 49:REDUCE(with prod 54)]
From state #36
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #37
 [term 10:REDUCE(with prod 60)] [term 12:REDUCE(with prod 60)]
 [term 13:REDUCE(with prod 60)] [term 14:REDUCE(with prod 60)]
 [term 15:REDUCE(with prod 60)] [term 16:REDUCE(with prod 60)]
 [term 17:REDUCE(with prod 60)] [term 18:REDUCE(with prod 60)]
 [term 19:REDUCE(with prod 60)] [term 20:REDUCE(with prod 60)]
 [term 21:REDUCE(with prod 60)] [term 22:REDUCE(with prod 60)]
 [term 23:REDUCE(with prod 60)] [term 24:REDUCE(with prod 60)]
 [term 25:REDUCE(with prod 60)] [term 26:REDUCE(with prod 60)]
 [term 28:REDUCE(with prod 60)] [term 29:REDUCE(with prod 60)]
 [term 30:REDUCE(with prod 60)] [term 31:REDUCE(with prod 60)]
 [term 35:REDUCE(with prod 60)] [term 36:REDUCE(with prod 60)]
 [term 37:REDUCE(with prod 60)] [term 38:REDUCE(with prod 60)]
 [term 39:REDUCE(with prod 60)] [term 40:REDUCE(with prod 60)]
 [term 41:REDUCE(with prod 60)] [term 42:REDUCE(with prod 60)]
 [term 43:REDUCE(with prod 60)] [term 44:REDUCE(with prod 60)]
 [term 45:REDUCE(with prod 60)] [term 46:REDUCE(with prod 60)]
 [term 47:REDUCE(with prod 60)] [term 48:REDUCE(with prod 60)]
 [term 49:REDUCE(with prod 60)]
From state #38
 [term 10:REDUCE(with prod 97)] [term 12:REDUCE(with prod 97)]
 [term 13:REDUCE(with prod 97)] [term 14:REDUCE(with prod 97)]
 [term 15:REDUCE(with prod 97)] [term 16:REDUCE(with prod 97)]
 [term 17:REDUCE(with prod 97)] [term 18:REDUCE(with prod 97)]
 [term 19:REDUCE(with prod 97)] [term 20:REDUCE(with prod 97)]
 [term 21:REDUCE(with prod 97)] [term 22:REDUCE(with prod 97)]
 [term 23:REDUCE(with prod 97)] [term 24:REDUCE(with prod 97)]
 [term 25:REDUCE(with prod 97)] [term 26:REDUCE(with prod 97)]
 [term 28:REDUCE(with prod 97)] [term 29:REDUCE(with prod 97)]
 [term 30:REDUCE(with prod 97)] [term 31:REDUCE(with prod 97)]
 [term 35:REDUCE(with prod 97)] [term 36:REDUCE(with prod 97)]
 [term 37:REDUCE(with prod 97)] [term 38:REDUCE(with prod 97)]
 [term 39:REDUCE(with prod 97)] [term 40:REDUCE(with prod 97)]
 [term 41:REDUCE(with prod 97)] [term 42:REDUCE(with prod 97)]
 [term 43:REDUCE(with prod 97)] [term 44:REDUCE(with prod 97)]
 [term 45:REDUCE(with prod 97)] [term 46:REDUCE(with prod 97)]
 [term 47:REDUCE(with prod 97)] [term 48:REDUCE(with prod 97)]
 [term 49:REDUCE(with prod 97)]
From state #39
 [term 10:REDUCE(with prod 71)] [term 12:REDUCE(with prod 71)]
 [term 13:REDUCE(with prod 71)] [term 14:REDUCE(with prod 71)]
 [term 15:REDUCE(with prod 71)] [term 16:REDUCE(with prod 71)]
 [term 17:REDUCE(with prod 71)] [term 18:REDUCE(with prod 71)]
 [term 19:REDUCE(with prod 71)] [term 20:REDUCE(with prod 71)]
 [term 21:REDUCE(with prod 71)] [term 22:REDUCE(with prod 71)]
 [term 23:REDUCE(with prod 71)] [term 24:REDUCE(with prod 71)]
 [term 25:REDUCE(with prod 71)] [term 26:REDUCE(with prod 71)]
 [term 28:REDUCE(with prod 71)] [term 29:REDUCE(with prod 71)]
 [term 30:REDUCE(with prod 71)] [term 31:REDUCE(with prod 71)]
 [term 35:REDUCE(with prod 71)] [term 36:REDUCE(with prod 71)]
 [term 37:REDUCE(with prod 71)] [term 38:REDUCE(with prod 71)]
 [term 39:REDUCE(with prod 71)] [term 40:REDUCE(with prod 71)]
 [term 41:REDUCE(with prod 71)] [term 42:REDUCE(with prod 71)]
 [term 43:REDUCE(with prod 71)] [term 44:REDUCE(with prod 71)]
 [term 45:REDUCE(with prod 71)] [term 46:REDUCE(with prod 71)]
 [term 47:REDUCE(with prod 71)] [term 48:REDUCE(with prod 71)]
 [term 49:REDUCE(with prod 71)]
From state #40
 [term 10:REDUCE(with prod 61)] [term 12:REDUCE(with prod 61)]
 [term 13:REDUCE(with prod 61)] [term 14:REDUCE(with prod 61)]
 [term 15:REDUCE(with prod 61)] [term 16:REDUCE(with prod 61)]
 [term 17:REDUCE(with prod 61)] [term 18:REDUCE(with prod 61)]
 [term 19:REDUCE(with prod 61)] [term 20:REDUCE(with prod 61)]
 [term 21:REDUCE(with prod 61)] [term 22:REDUCE(with prod 61)]
 [term 23:REDUCE(with prod 61)] [term 24:REDUCE(with prod 61)]
 [term 25:REDUCE(with prod 61)] [term 26:REDUCE(with prod 61)]
 [term 28:REDUCE(with prod 61)] [term 29:REDUCE(with prod 61)]
 [term 30:REDUCE(with prod 61)] [term 31:REDUCE(with prod 61)]
 [term 35:REDUCE(with prod 61)] [term 36:REDUCE(with prod 61)]
 [term 37:REDUCE(with prod 61)] [term 38:REDUCE(with prod 61)]
 [term 39:REDUCE(with prod 61)] [term 40:REDUCE(with prod 61)]
 [term 41:REDUCE(with prod 61)] [term 42:REDUCE(with prod 61)]
 [term 43:REDUCE(with prod 61)] [term 44:REDUCE(with prod 61)]
 [term 45:REDUCE(with prod 61)] [term 46:REDUCE(with prod 61)]
 [term 47:REDUCE(with prod 61)] [term 48:REDUCE(with prod 61)]
 [term 49:REDUCE(with prod 61)]
From state #41
 [term 10:REDUCE(with prod 130)] [term 12:REDUCE(with prod 130)]
 [term 13:REDUCE(with prod 130)] [term 14:REDUCE(with prod 130)]
 [term 15:REDUCE(with prod 130)] [term 16:REDUCE(with prod 130)]
 [term 17:REDUCE(with prod 130)] [term 18:REDUCE(with prod 130)]
 [term 19:REDUCE(with prod 130)] [term 20:REDUCE(with prod 130)]
 [term 21:REDUCE(with prod 130)] [term 22:REDUCE(with prod 130)]
 [term 23:REDUCE(with prod 130)] [term 24:REDUCE(with prod 130)]
 [term 25:REDUCE(with prod 130)] [term 26:REDUCE(with prod 130)]
 [term 27:SHIFT(to state 122)] [term 28:REDUCE(with prod 130)]
 [term 29:REDUCE(with prod 130)] [term 30:SHIFT(to state 126)]
 [term 31:REDUCE(with prod 130)] [term 34:SHIFT(to state 127)]
 [term 35:REDUCE(with prod 130)] [term 36:REDUCE(with prod 130)]
 [term 37:REDUCE(with prod 130)] [term 38:SHIFT(to state 121)]
 [term 39:REDUCE(with prod 130)] [term 40:REDUCE(with prod 130)]
 [term 41:REDUCE(with prod 130)] [term 42:REDUCE(with prod 130)]
 [term 43:REDUCE(with prod 130)] [term 44:REDUCE(with prod 130)]
 [term 45:REDUCE(with prod 130)] [term 46:REDUCE(with prod 130)]
 [term 47:REDUCE(with prod 130)] [term 48:REDUCE(with prod 130)]
 [term 49:REDUCE(with prod 130)] [term 50:SHIFT(to state 120)]
 [term 51:SHIFT(to state 119)] [term 52:SHIFT(to state 124)]
 [term 53:SHIFT(to state 123)] [term 54:SHIFT(to state 125)]
From state #42
 [term 10:REDUCE(with prod 96)] [term 12:REDUCE(with prod 96)]
 [term 13:REDUCE(with prod 96)] [term 14:REDUCE(with prod 96)]
 [term 15:REDUCE(with prod 96)] [term 16:REDUCE(with prod 96)]
 [term 17:REDUCE(with prod 96)] [term 18:REDUCE(with prod 96)]
 [term 19:REDUCE(with prod 96)] [term 20:REDUCE(with prod 96)]
 [term 21:REDUCE(with prod 96)] [term 22:REDUCE(with prod 96)]
 [term 23:REDUCE(with prod 96)] [term 24:REDUCE(with prod 96)]
 [term 25:REDUCE(with prod 96)] [term 26:REDUCE(with prod 96)]
 [term 28:REDUCE(with prod 96)] [term 29:REDUCE(with prod 96)]
 [term 30:REDUCE(with prod 96)] [term 31:REDUCE(with prod 96)]
 [term 35:REDUCE(with prod 96)] [term 36:REDUCE(with prod 96)]
 [term 37:REDUCE(with prod 96)] [term 38:REDUCE(with prod 96)]
 [term 39:REDUCE(with prod 96)] [term 40:REDUCE(with prod 96)]
 [term 41:REDUCE(with prod 96)] [term 42:REDUCE(with prod 96)]
 [term 43:REDUCE(with prod 96)] [term 44:REDUCE(with prod 96)]
 [term 45:REDUCE(with prod 96)] [term 46:REDUCE(with prod 96)]
 [term 47:REDUCE(with prod 96)] [term 48:REDUCE(with prod 96)]
 [term 49:REDUCE(with prod 96)]
From state #43
 [term 10:REDUCE(with prod 120)] [term 12:REDUCE(with prod 120)]
 [term 13:REDUCE(with prod 120)] [term 14:REDUCE(with prod 120)]
 [term 15:REDUCE(with prod 120)] [term 16:REDUCE(with prod 120)]
 [term 17:REDUCE(with prod 120)] [term 18:REDUCE(with prod 120)]
 [term 19:REDUCE(with prod 120)] [term 20:REDUCE(with prod 120)]
 [term 21:REDUCE(with prod 120)] [term 22:REDUCE(with prod 120)]
 [term 23:REDUCE(with prod 120)] [term 24:REDUCE(with prod 120)]
 [term 25:REDUCE(with prod 120)] [term 26:REDUCE(with prod 120)]
 [term 28:REDUCE(with prod 120)] [term 29:REDUCE(with prod 120)]
 [term 30:REDUCE(with prod 120)] [term 31:REDUCE(with prod 120)]
 [term 35:REDUCE(with prod 120)] [term 36:REDUCE(with prod 120)]
 [term 37:REDUCE(with prod 120)] [term 38:REDUCE(with prod 120)]
 [term 39:REDUCE(with prod 120)] [term 40:REDUCE(with prod 120)]
 [term 41:REDUCE(with prod 120)] [term 42:REDUCE(with prod 120)]
 [term 43:REDUCE(with prod 120)] [term 44:REDUCE(with prod 120)]
 [term 45:REDUCE(with prod 120)] [term 46:REDUCE(with prod 120)]
 [term 47:REDUCE(with prod 120)] [term 48:REDUCE(with prod 120)]
 [term 49:REDUCE(with prod 120)]
From state #44
 [term 10:REDUCE(with prod 93)] [term 12:REDUCE(with prod 93)]
 [term 13:REDUCE(with prod 93)] [term 14:REDUCE(with prod 93)]
 [term 15:REDUCE(with prod 93)] [term 16:REDUCE(with prod 93)]
 [term 17:REDUCE(with prod 93)] [term 18:REDUCE(with prod 93)]
 [term 19:REDUCE(with prod 93)] [term 20:REDUCE(with prod 93)]
 [term 21:REDUCE(with prod 93)] [term 22:REDUCE(with prod 93)]
 [term 23:REDUCE(with prod 93)] [term 24:REDUCE(with prod 93)]
 [term 25:REDUCE(with prod 93)] [term 26:REDUCE(with prod 93)]
 [term 28:REDUCE(with prod 93)] [term 29:REDUCE(with prod 93)]
 [term 30:REDUCE(with prod 93)] [term 31:REDUCE(with prod 93)]
 [term 35:REDUCE(with prod 93)] [term 36:REDUCE(with prod 93)]
 [term 37:REDUCE(with prod 93)] [term 38:REDUCE(with prod 93)]
 [term 39:REDUCE(with prod 93)] [term 40:REDUCE(with prod 93)]
 [term 41:REDUCE(with prod 93)] [term 42:REDUCE(with prod 93)]
 [term 43:REDUCE(with prod 93)] [term 44:REDUCE(with prod 93)]
 [term 45:REDUCE(with prod 93)] [term 46:REDUCE(with prod 93)]
 [term 47:REDUCE(with prod 93)] [term 48:REDUCE(with prod 93)]
 [term 49:REDUCE(with prod 93)]
From state #45
 [term 39:SHIFT(to state 113)]
From state #46
 [term 10:REDUCE(with prod 63)] [term 12:REDUCE(with prod 63)]
 [term 13:REDUCE(with prod 63)] [term 14:REDUCE(with prod 63)]
 [term 15:REDUCE(with prod 63)] [term 16:REDUCE(with prod 63)]
 [term 17:REDUCE(with prod 63)] [term 18:REDUCE(with prod 63)]
 [term 19:REDUCE(with prod 63)] [term 20:REDUCE(with prod 63)]
 [term 21:REDUCE(with prod 63)] [term 22:REDUCE(with prod 63)]
 [term 23:REDUCE(with prod 63)] [term 24:REDUCE(with prod 63)]
 [term 25:REDUCE(with prod 63)] [term 26:REDUCE(with prod 63)]
 [term 28:REDUCE(with prod 63)] [term 29:REDUCE(with prod 63)]
 [term 30:REDUCE(with prod 63)] [term 31:REDUCE(with prod 63)]
 [term 35:REDUCE(with prod 63)] [term 36:REDUCE(with prod 63)]
 [term 37:REDUCE(with prod 63)] [term 38:REDUCE(with prod 63)]
 [term 39:REDUCE(with prod 63)] [term 40:REDUCE(with prod 63)]
 [term 41:REDUCE(with prod 63)] [term 42:REDUCE(with prod 63)]
 [term 43:REDUCE(with prod 63)] [term 44:REDUCE(with prod 63)]
 [term 45:REDUCE(with prod 63)] [term 46:REDUCE(with prod 63)]
 [term 47:REDUCE(with prod 63)] [term 48:REDUCE(with prod 63)]
 [term 49:REDUCE(with prod 63)]
From state #47
 [term 10:REDUCE(with prod 57)] [term 12:REDUCE(with prod 57)]
 [term 13:REDUCE(with prod 57)] [term 14:REDUCE(with prod 57)]
 [term 15:REDUCE(with prod 57)] [term 16:REDUCE(with prod 57)]
 [term 17:REDUCE(with prod 57)] [term 18:REDUCE(with prod 57)]
 [term 19:REDUCE(with prod 57)] [term 20:REDUCE(with prod 57)]
 [term 21:REDUCE(with prod 57)] [term 22:REDUCE(with prod 57)]
 [term 23:REDUCE(with prod 57)] [term 24:REDUCE(with prod 57)]
 [term 25:REDUCE(with prod 57)] [term 26:REDUCE(with prod 57)]
 [term 28:REDUCE(with prod 57)] [term 29:REDUCE(with prod 57)]
 [term 30:REDUCE(with prod 57)] [term 31:REDUCE(with prod 57)]
 [term 35:REDUCE(with prod 57)] [term 36:REDUCE(with prod 57)]
 [term 37:REDUCE(with prod 57)] [term 38:REDUCE(with prod 57)]
 [term 39:REDUCE(with prod 57)] [term 40:REDUCE(with prod 57)]
 [term 41:REDUCE(with prod 57)] [term 42:REDUCE(with prod 57)]
 [term 43:REDUCE(with prod 57)] [term 44:REDUCE(with prod 57)]
 [term 45:REDUCE(with prod 57)] [term 46:REDUCE(with prod 57)]
 [term 47:REDUCE(with prod 57)] [term 48:REDUCE(with prod 57)]
 [term 49:REDUCE(with prod 57)]
From state #48
 [term 10:REDUCE(with prod 59)] [term 12:REDUCE(with prod 59)]
 [term 13:REDUCE(with prod 59)] [term 14:REDUCE(with prod 59)]
 [term 15:REDUCE(with prod 59)] [term 16:REDUCE(with prod 59)]
 [term 17:REDUCE(with prod 59)] [term 18:REDUCE(with prod 59)]
 [term 19:REDUCE(with prod 59)] [term 20:REDUCE(with prod 59)]
 [term 21:REDUCE(with prod 59)] [term 22:REDUCE(with prod 59)]
 [term 23:REDUCE(with prod 59)] [term 24:REDUCE(with prod 59)]
 [term 25:REDUCE(with prod 59)] [term 26:REDUCE(with prod 59)]
 [term 28:REDUCE(with prod 59)] [term 29:REDUCE(with prod 59)]
 [term 30:REDUCE(with prod 59)] [term 31:REDUCE(with prod 59)]
 [term 35:REDUCE(with prod 59)] [term 36:REDUCE(with prod 59)]
 [term 37:REDUCE(with prod 59)] [term 38:REDUCE(with prod 59)]
 [term 39:REDUCE(with prod 59)] [term 40:REDUCE(with prod 59)]
 [term 41:REDUCE(with prod 59)] [term 42:REDUCE(with prod 59)]
 [term 43:REDUCE(with prod 59)] [term 44:REDUCE(with prod 59)]
 [term 45:REDUCE(with prod 59)] [term 46:REDUCE(with prod 59)]
 [term 47:REDUCE(with prod 59)] [term 48:REDUCE(with prod 59)]
 [term 49:REDUCE(with prod 59)]
From state #49
 [term 10:REDUCE(with prod 119)] [term 12:REDUCE(with prod 119)]
 [term 13:REDUCE(with prod 119)] [term 14:REDUCE(with prod 119)]
 [term 15:REDUCE(with prod 119)] [term 16:REDUCE(with prod 119)]
 [term 17:REDUCE(with prod 119)] [term 18:REDUCE(with prod 119)]
 [term 19:REDUCE(with prod 119)] [term 20:REDUCE(with prod 119)]
 [term 21:REDUCE(with prod 119)] [term 22:REDUCE(with prod 119)]
 [term 23:REDUCE(with prod 119)] [term 24:REDUCE(with prod 119)]
 [term 25:REDUCE(with prod 119)] [term 26:REDUCE(with prod 119)]
 [term 28:REDUCE(with prod 119)] [term 29:REDUCE(with prod 119)]
 [term 30:REDUCE(with prod 119)] [term 31:REDUCE(with prod 119)]
 [term 35:REDUCE(with prod 119)] [term 36:REDUCE(with prod 119)]
 [term 37:REDUCE(with prod 119)] [term 38:REDUCE(with prod 119)]
 [term 39:REDUCE(with prod 119)] [term 40:REDUCE(with prod 119)]
 [term 41:REDUCE(with prod 119)] [term 42:REDUCE(with prod 119)]
 [term 43:REDUCE(with prod 119)] [term 44:REDUCE(with prod 119)]
 [term 45:REDUCE(with prod 119)] [term 46:REDUCE(with prod 119)]
 [term 47:REDUCE(with prod 119)] [term 48:REDUCE(with prod 119)]
 [term 49:REDUCE(with prod 119)]
From state #50
 [term 10:REDUCE(with prod 68)] [term 12:REDUCE(with prod 68)]
 [term 13:REDUCE(with prod 68)] [term 14:REDUCE(with prod 68)]
 [term 15:REDUCE(with prod 68)] [term 16:REDUCE(with prod 68)]
 [term 17:REDUCE(with prod 68)] [term 18:REDUCE(with prod 68)]
 [term 19:REDUCE(with prod 68)] [term 20:REDUCE(with prod 68)]
 [term 21:REDUCE(with prod 68)] [term 22:REDUCE(with prod 68)]
 [term 23:REDUCE(with prod 68)] [term 24:REDUCE(with prod 68)]
 [term 25:REDUCE(with prod 68)] [term 26:REDUCE(with prod 68)]
 [term 28:REDUCE(with prod 68)] [term 29:REDUCE(with prod 68)]
 [term 30:REDUCE(with prod 68)] [term 31:REDUCE(with prod 68)]
 [term 35:REDUCE(with prod 68)] [term 36:REDUCE(with prod 68)]
 [term 37:REDUCE(with prod 68)] [term 38:REDUCE(with prod 68)]
 [term 39:REDUCE(with prod 68)] [term 40:REDUCE(with prod 68)]
 [term 41:REDUCE(with prod 68)] [term 42:REDUCE(with prod 68)]
 [term 43:REDUCE(with prod 68)] [term 44:REDUCE(with prod 68)]
 [term 45:REDUCE(with prod 68)] [term 46:REDUCE(with prod 68)]
 [term 47:REDUCE(with prod 68)] [term 48:REDUCE(with prod 68)]
 [term 49:REDUCE(with prod 68)]
From state #51
 [term 10:REDUCE(with prod 98)] [term 12:REDUCE(with prod 98)]
 [term 13:REDUCE(with prod 98)] [term 14:REDUCE(with prod 98)]
 [term 15:REDUCE(with prod 98)] [term 16:REDUCE(with prod 98)]
 [term 17:REDUCE(with prod 98)] [term 18:REDUCE(with prod 98)]
 [term 19:REDUCE(with prod 98)] [term 20:REDUCE(with prod 98)]
 [term 21:REDUCE(with prod 98)] [term 22:REDUCE(with prod 98)]
 [term 23:REDUCE(with prod 98)] [term 24:REDUCE(with prod 98)]
 [term 25:REDUCE(with prod 98)] [term 26:REDUCE(with prod 98)]
 [term 28:REDUCE(with prod 98)] [term 29:REDUCE(with prod 98)]
 [term 30:REDUCE(with prod 98)] [term 31:REDUCE(with prod 98)]
 [term 35:REDUCE(with prod 98)] [term 36:REDUCE(with prod 98)]
 [term 37:REDUCE(with prod 98)] [term 38:REDUCE(with prod 98)]
 [term 39:REDUCE(with prod 98)] [term 40:REDUCE(with prod 98)]
 [term 41:REDUCE(with prod 98)] [term 42:REDUCE(with prod 98)]
 [term 43:REDUCE(with prod 98)] [term 44:REDUCE(with prod 98)]
 [term 45:REDUCE(with prod 98)] [term 46:REDUCE(with prod 98)]
 [term 47:REDUCE(with prod 98)] [term 48:REDUCE(with prod 98)]
 [term 49:REDUCE(with prod 98)]
From state #52
 [term 10:REDUCE(with prod 58)] [term 12:REDUCE(with prod 58)]
 [term 13:REDUCE(with prod 58)] [term 14:REDUCE(with prod 58)]
 [term 15:REDUCE(with prod 58)] [term 16:REDUCE(with prod 58)]
 [term 17:REDUCE(with prod 58)] [term 18:REDUCE(with prod 58)]
 [term 19:REDUCE(with prod 58)] [term 20:REDUCE(with prod 58)]
 [term 21:REDUCE(with prod 58)] [term 22:REDUCE(with prod 58)]
 [term 23:REDUCE(with prod 58)] [term 24:REDUCE(with prod 58)]
 [term 25:REDUCE(with prod 58)] [term 26:REDUCE(with prod 58)]
 [term 28:REDUCE(with prod 58)] [term 29:REDUCE(with prod 58)]
 [term 30:REDUCE(with prod 58)] [term 31:REDUCE(with prod 58)]
 [term 35:REDUCE(with prod 58)] [term 36:REDUCE(with prod 58)]
 [term 37:REDUCE(with prod 58)] [term 38:REDUCE(with prod 58)]
 [term 39:REDUCE(with prod 58)] [term 40:REDUCE(with prod 58)]
 [term 41:REDUCE(with prod 58)] [term 42:REDUCE(with prod 58)]
 [term 43:REDUCE(with prod 58)] [term 44:REDUCE(with prod 58)]
 [term 45:REDUCE(with prod 58)] [term 46:REDUCE(with prod 58)]
 [term 47:REDUCE(with prod 58)] [term 48:REDUCE(with prod 58)]
 [term 49:REDUCE(with prod 58)]
From state #53
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 36:SHIFT(to state 112)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #54
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #55
 [term 10:REDUCE(with prod 53)] [term 12:REDUCE(with prod 53)]
 [term 13:REDUCE(with prod 53)] [term 14:REDUCE(with prod 53)]
 [term 15:REDUCE(with prod 53)] [term 16:REDUCE(with prod 53)]
 [term 17:REDUCE(with prod 53)] [term 18:REDUCE(with prod 53)]
 [term 19:REDUCE(with prod 53)] [term 20:REDUCE(with prod 53)]
 [term 21:REDUCE(with prod 53)] [term 22:REDUCE(with prod 53)]
 [term 23:REDUCE(with prod 53)] [term 24:REDUCE(with prod 53)]
 [term 25:REDUCE(with prod 53)] [term 26:REDUCE(with prod 53)]
 [term 28:REDUCE(with prod 53)] [term 29:REDUCE(with prod 53)]
 [term 30:REDUCE(with prod 53)] [term 31:REDUCE(with prod 53)]
 [term 35:REDUCE(with prod 53)] [term 36:REDUCE(with prod 53)]
 [term 37:REDUCE(with prod 53)] [term 38:REDUCE(with prod 53)]
 [term 39:REDUCE(with prod 53)] [term 40:REDUCE(with prod 53)]
 [term 41:REDUCE(with prod 53)] [term 42:REDUCE(with prod 53)]
 [term 43:REDUCE(with prod 53)] [term 44:REDUCE(with prod 53)]
 [term 45:REDUCE(with prod 53)] [term 46:REDUCE(with prod 53)]
 [term 47:REDUCE(with prod 53)] [term 48:REDUCE(with prod 53)]
 [term 49:REDUCE(with prod 53)]
From state #56
 [term 10:REDUCE(with prod 94)] [term 12:REDUCE(with prod 94)]
 [term 13:REDUCE(with prod 94)] [term 14:REDUCE(with prod 94)]
 [term 15:REDUCE(with prod 94)] [term 16:REDUCE(with prod 94)]
 [term 17:REDUCE(with prod 94)] [term 18:REDUCE(with prod 94)]
 [term 19:REDUCE(with prod 94)] [term 20:REDUCE(with prod 94)]
 [term 21:REDUCE(with prod 94)] [term 22:REDUCE(with prod 94)]
 [term 23:REDUCE(with prod 94)] [term 24:REDUCE(with prod 94)]
 [term 25:REDUCE(with prod 94)] [term 26:REDUCE(with prod 94)]
 [term 28:REDUCE(with prod 94)] [term 29:REDUCE(with prod 94)]
 [term 30:REDUCE(with prod 94)] [term 31:REDUCE(with prod 94)]
 [term 35:REDUCE(with prod 94)] [term 36:REDUCE(with prod 94)]
 [term 37:REDUCE(with prod 94)] [term 38:REDUCE(with prod 94)]
 [term 39:REDUCE(with prod 94)] [term 40:REDUCE(with prod 94)]
 [term 41:REDUCE(with prod 94)] [term 42:REDUCE(with prod 94)]
 [term 43:REDUCE(with prod 94)] [term 44:REDUCE(with prod 94)]
 [term 45:REDUCE(with prod 94)] [term 46:REDUCE(with prod 94)]
 [term 47:REDUCE(with prod 94)] [term 48:REDUCE(with prod 94)]
 [term 49:REDUCE(with prod 94)]
From state #57
 [term 10:REDUCE(with prod 69)] [term 12:REDUCE(with prod 69)]
 [term 13:REDUCE(with prod 69)] [term 14:REDUCE(with prod 69)]
 [term 15:REDUCE(with prod 69)] [term 16:REDUCE(with prod 69)]
 [term 17:REDUCE(with prod 69)] [term 18:REDUCE(with prod 69)]
 [term 19:REDUCE(with prod 69)] [term 20:REDUCE(with prod 69)]
 [term 21:REDUCE(with prod 69)] [term 22:REDUCE(with prod 69)]
 [term 23:REDUCE(with prod 69)] [term 24:REDUCE(with prod 69)]
 [term 25:REDUCE(with prod 69)] [term 26:REDUCE(with prod 69)]
 [term 28:REDUCE(with prod 69)] [term 29:REDUCE(with prod 69)]
 [term 30:REDUCE(with prod 69)] [term 31:REDUCE(with prod 69)]
 [term 35:REDUCE(with prod 69)] [term 36:REDUCE(with prod 69)]
 [term 37:REDUCE(with prod 69)] [term 38:REDUCE(with prod 69)]
 [term 39:REDUCE(with prod 69)] [term 40:REDUCE(with prod 69)]
 [term 41:REDUCE(with prod 69)] [term 42:REDUCE(with prod 69)]
 [term 43:REDUCE(with prod 69)] [term 44:REDUCE(with prod 69)]
 [term 45:REDUCE(with prod 69)] [term 46:REDUCE(with prod 69)]
 [term 47:REDUCE(with prod 69)] [term 48:REDUCE(with prod 69)]
 [term 49:REDUCE(with prod 69)]
From state #58
 [term 10:REDUCE(with prod 95)] [term 12:REDUCE(with prod 95)]
 [term 13:REDUCE(with prod 95)] [term 14:REDUCE(with prod 95)]
 [term 15:REDUCE(with prod 95)] [term 16:REDUCE(with prod 95)]
 [term 17:REDUCE(with prod 95)] [term 18:REDUCE(with prod 95)]
 [term 19:REDUCE(with prod 95)] [term 20:REDUCE(with prod 95)]
 [term 21:REDUCE(with prod 95)] [term 22:REDUCE(with prod 95)]
 [term 23:REDUCE(with prod 95)] [term 24:REDUCE(with prod 95)]
 [term 25:REDUCE(with prod 95)] [term 26:REDUCE(with prod 95)]
 [term 28:REDUCE(with prod 95)] [term 29:REDUCE(with prod 95)]
 [term 30:REDUCE(with prod 95)] [term 31:REDUCE(with prod 95)]
 [term 35:REDUCE(with prod 95)] [term 36:REDUCE(with prod 95)]
 [term 37:REDUCE(with prod 95)] [term 38:REDUCE(with prod 95)]
 [term 39:REDUCE(with prod 95)] [term 40:REDUCE(with prod 95)]
 [term 41:REDUCE(with prod 95)] [term 42:REDUCE(with prod 95)]
 [term 43:REDUCE(with prod 95)] [term 44:REDUCE(with prod 95)]
 [term 45:REDUCE(with prod 95)] [term 46:REDUCE(with prod 95)]
 [term 47:REDUCE(with prod 95)] [term 48:REDUCE(with prod 95)]
 [term 49:REDUCE(with prod 95)]
From state #59
 [term 10:REDUCE(with prod 118)] [term 12:REDUCE(with prod 118)]
 [term 13:REDUCE(with prod 118)] [term 14:REDUCE(with prod 118)]
 [term 15:REDUCE(with prod 118)] [term 16:REDUCE(with prod 118)]
 [term 17:REDUCE(with prod 118)] [term 18:REDUCE(with prod 118)]
 [term 19:REDUCE(with prod 118)] [term 20:REDUCE(with prod 118)]
 [term 21:REDUCE(with prod 118)] [term 22:REDUCE(with prod 118)]
 [term 23:REDUCE(with prod 118)] [term 24:REDUCE(with prod 118)]
 [term 25:REDUCE(with prod 118)] [term 26:REDUCE(with prod 118)]
 [term 28:REDUCE(with prod 118)] [term 29:REDUCE(with prod 118)]
 [term 30:REDUCE(with prod 118)] [term 31:REDUCE(with prod 118)]
 [term 35:REDUCE(with prod 118)] [term 36:REDUCE(with prod 118)]
 [term 37:REDUCE(with prod 118)] [term 38:REDUCE(with prod 118)]
 [term 39:REDUCE(with prod 118)] [term 40:REDUCE(with prod 118)]
 [term 41:REDUCE(with prod 118)] [term 42:REDUCE(with prod 118)]
 [term 43:REDUCE(with prod 118)] [term 44:REDUCE(with prod 118)]
 [term 45:REDUCE(with prod 118)] [term 46:REDUCE(with prod 118)]
 [term 47:REDUCE(with prod 118)] [term 48:REDUCE(with prod 118)]
 [term 49:REDUCE(with prod 118)]
From state #60
 [term 10:REDUCE(with prod 125)] [term 12:REDUCE(with prod 125)]
 [term 13:REDUCE(with prod 125)] [term 14:REDUCE(with prod 125)]
 [term 15:REDUCE(with prod 125)] [term 16:REDUCE(with prod 125)]
 [term 17:REDUCE(with prod 125)] [term 18:REDUCE(with prod 125)]
 [term 19:REDUCE(with prod 125)] [term 20:REDUCE(with prod 125)]
 [term 21:REDUCE(with prod 125)] [term 22:REDUCE(with prod 125)]
 [term 23:REDUCE(with prod 125)] [term 24:REDUCE(with prod 125)]
 [term 25:REDUCE(with prod 125)] [term 26:REDUCE(with prod 125)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 125)] [term 31:REDUCE(with prod 125)]
 [term 35:REDUCE(with prod 125)] [term 36:REDUCE(with prod 125)]
 [term 37:REDUCE(with prod 125)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 125)] [term 40:REDUCE(with prod 125)]
 [term 41:REDUCE(with prod 125)] [term 42:REDUCE(with prod 125)]
 [term 43:REDUCE(with prod 125)] [term 44:REDUCE(with prod 125)]
 [term 45:REDUCE(with prod 125)] [term 46:REDUCE(with prod 125)]
 [term 47:REDUCE(with prod 125)] [term 48:REDUCE(with prod 125)]
 [term 49:REDUCE(with prod 125)]
From state #61
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #62
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #63
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #64
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #65
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #66
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #67
 [term 10:REDUCE(with prod 127)] [term 12:REDUCE(with prod 127)]
 [term 13:REDUCE(with prod 127)] [term 14:REDUCE(with prod 127)]
 [term 15:REDUCE(with prod 127)] [term 16:REDUCE(with prod 127)]
 [term 17:REDUCE(with prod 127)] [term 18:REDUCE(with prod 127)]
 [term 19:REDUCE(with prod 127)] [term 20:REDUCE(with prod 127)]
 [term 21:REDUCE(with prod 127)] [term 22:REDUCE(with prod 127)]
 [term 23:REDUCE(with prod 127)] [term 24:REDUCE(with prod 127)]
 [term 25:REDUCE(with prod 127)] [term 26:REDUCE(with prod 127)]
 [term 28:REDUCE(with prod 127)] [term 29:REDUCE(with prod 127)]
 [term 30:REDUCE(with prod 127)] [term 31:REDUCE(with prod 127)]
 [term 35:REDUCE(with prod 127)] [term 36:REDUCE(with prod 127)]
 [term 37:REDUCE(with prod 127)] [term 38:REDUCE(with prod 127)]
 [term 39:REDUCE(with prod 127)] [term 40:REDUCE(with prod 127)]
 [term 41:REDUCE(with prod 127)] [term 42:REDUCE(with prod 127)]
 [term 43:REDUCE(with prod 127)] [term 44:REDUCE(with prod 127)]
 [term 45:REDUCE(with prod 127)] [term 46:REDUCE(with prod 127)]
 [term 47:REDUCE(with prod 127)] [term 48:REDUCE(with prod 127)]
 [term 49:REDUCE(with prod 127)]
From state #68
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #69
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #70
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #71
 [term 10:REDUCE(with prod 129)] [term 12:REDUCE(with prod 129)]
 [term 13:REDUCE(with prod 129)] [term 14:REDUCE(with prod 129)]
 [term 15:REDUCE(with prod 129)] [term 16:REDUCE(with prod 129)]
 [term 17:REDUCE(with prod 129)] [term 18:REDUCE(with prod 129)]
 [term 19:REDUCE(with prod 129)] [term 20:REDUCE(with prod 129)]
 [term 21:REDUCE(with prod 129)] [term 22:REDUCE(with prod 129)]
 [term 23:REDUCE(with prod 129)] [term 24:REDUCE(with prod 129)]
 [term 25:REDUCE(with prod 129)] [term 26:REDUCE(with prod 129)]
 [term 28:REDUCE(with prod 129)] [term 29:REDUCE(with prod 129)]
 [term 30:REDUCE(with prod 129)] [term 31:REDUCE(with prod 129)]
 [term 35:REDUCE(with prod 129)] [term 36:REDUCE(with prod 129)]
 [term 37:REDUCE(with prod 129)] [term 38:REDUCE(with prod 129)]
 [term 39:REDUCE(with prod 129)] [term 40:REDUCE(with prod 129)]
 [term 41:REDUCE(with prod 129)] [term 42:REDUCE(with prod 129)]
 [term 43:REDUCE(with prod 129)] [term 44:REDUCE(with prod 129)]
 [term 45:REDUCE(with prod 129)] [term 46:REDUCE(with prod 129)]
 [term 47:REDUCE(with prod 129)] [term 48:REDUCE(with prod 129)]
 [term 49:REDUCE(with prod 129)]
From state #72
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #73
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #74
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #75
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #76
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #77
 [term 39:SHIFT(to state 92)]
From state #78
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #79
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #80
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #81
 [term 39:SHIFT(to state 86)]
From state #82
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #83
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #84
 [term 10:REDUCE(with prod 117)] [term 12:REDUCE(with prod 117)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 117)]
 [term 19:REDUCE(with prod 117)] [term 20:REDUCE(with prod 117)]
 [term 21:REDUCE(with prod 117)] [term 22:REDUCE(with prod 117)]
 [term 23:REDUCE(with prod 117)] [term 24:REDUCE(with prod 117)]
 [term 25:REDUCE(with prod 117)] [term 26:REDUCE(with prod 117)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 117)] [term 31:REDUCE(with prod 117)]
 [term 35:REDUCE(with prod 117)] [term 36:REDUCE(with prod 117)]
 [term 37:REDUCE(with prod 117)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 117)] [term 40:REDUCE(with prod 117)]
 [term 41:REDUCE(with prod 117)] [term 42:REDUCE(with prod 117)]
 [term 43:REDUCE(with prod 117)] [term 44:REDUCE(with prod 117)]
 [term 45:REDUCE(with prod 117)] [term 46:REDUCE(with prod 117)]
 [term 47:REDUCE(with prod 117)] [term 48:REDUCE(with prod 117)]
 [term 49:REDUCE(with prod 117)]
From state #85
 [term 10:REDUCE(with prod 103)] [term 12:REDUCE(with prod 103)]
 [term 13:REDUCE(with prod 103)] [term 14:REDUCE(with prod 103)]
 [term 15:REDUCE(with prod 103)] [term 16:REDUCE(with prod 103)]
 [term 17:REDUCE(with prod 103)] [term 18:REDUCE(with prod 103)]
 [term 19:REDUCE(with prod 103)] [term 20:REDUCE(with prod 103)]
 [term 21:REDUCE(with prod 103)] [term 22:REDUCE(with prod 103)]
 [term 23:REDUCE(with prod 103)] [term 24:REDUCE(with prod 103)]
 [term 25:REDUCE(with prod 103)] [term 26:REDUCE(with prod 103)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 103)] [term 31:REDUCE(with prod 103)]
 [term 35:REDUCE(with prod 103)] [term 36:REDUCE(with prod 103)]
 [term 37:REDUCE(with prod 103)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 103)] [term 40:REDUCE(with prod 103)]
 [term 41:REDUCE(with prod 103)] [term 42:REDUCE(with prod 103)]
 [term 43:REDUCE(with prod 103)] [term 44:REDUCE(with prod 103)]
 [term 45:REDUCE(with prod 103)] [term 46:REDUCE(with prod 103)]
 [term 47:REDUCE(with prod 103)] [term 48:REDUCE(with prod 103)]
 [term 49:REDUCE(with prod 103)]
From state #86
 [term 10:REDUCE(with prod 89)] [term 12:REDUCE(with prod 89)]
 [term 13:REDUCE(with prod 89)] [term 14:REDUCE(with prod 89)]
 [term 15:REDUCE(with prod 89)] [term 16:REDUCE(with prod 89)]
 [term 17:REDUCE(with prod 89)] [term 18:REDUCE(with prod 89)]
 [term 19:REDUCE(with prod 89)] [term 20:REDUCE(with prod 89)]
 [term 21:REDUCE(with prod 89)] [term 22:REDUCE(with prod 89)]
 [term 23:REDUCE(with prod 89)] [term 24:REDUCE(with prod 89)]
 [term 25:REDUCE(with prod 89)] [term 26:REDUCE(with prod 89)]
 [term 28:REDUCE(with prod 89)] [term 29:REDUCE(with prod 89)]
 [term 30:REDUCE(with prod 89)] [term 31:REDUCE(with prod 89)]
 [term 34:SHIFT(to state 87)] [term 35:REDUCE(with prod 89)]
 [term 36:REDUCE(with prod 89)] [term 37:REDUCE(with prod 89)]
 [term 38:REDUCE(with prod 89)] [term 39:REDUCE(with prod 89)]
 [term 40:REDUCE(with prod 89)] [term 41:REDUCE(with prod 89)]
 [term 42:REDUCE(with prod 89)] [term 43:REDUCE(with prod 89)]
 [term 44:REDUCE(with prod 89)] [term 45:REDUCE(with prod 89)]
 [term 46:REDUCE(with prod 89)] [term 47:REDUCE(with prod 89)]
 [term 48:REDUCE(with prod 89)] [term 49:REDUCE(with prod 89)]
From state #87
 [term 35:SHIFT(to state 88)]
From state #88
 [term 10:REDUCE(with prod 90)] [term 12:REDUCE(with prod 90)]
 [term 13:REDUCE(with prod 90)] [term 14:REDUCE(with prod 90)]
 [term 15:REDUCE(with prod 90)] [term 16:REDUCE(with prod 90)]
 [term 17:REDUCE(with prod 90)] [term 18:REDUCE(with prod 90)]
 [term 19:REDUCE(with prod 90)] [term 20:REDUCE(with prod 90)]
 [term 21:REDUCE(with prod 90)] [term 22:REDUCE(with prod 90)]
 [term 23:REDUCE(with prod 90)] [term 24:REDUCE(with prod 90)]
 [term 25:REDUCE(with prod 90)] [term 26:REDUCE(with prod 90)]
 [term 28:REDUCE(with prod 90)] [term 29:REDUCE(with prod 90)]
 [term 30:REDUCE(with prod 90)] [term 31:REDUCE(with prod 90)]
 [term 35:REDUCE(with prod 90)] [term 36:REDUCE(with prod 90)]
 [term 37:REDUCE(with prod 90)] [term 38:REDUCE(with prod 90)]
 [term 39:REDUCE(with prod 90)] [term 40:REDUCE(with prod 90)]
 [term 41:REDUCE(with prod 90)] [term 42:REDUCE(with prod 90)]
 [term 43:REDUCE(with prod 90)] [term 44:REDUCE(with prod 90)]
 [term 45:REDUCE(with prod 90)] [term 46:REDUCE(with prod 90)]
 [term 47:REDUCE(with prod 90)] [term 48:REDUCE(with prod 90)]
 [term 49:REDUCE(with prod 90)]
From state #89
 [term 10:REDUCE(with prod 107)] [term 12:REDUCE(with prod 107)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 107)]
 [term 19:REDUCE(with prod 107)] [term 20:REDUCE(with prod 107)]
 [term 21:REDUCE(with prod 107)] [term 22:REDUCE(with prod 107)]
 [term 23:REDUCE(with prod 107)] [term 24:REDUCE(with prod 107)]
 [term 25:REDUCE(with prod 107)] [term 26:REDUCE(with prod 107)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 107)] [term 31:REDUCE(with prod 107)]
 [term 35:REDUCE(with prod 107)] [term 36:REDUCE(with prod 107)]
 [term 37:REDUCE(with prod 107)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 107)] [term 40:REDUCE(with prod 107)]
 [term 41:REDUCE(with prod 107)] [term 42:REDUCE(with prod 107)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:REDUCE(with prod 107)]
 [term 47:REDUCE(with prod 107)] [term 48:REDUCE(with prod 107)]
 [term 49:REDUCE(with prod 107)]
From state #90
 [term 10:REDUCE(with prod 113)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 113)]
 [term 19:REDUCE(with prod 113)] [term 20:REDUCE(with prod 113)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 113)] [term 31:REDUCE(with prod 113)]
 [term 35:REDUCE(with prod 113)] [term 36:REDUCE(with prod 113)]
 [term 37:REDUCE(with prod 113)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 113)] [term 40:REDUCE(with prod 113)]
 [term 41:REDUCE(with prod 113)] [term 42:REDUCE(with prod 113)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:REDUCE(with prod 113)]
 [term 47:REDUCE(with prod 113)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 113)]
From state #91
 [term 10:REDUCE(with prod 104)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 104)]
 [term 19:REDUCE(with prod 104)] [term 20:REDUCE(with prod 104)]
 [term 21:REDUCE(with prod 104)] [term 22:REDUCE(with prod 104)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 104)] [term 31:REDUCE(with prod 104)]
 [term 35:REDUCE(with prod 104)] [term 36:REDUCE(with prod 104)]
 [term 37:REDUCE(with prod 104)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 104)] [term 40:REDUCE(with prod 104)]
 [term 41:REDUCE(with prod 104)] [term 42:REDUCE(with prod 104)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:REDUCE(with prod 104)]
 [term 47:REDUCE(with prod 104)] [term 48:REDUCE(with prod 104)]
 [term 49:REDUCE(with prod 104)]
From state #92
 [term 30:SHIFT(to state 93)]
From state #93
 [term 10:REDUCE(with prod 49)] [term 14:REDUCE(with prod 49)]
 [term 18:REDUCE(with prod 49)] [term 28:REDUCE(with prod 49)]
 [term 29:REDUCE(with prod 49)] [term 30:REDUCE(with prod 49)]
 [term 31:REDUCE(with prod 49)] [term 39:REDUCE(with prod 49)]
 [term 40:REDUCE(with prod 49)] [term 41:REDUCE(with prod 49)]
 [term 42:REDUCE(with prod 49)] [term 49:REDUCE(with prod 49)]
From state #94
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 31:SHIFT(to state 95)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #95
 [term 10:REDUCE(with prod 85)] [term 12:REDUCE(with prod 85)]
 [term 13:REDUCE(with prod 85)] [term 14:REDUCE(with prod 85)]
 [term 15:REDUCE(with prod 85)] [term 16:REDUCE(with prod 85)]
 [term 17:REDUCE(with prod 85)] [term 18:REDUCE(with prod 85)]
 [term 19:REDUCE(with prod 85)] [term 20:REDUCE(with prod 85)]
 [term 21:REDUCE(with prod 85)] [term 22:REDUCE(with prod 85)]
 [term 23:REDUCE(with prod 85)] [term 24:REDUCE(with prod 85)]
 [term 25:REDUCE(with prod 85)] [term 26:REDUCE(with prod 85)]
 [term 28:REDUCE(with prod 85)] [term 29:REDUCE(with prod 85)]
 [term 30:REDUCE(with prod 85)] [term 31:REDUCE(with prod 85)]
 [term 35:REDUCE(with prod 85)] [term 36:REDUCE(with prod 85)]
 [term 37:REDUCE(with prod 85)] [term 38:REDUCE(with prod 85)]
 [term 39:REDUCE(with prod 85)] [term 40:REDUCE(with prod 85)]
 [term 41:REDUCE(with prod 85)] [term 42:REDUCE(with prod 85)]
 [term 43:REDUCE(with prod 85)] [term 44:REDUCE(with prod 85)]
 [term 45:REDUCE(with prod 85)] [term 46:REDUCE(with prod 85)]
 [term 47:REDUCE(with prod 85)] [term 48:REDUCE(with prod 85)]
 [term 49:REDUCE(with prod 85)]
From state #96
 [term 10:REDUCE(with prod 50)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 50)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 50)] [term 31:REDUCE(with prod 50)]
 [term 37:SHIFT(to state 97)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 50)] [term 40:REDUCE(with prod 50)]
 [term 41:REDUCE(with prod 50)] [term 42:REDUCE(with prod 50)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 50)]
From state #97
 [term 10:REDUCE(with prod 51)] [term 14:REDUCE(with prod 51)]
 [term 18:REDUCE(with prod 51)] [term 28:REDUCE(with prod 51)]
 [term 29:REDUCE(with prod 51)] [term 30:REDUCE(with prod 51)]
 [term 31:REDUCE(with prod 51)] [term 39:REDUCE(with prod 51)]
 [term 40:REDUCE(with prod 51)] [term 41:REDUCE(with prod 51)]
 [term 42:REDUCE(with prod 51)] [term 49:REDUCE(with prod 51)]
From state #98
 [term 10:REDUCE(with prod 100)] [term 12:REDUCE(with prod 100)]
 [term 13:REDUCE(with prod 100)] [term 14:REDUCE(with prod 100)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 100)]
 [term 19:REDUCE(with prod 100)] [term 20:REDUCE(with prod 100)]
 [term 21:REDUCE(with prod 100)] [term 22:REDUCE(with prod 100)]
 [term 23:REDUCE(with prod 100)] [term 24:REDUCE(with prod 100)]
 [term 25:REDUCE(with prod 100)] [term 26:REDUCE(with prod 100)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 100)] [term 31:REDUCE(with prod 100)]
 [term 35:REDUCE(with prod 100)] [term 36:REDUCE(with prod 100)]
 [term 37:REDUCE(with prod 100)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 100)] [term 40:REDUCE(with prod 100)]
 [term 41:REDUCE(with prod 100)] [term 42:REDUCE(with prod 100)]
 [term 43:REDUCE(with prod 100)] [term 44:REDUCE(with prod 100)]
 [term 45:REDUCE(with prod 100)] [term 46:REDUCE(with prod 100)]
 [term 47:REDUCE(with prod 100)] [term 48:REDUCE(with prod 100)]
 [term 49:REDUCE(with prod 100)]
From state #99
 [term 10:REDUCE(with prod 102)] [term 12:REDUCE(with prod 102)]
 [term 13:REDUCE(with prod 102)] [term 14:REDUCE(with prod 102)]
 [term 15:REDUCE(with prod 102)] [term 16:REDUCE(with prod 102)]
 [term 17:REDUCE(with prod 102)] [term 18:REDUCE(with prod 102)]
 [term 19:REDUCE(with prod 102)] [term 20:REDUCE(with prod 102)]
 [term 21:REDUCE(with prod 102)] [term 22:REDUCE(with prod 102)]
 [term 23:REDUCE(with prod 102)] [term 24:REDUCE(with prod 102)]
 [term 25:REDUCE(with prod 102)] [term 26:REDUCE(with prod 102)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 102)] [term 31:REDUCE(with prod 102)]
 [term 35:REDUCE(with prod 102)] [term 36:REDUCE(with prod 102)]
 [term 37:REDUCE(with prod 102)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 102)] [term 40:REDUCE(with prod 102)]
 [term 41:REDUCE(with prod 102)] [term 42:REDUCE(with prod 102)]
 [term 43:REDUCE(with prod 102)] [term 44:REDUCE(with prod 102)]
 [term 45:REDUCE(with prod 102)] [term 46:REDUCE(with prod 102)]
 [term 47:REDUCE(with prod 102)] [term 48:REDUCE(with prod 102)]
 [term 49:REDUCE(with prod 102)]
From state #100
 [term 10:REDUCE(with prod 115)] [term 12:REDUCE(with prod 115)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 115)]
 [term 19:REDUCE(with prod 115)] [term 20:REDUCE(with prod 115)]
 [term 21:REDUCE(with prod 115)] [term 22:REDUCE(with prod 115)]
 [term 23:REDUCE(with prod 115)] [term 24:REDUCE(with prod 115)]
 [term 25:REDUCE(with prod 115)] [term 26:REDUCE(with prod 115)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 115)] [term 31:REDUCE(with prod 115)]
 [term 35:REDUCE(with prod 115)] [term 36:REDUCE(with prod 115)]
 [term 37:REDUCE(with prod 115)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 115)] [term 40:REDUCE(with prod 115)]
 [term 41:REDUCE(with prod 115)] [term 42:REDUCE(with prod 115)]
 [term 43:REDUCE(with prod 115)] [term 44:REDUCE(with prod 115)]
 [term 45:REDUCE(with prod 115)] [term 46:REDUCE(with prod 115)]
 [term 47:REDUCE(with prod 115)] [term 48:REDUCE(with prod 115)]
 [term 49:REDUCE(with prod 115)]
From state #101
 [term 10:REDUCE(with prod 116)] [term 12:REDUCE(with prod 116)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 116)]
 [term 19:REDUCE(with prod 116)] [term 20:REDUCE(with prod 116)]
 [term 21:REDUCE(with prod 116)] [term 22:REDUCE(with prod 116)]
 [term 23:REDUCE(with prod 116)] [term 24:REDUCE(with prod 116)]
 [term 25:REDUCE(with prod 116)] [term 26:REDUCE(with prod 116)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 116)] [term 31:REDUCE(with prod 116)]
 [term 35:REDUCE(with prod 116)] [term 36:REDUCE(with prod 116)]
 [term 37:REDUCE(with prod 116)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 116)] [term 40:REDUCE(with prod 116)]
 [term 41:REDUCE(with prod 116)] [term 42:REDUCE(with prod 116)]
 [term 43:REDUCE(with prod 116)] [term 44:REDUCE(with prod 116)]
 [term 45:REDUCE(with prod 116)] [term 46:REDUCE(with prod 116)]
 [term 47:REDUCE(with prod 116)] [term 48:REDUCE(with prod 116)]
 [term 49:REDUCE(with prod 116)]
From state #102
 [term 10:REDUCE(with prod 108)] [term 12:REDUCE(with prod 108)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 108)]
 [term 19:REDUCE(with prod 108)] [term 20:REDUCE(with prod 108)]
 [term 21:REDUCE(with prod 108)] [term 22:REDUCE(with prod 108)]
 [term 23:REDUCE(with prod 108)] [term 24:REDUCE(with prod 108)]
 [term 25:REDUCE(with prod 108)] [term 26:REDUCE(with prod 108)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 108)] [term 31:REDUCE(with prod 108)]
 [term 35:REDUCE(with prod 108)] [term 36:REDUCE(with prod 108)]
 [term 37:REDUCE(with prod 108)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 108)] [term 40:REDUCE(with prod 108)]
 [term 41:REDUCE(with prod 108)] [term 42:REDUCE(with prod 108)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:REDUCE(with prod 108)]
 [term 47:REDUCE(with prod 108)] [term 48:REDUCE(with prod 108)]
 [term 49:REDUCE(with prod 108)]
From state #103
 [term 10:REDUCE(with prod 112)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 112)]
 [term 19:REDUCE(with prod 112)] [term 20:REDUCE(with prod 112)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 112)] [term 31:REDUCE(with prod 112)]
 [term 35:REDUCE(with prod 112)] [term 36:REDUCE(with prod 112)]
 [term 37:REDUCE(with prod 112)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 112)] [term 40:REDUCE(with prod 112)]
 [term 41:REDUCE(with prod 112)] [term 42:REDUCE(with prod 112)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:REDUCE(with prod 112)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 112)]
From state #104
 [term 10:REDUCE(with prod 111)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 111)]
 [term 19:SHIFT(to state 64)] [term 20:REDUCE(with prod 111)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 111)] [term 31:REDUCE(with prod 111)]
 [term 35:REDUCE(with prod 111)] [term 36:REDUCE(with prod 111)]
 [term 37:REDUCE(with prod 111)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 111)] [term 40:REDUCE(with prod 111)]
 [term 41:REDUCE(with prod 111)] [term 42:REDUCE(with prod 111)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 111)]
From state #105
 [term 10:REDUCE(with prod 99)] [term 12:REDUCE(with prod 99)]
 [term 13:REDUCE(with prod 99)] [term 14:REDUCE(with prod 99)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 99)]
 [term 19:REDUCE(with prod 99)] [term 20:REDUCE(with prod 99)]
 [term 21:REDUCE(with prod 99)] [term 22:REDUCE(with prod 99)]
 [term 23:REDUCE(with prod 99)] [term 24:REDUCE(with prod 99)]
 [term 25:REDUCE(with prod 99)] [term 26:REDUCE(with prod 99)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 99)] [term 31:REDUCE(with prod 99)]
 [term 35:REDUCE(with prod 99)] [term 36:REDUCE(with prod 99)]
 [term 37:REDUCE(with prod 99)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 99)] [term 40:REDUCE(with prod 99)]
 [term 41:REDUCE(with prod 99)] [term 42:REDUCE(with prod 99)]
 [term 43:REDUCE(with prod 99)] [term 44:REDUCE(with prod 99)]
 [term 45:REDUCE(with prod 99)] [term 46:REDUCE(with prod 99)]
 [term 47:REDUCE(with prod 99)] [term 48:REDUCE(with prod 99)]
 [term 49:REDUCE(with prod 99)]
From state #106
 [term 10:REDUCE(with prod 105)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 105)]
 [term 19:REDUCE(with prod 105)] [term 20:REDUCE(with prod 105)]
 [term 21:REDUCE(with prod 105)] [term 22:REDUCE(with prod 105)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 105)] [term 31:REDUCE(with prod 105)]
 [term 35:REDUCE(with prod 105)] [term 36:REDUCE(with prod 105)]
 [term 37:REDUCE(with prod 105)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 105)] [term 40:REDUCE(with prod 105)]
 [term 41:REDUCE(with prod 105)] [term 42:REDUCE(with prod 105)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:REDUCE(with prod 105)]
 [term 47:REDUCE(with prod 105)] [term 48:REDUCE(with prod 105)]
 [term 49:REDUCE(with prod 105)]
From state #107
 [term 10:REDUCE(with prod 106)] [term 12:REDUCE(with prod 106)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 106)]
 [term 19:REDUCE(with prod 106)] [term 20:REDUCE(with prod 106)]
 [term 21:REDUCE(with prod 106)] [term 22:REDUCE(with prod 106)]
 [term 23:REDUCE(with prod 106)] [term 24:REDUCE(with prod 106)]
 [term 25:REDUCE(with prod 106)] [term 26:REDUCE(with prod 106)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 106)] [term 31:REDUCE(with prod 106)]
 [term 35:REDUCE(with prod 106)] [term 36:REDUCE(with prod 106)]
 [term 37:REDUCE(with prod 106)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 106)] [term 40:REDUCE(with prod 106)]
 [term 41:REDUCE(with prod 106)] [term 42:REDUCE(with prod 106)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:REDUCE(with prod 106)]
 [term 47:REDUCE(with prod 106)] [term 48:REDUCE(with prod 106)]
 [term 49:REDUCE(with prod 106)]
From state #108
 [term 10:REDUCE(with prod 110)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 110)]
 [term 19:REDUCE(with prod 110)] [term 20:REDUCE(with prod 110)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 110)] [term 31:REDUCE(with prod 110)]
 [term 35:REDUCE(with prod 110)] [term 36:REDUCE(with prod 110)]
 [term 37:REDUCE(with prod 110)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 110)] [term 40:REDUCE(with prod 110)]
 [term 41:REDUCE(with prod 110)] [term 42:REDUCE(with prod 110)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 110)]
From state #109
 [term 10:REDUCE(with prod 114)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 114)]
 [term 19:REDUCE(with prod 114)] [term 20:REDUCE(with prod 114)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 114)] [term 31:REDUCE(with prod 114)]
 [term 35:REDUCE(with prod 114)] [term 36:REDUCE(with prod 114)]
 [term 37:REDUCE(with prod 114)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 114)] [term 40:REDUCE(with prod 114)]
 [term 41:REDUCE(with prod 114)] [term 42:REDUCE(with prod 114)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:REDUCE(with prod 114)]
 [term 47:REDUCE(with prod 114)] [term 48:REDUCE(with prod 114)]
 [term 49:REDUCE(with prod 114)]
From state #110
 [term 10:REDUCE(with prod 109)] [term 12:REDUCE(with prod 109)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 109)]
 [term 19:REDUCE(with prod 109)] [term 20:REDUCE(with prod 109)]
 [term 21:REDUCE(with prod 109)] [term 22:REDUCE(with prod 109)]
 [term 23:REDUCE(with prod 109)] [term 24:REDUCE(with prod 109)]
 [term 25:REDUCE(with prod 109)] [term 26:REDUCE(with prod 109)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 109)] [term 31:REDUCE(with prod 109)]
 [term 35:REDUCE(with prod 109)] [term 36:REDUCE(with prod 109)]
 [term 37:REDUCE(with prod 109)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 109)] [term 40:REDUCE(with prod 109)]
 [term 41:REDUCE(with prod 109)] [term 42:REDUCE(with prod 109)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:REDUCE(with prod 109)]
 [term 47:REDUCE(with prod 109)] [term 48:REDUCE(with prod 109)]
 [term 49:REDUCE(with prod 109)]
From state #111
 [term 10:REDUCE(with prod 101)] [term 12:REDUCE(with prod 101)]
 [term 13:REDUCE(with prod 101)] [term 14:REDUCE(with prod 101)]
 [term 15:REDUCE(with prod 101)] [term 16:REDUCE(with prod 101)]
 [term 17:REDUCE(with prod 101)] [term 18:REDUCE(with prod 101)]
 [term 19:REDUCE(with prod 101)] [term 20:REDUCE(with prod 101)]
 [term 21:REDUCE(with prod 101)] [term 22:REDUCE(with prod 101)]
 [term 23:REDUCE(with prod 101)] [term 24:REDUCE(with prod 101)]
 [term 25:REDUCE(with prod 101)] [term 26:REDUCE(with prod 101)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 101)] [term 31:REDUCE(with prod 101)]
 [term 35:REDUCE(with prod 101)] [term 36:REDUCE(with prod 101)]
 [term 37:REDUCE(with prod 101)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 101)] [term 40:REDUCE(with prod 101)]
 [term 41:REDUCE(with prod 101)] [term 42:REDUCE(with prod 101)]
 [term 43:REDUCE(with prod 101)] [term 44:REDUCE(with prod 101)]
 [term 45:REDUCE(with prod 101)] [term 46:REDUCE(with prod 101)]
 [term 47:REDUCE(with prod 101)] [term 48:REDUCE(with prod 101)]
 [term 49:REDUCE(with prod 101)]
From state #112
 [term 33:REDUCE(with prod 15)] [term 39:REDUCE(with prod 15)]
From state #113
 [term 30:SHIFT(to state 115)] [term 34:SHIFT(to state 114)]
From state #114
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #115
 [term 31:SHIFT(to state 116)]
From state #116
 [term 10:REDUCE(with prod 87)] [term 12:REDUCE(with prod 87)]
 [term 13:REDUCE(with prod 87)] [term 14:REDUCE(with prod 87)]
 [term 15:REDUCE(with prod 87)] [term 16:REDUCE(with prod 87)]
 [term 17:REDUCE(with prod 87)] [term 18:REDUCE(with prod 87)]
 [term 19:REDUCE(with prod 87)] [term 20:REDUCE(with prod 87)]
 [term 21:REDUCE(with prod 87)] [term 22:REDUCE(with prod 87)]
 [term 23:REDUCE(with prod 87)] [term 24:REDUCE(with prod 87)]
 [term 25:REDUCE(with prod 87)] [term 26:REDUCE(with prod 87)]
 [term 28:REDUCE(with prod 87)] [term 29:REDUCE(with prod 87)]
 [term 30:REDUCE(with prod 87)] [term 31:REDUCE(with prod 87)]
 [term 35:REDUCE(with prod 87)] [term 36:REDUCE(with prod 87)]
 [term 37:REDUCE(with prod 87)] [term 38:REDUCE(with prod 87)]
 [term 39:REDUCE(with prod 87)] [term 40:REDUCE(with prod 87)]
 [term 41:REDUCE(with prod 87)] [term 42:REDUCE(with prod 87)]
 [term 43:REDUCE(with prod 87)] [term 44:REDUCE(with prod 87)]
 [term 45:REDUCE(with prod 87)] [term 46:REDUCE(with prod 87)]
 [term 47:REDUCE(with prod 87)] [term 48:REDUCE(with prod 87)]
 [term 49:REDUCE(with prod 87)]
From state #117
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 35:SHIFT(to state 118)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #118
 [term 10:REDUCE(with prod 88)] [term 12:REDUCE(with prod 88)]
 [term 13:REDUCE(with prod 88)] [term 14:REDUCE(with prod 88)]
 [term 15:REDUCE(with prod 88)] [term 16:REDUCE(with prod 88)]
 [term 17:REDUCE(with prod 88)] [term 18:REDUCE(with prod 88)]
 [term 19:REDUCE(with prod 88)] [term 20:REDUCE(with prod 88)]
 [term 21:REDUCE(with prod 88)] [term 22:REDUCE(with prod 88)]
 [term 23:REDUCE(with prod 88)] [term 24:REDUCE(with prod 88)]
 [term 25:REDUCE(with prod 88)] [term 26:REDUCE(with prod 88)]
 [term 28:REDUCE(with prod 88)] [term 29:REDUCE(with prod 88)]
 [term 30:REDUCE(with prod 88)] [term 31:REDUCE(with prod 88)]
 [term 35:REDUCE(with prod 88)] [term 36:REDUCE(with prod 88)]
 [term 37:REDUCE(with prod 88)] [term 38:REDUCE(with prod 88)]
 [term 39:REDUCE(with prod 88)] [term 40:REDUCE(with prod 88)]
 [term 41:REDUCE(with prod 88)] [term 42:REDUCE(with prod 88)]
 [term 43:REDUCE(with prod 88)] [term 44:REDUCE(with prod 88)]
 [term 45:REDUCE(with prod 88)] [term 46:REDUCE(with prod 88)]
 [term 47:REDUCE(with prod 88)] [term 48:REDUCE(with prod 88)]
 [term 49:REDUCE(with prod 88)]
From state #119
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #120
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #121
 [term 39:SHIFT(to state 138)]
From state #122
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #123
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #124
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #125
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #126
 [term 10:REDUCE(with prod 49)] [term 14:REDUCE(with prod 49)]
 [term 18:REDUCE(with prod 49)] [term 28:REDUCE(with prod 49)]
 [term 29:REDUCE(with prod 49)] [term 30:REDUCE(with prod 49)]
 [term 31:REDUCE(with prod 49)] [term 39:REDUCE(with prod 49)]
 [term 40:REDUCE(with prod 49)] [term 41:REDUCE(with prod 49)]
 [term 42:REDUCE(with prod 49)] [term 49:REDUCE(with prod 49)]
From state #127
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #128
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 35:SHIFT(to state 129)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #129
 [term 10:REDUCE(with prod 132)] [term 12:REDUCE(with prod 132)]
 [term 13:REDUCE(with prod 132)] [term 14:REDUCE(with prod 132)]
 [term 15:REDUCE(with prod 132)] [term 16:REDUCE(with prod 132)]
 [term 17:REDUCE(with prod 132)] [term 18:REDUCE(with prod 132)]
 [term 19:REDUCE(with prod 132)] [term 20:REDUCE(with prod 132)]
 [term 21:REDUCE(with prod 132)] [term 22:REDUCE(with prod 132)]
 [term 23:REDUCE(with prod 132)] [term 24:REDUCE(with prod 132)]
 [term 25:REDUCE(with prod 132)] [term 26:REDUCE(with prod 132)]
 [term 27:SHIFT(to state 130)] [term 28:REDUCE(with prod 132)]
 [term 29:REDUCE(with prod 132)] [term 30:REDUCE(with prod 132)]
 [term 31:REDUCE(with prod 132)] [term 35:REDUCE(with prod 132)]
 [term 36:REDUCE(with prod 132)] [term 37:REDUCE(with prod 132)]
 [term 38:REDUCE(with prod 132)] [term 39:REDUCE(with prod 132)]
 [term 40:REDUCE(with prod 132)] [term 41:REDUCE(with prod 132)]
 [term 42:REDUCE(with prod 132)] [term 43:REDUCE(with prod 132)]
 [term 44:REDUCE(with prod 132)] [term 45:REDUCE(with prod 132)]
 [term 46:REDUCE(with prod 132)] [term 47:REDUCE(with prod 132)]
 [term 48:REDUCE(with prod 132)] [term 49:REDUCE(with prod 132)]
From state #130
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #131
 [term 10:REDUCE(with prod 82)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 82)] [term 31:REDUCE(with prod 82)]
 [term 35:REDUCE(with prod 82)] [term 36:REDUCE(with prod 82)]
 [term 37:REDUCE(with prod 82)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 82)] [term 40:REDUCE(with prod 82)]
 [term 41:REDUCE(with prod 82)] [term 42:REDUCE(with prod 82)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 82)]
From state #132
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 31:SHIFT(to state 133)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #133
 [term 10:REDUCE(with prod 84)] [term 12:REDUCE(with prod 84)]
 [term 13:REDUCE(with prod 84)] [term 14:REDUCE(with prod 84)]
 [term 15:REDUCE(with prod 84)] [term 16:REDUCE(with prod 84)]
 [term 17:REDUCE(with prod 84)] [term 18:REDUCE(with prod 84)]
 [term 19:REDUCE(with prod 84)] [term 20:REDUCE(with prod 84)]
 [term 21:REDUCE(with prod 84)] [term 22:REDUCE(with prod 84)]
 [term 23:REDUCE(with prod 84)] [term 24:REDUCE(with prod 84)]
 [term 25:REDUCE(with prod 84)] [term 26:REDUCE(with prod 84)]
 [term 28:REDUCE(with prod 84)] [term 29:REDUCE(with prod 84)]
 [term 30:REDUCE(with prod 84)] [term 31:REDUCE(with prod 84)]
 [term 35:REDUCE(with prod 84)] [term 36:REDUCE(with prod 84)]
 [term 37:REDUCE(with prod 84)] [term 38:REDUCE(with prod 84)]
 [term 39:REDUCE(with prod 84)] [term 40:REDUCE(with prod 84)]
 [term 41:REDUCE(with prod 84)] [term 42:REDUCE(with prod 84)]
 [term 43:REDUCE(with prod 84)] [term 44:REDUCE(with prod 84)]
 [term 45:REDUCE(with prod 84)] [term 46:REDUCE(with prod 84)]
 [term 47:REDUCE(with prod 84)] [term 48:REDUCE(with prod 84)]
 [term 49:REDUCE(with prod 84)]
From state #134
 [term 10:REDUCE(with prod 80)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 80)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 80)] [term 31:REDUCE(with prod 80)]
 [term 35:REDUCE(with prod 80)] [term 36:REDUCE(with prod 80)]
 [term 37:REDUCE(with prod 80)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 80)] [term 40:REDUCE(with prod 80)]
 [term 41:REDUCE(with prod 80)] [term 42:REDUCE(with prod 80)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 80)]
From state #135
 [term 10:REDUCE(with prod 76)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 76)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 76)] [term 31:REDUCE(with prod 76)]
 [term 35:REDUCE(with prod 76)] [term 36:REDUCE(with prod 76)]
 [term 37:REDUCE(with prod 76)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 76)] [term 40:REDUCE(with prod 76)]
 [term 41:REDUCE(with prod 76)] [term 42:REDUCE(with prod 76)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 76)]
From state #136
 [term 10:REDUCE(with prod 78)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 78)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 78)] [term 31:REDUCE(with prod 78)]
 [term 35:REDUCE(with prod 78)] [term 36:REDUCE(with prod 78)]
 [term 37:REDUCE(with prod 78)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 78)] [term 40:REDUCE(with prod 78)]
 [term 41:REDUCE(with prod 78)] [term 42:REDUCE(with prod 78)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 78)]
From state #137
 [term 10:REDUCE(with prod 65)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 65)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 65)] [term 31:REDUCE(with prod 65)]
 [term 35:REDUCE(with prod 65)] [term 36:REDUCE(with prod 65)]
 [term 37:REDUCE(with prod 65)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 65)] [term 40:REDUCE(with prod 65)]
 [term 41:REDUCE(with prod 65)] [term 42:REDUCE(with prod 65)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 65)]
From state #138
 [term 10:REDUCE(with prod 131)] [term 12:REDUCE(with prod 131)]
 [term 13:REDUCE(with prod 131)] [term 14:REDUCE(with prod 131)]
 [term 15:REDUCE(with prod 131)] [term 16:REDUCE(with prod 131)]
 [term 17:REDUCE(with prod 131)] [term 18:REDUCE(with prod 131)]
 [term 19:REDUCE(with prod 131)] [term 20:REDUCE(with prod 131)]
 [term 21:REDUCE(with prod 131)] [term 22:REDUCE(with prod 131)]
 [term 23:REDUCE(with prod 131)] [term 24:REDUCE(with prod 131)]
 [term 25:REDUCE(with prod 131)] [term 26:REDUCE(with prod 131)]
 [term 27:SHIFT(to state 146)] [term 28:REDUCE(with prod 131)]
 [term 29:REDUCE(with prod 131)] [term 30:SHIFT(to state 145)]
 [term 31:REDUCE(with prod 131)] [term 34:SHIFT(to state 142)]
 [term 35:REDUCE(with prod 131)] [term 36:REDUCE(with prod 131)]
 [term 37:REDUCE(with prod 131)] [term 38:REDUCE(with prod 131)]
 [term 39:REDUCE(with prod 131)] [term 40:REDUCE(with prod 131)]
 [term 41:REDUCE(with prod 131)] [term 42:REDUCE(with prod 131)]
 [term 43:REDUCE(with prod 131)] [term 44:REDUCE(with prod 131)]
 [term 45:REDUCE(with prod 131)] [term 46:REDUCE(with prod 131)]
 [term 47:REDUCE(with prod 131)] [term 48:REDUCE(with prod 131)]
 [term 49:REDUCE(with prod 131)] [term 50:SHIFT(to state 144)]
 [term 51:SHIFT(to state 141)] [term 52:SHIFT(to state 140)]
 [term 53:SHIFT(to state 143)] [term 54:SHIFT(to state 139)]
From state #139
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #140
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #141
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #142
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #143
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #144
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #145
 [term 10:REDUCE(with prod 49)] [term 14:REDUCE(with prod 49)]
 [term 18:REDUCE(with prod 49)] [term 28:REDUCE(with prod 49)]
 [term 29:REDUCE(with prod 49)] [term 30:REDUCE(with prod 49)]
 [term 31:REDUCE(with prod 49)] [term 39:REDUCE(with prod 49)]
 [term 40:REDUCE(with prod 49)] [term 41:REDUCE(with prod 49)]
 [term 42:REDUCE(with prod 49)] [term 49:REDUCE(with prod 49)]
From state #146
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #147
 [term 10:REDUCE(with prod 66)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 66)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 66)] [term 31:REDUCE(with prod 66)]
 [term 35:REDUCE(with prod 66)] [term 36:REDUCE(with prod 66)]
 [term 37:REDUCE(with prod 66)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 66)] [term 40:REDUCE(with prod 66)]
 [term 41:REDUCE(with prod 66)] [term 42:REDUCE(with prod 66)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 66)]
From state #148
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 31:SHIFT(to state 149)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #149
 [term 10:REDUCE(with prod 86)] [term 12:REDUCE(with prod 86)]
 [term 13:REDUCE(with prod 86)] [term 14:REDUCE(with prod 86)]
 [term 15:REDUCE(with prod 86)] [term 16:REDUCE(with prod 86)]
 [term 17:REDUCE(with prod 86)] [term 18:REDUCE(with prod 86)]
 [term 19:REDUCE(with prod 86)] [term 20:REDUCE(with prod 86)]
 [term 21:REDUCE(with prod 86)] [term 22:REDUCE(with prod 86)]
 [term 23:REDUCE(with prod 86)] [term 24:REDUCE(with prod 86)]
 [term 25:REDUCE(with prod 86)] [term 26:REDUCE(with prod 86)]
 [term 28:REDUCE(with prod 86)] [term 29:REDUCE(with prod 86)]
 [term 30:REDUCE(with prod 86)] [term 31:REDUCE(with prod 86)]
 [term 35:REDUCE(with prod 86)] [term 36:REDUCE(with prod 86)]
 [term 37:REDUCE(with prod 86)] [term 38:REDUCE(with prod 86)]
 [term 39:REDUCE(with prod 86)] [term 40:REDUCE(with prod 86)]
 [term 41:REDUCE(with prod 86)] [term 42:REDUCE(with prod 86)]
 [term 43:REDUCE(with prod 86)] [term 44:REDUCE(with prod 86)]
 [term 45:REDUCE(with prod 86)] [term 46:REDUCE(with prod 86)]
 [term 47:REDUCE(with prod 86)] [term 48:REDUCE(with prod 86)]
 [term 49:REDUCE(with prod 86)]
From state #150
 [term 10:REDUCE(with prod 73)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 73)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 73)] [term 31:REDUCE(with prod 73)]
 [term 35:REDUCE(with prod 73)] [term 36:REDUCE(with prod 73)]
 [term 37:REDUCE(with prod 73)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 73)] [term 40:REDUCE(with prod 73)]
 [term 41:REDUCE(with prod 73)] [term 42:REDUCE(with prod 73)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 73)]
From state #151
 [term 10:REDUCE(with prod 79)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 79)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 79)] [term 31:REDUCE(with prod 79)]
 [term 35:REDUCE(with prod 79)] [term 36:REDUCE(with prod 79)]
 [term 37:REDUCE(with prod 79)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 79)] [term 40:REDUCE(with prod 79)]
 [term 41:REDUCE(with prod 79)] [term 42:REDUCE(with prod 79)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 79)]
From state #152
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 35:SHIFT(to state 153)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #153
 [term 10:REDUCE(with prod 133)] [term 12:REDUCE(with prod 133)]
 [term 13:REDUCE(with prod 133)] [term 14:REDUCE(with prod 133)]
 [term 15:REDUCE(with prod 133)] [term 16:REDUCE(with prod 133)]
 [term 17:REDUCE(with prod 133)] [term 18:REDUCE(with prod 133)]
 [term 19:REDUCE(with prod 133)] [term 20:REDUCE(with prod 133)]
 [term 21:REDUCE(with prod 133)] [term 22:REDUCE(with prod 133)]
 [term 23:REDUCE(with prod 133)] [term 24:REDUCE(with prod 133)]
 [term 25:REDUCE(with prod 133)] [term 26:REDUCE(with prod 133)]
 [term 27:SHIFT(to state 154)] [term 28:REDUCE(with prod 133)]
 [term 29:REDUCE(with prod 133)] [term 30:REDUCE(with prod 133)]
 [term 31:REDUCE(with prod 133)] [term 35:REDUCE(with prod 133)]
 [term 36:REDUCE(with prod 133)] [term 37:REDUCE(with prod 133)]
 [term 38:REDUCE(with prod 133)] [term 39:REDUCE(with prod 133)]
 [term 40:REDUCE(with prod 133)] [term 41:REDUCE(with prod 133)]
 [term 42:REDUCE(with prod 133)] [term 43:REDUCE(with prod 133)]
 [term 44:REDUCE(with prod 133)] [term 45:REDUCE(with prod 133)]
 [term 46:REDUCE(with prod 133)] [term 47:REDUCE(with prod 133)]
 [term 48:REDUCE(with prod 133)] [term 49:REDUCE(with prod 133)]
From state #154
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #155
 [term 10:REDUCE(with prod 83)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 83)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 83)] [term 31:REDUCE(with prod 83)]
 [term 35:REDUCE(with prod 83)] [term 36:REDUCE(with prod 83)]
 [term 37:REDUCE(with prod 83)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 83)] [term 40:REDUCE(with prod 83)]
 [term 41:REDUCE(with prod 83)] [term 42:REDUCE(with prod 83)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 83)]
From state #156
 [term 10:REDUCE(with prod 75)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 75)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 75)] [term 31:REDUCE(with prod 75)]
 [term 35:REDUCE(with prod 75)] [term 36:REDUCE(with prod 75)]
 [term 37:REDUCE(with prod 75)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 75)] [term 40:REDUCE(with prod 75)]
 [term 41:REDUCE(with prod 75)] [term 42:REDUCE(with prod 75)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 75)]
From state #157
 [term 10:REDUCE(with prod 77)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 77)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 77)] [term 31:REDUCE(with prod 77)]
 [term 35:REDUCE(with prod 77)] [term 36:REDUCE(with prod 77)]
 [term 37:REDUCE(with prod 77)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 77)] [term 40:REDUCE(with prod 77)]
 [term 41:REDUCE(with prod 77)] [term 42:REDUCE(with prod 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 77)]
From state #158
 [term 10:REDUCE(with prod 81)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 81)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 81)] [term 31:REDUCE(with prod 81)]
 [term 35:REDUCE(with prod 81)] [term 36:REDUCE(with prod 81)]
 [term 37:REDUCE(with prod 81)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 81)] [term 40:REDUCE(with prod 81)]
 [term 41:REDUCE(with prod 81)] [term 42:REDUCE(with prod 81)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 81)]
From state #159
 [term 10:REDUCE(with prod 72)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 72)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 72)] [term 31:REDUCE(with prod 72)]
 [term 35:REDUCE(with prod 72)] [term 36:REDUCE(with prod 72)]
 [term 37:REDUCE(with prod 72)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 72)] [term 40:REDUCE(with prod 72)]
 [term 41:REDUCE(with prod 72)] [term 42:REDUCE(with prod 72)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 72)]
From state #160
 [term 10:REDUCE(with prod 74)] [term 12:SHIFT(to state 81)]
 [term 13:SHIFT(to state 68)] [term 14:SHIFT(to state 76)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 74)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 74)] [term 31:REDUCE(with prod 74)]
 [term 35:REDUCE(with prod 74)] [term 36:REDUCE(with prod 74)]
 [term 37:REDUCE(with prod 74)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 74)] [term 40:REDUCE(with prod 74)]
 [term 41:REDUCE(with prod 74)] [term 42:REDUCE(with prod 74)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
 [term 49:REDUCE(with prod 74)]
From state #161
 [term 10:REDUCE(with prod 124)] [term 12:REDUCE(with prod 124)]
 [term 13:REDUCE(with prod 124)] [term 14:REDUCE(with prod 124)]
 [term 15:REDUCE(with prod 124)] [term 16:REDUCE(with prod 124)]
 [term 17:REDUCE(with prod 124)] [term 18:REDUCE(with prod 124)]
 [term 19:REDUCE(with prod 124)] [term 20:REDUCE(with prod 124)]
 [term 21:REDUCE(with prod 124)] [term 22:REDUCE(with prod 124)]
 [term 23:REDUCE(with prod 124)] [term 24:REDUCE(with prod 124)]
 [term 25:REDUCE(with prod 124)] [term 26:REDUCE(with prod 124)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 124)] [term 31:REDUCE(with prod 124)]
 [term 35:REDUCE(with prod 124)] [term 36:REDUCE(with prod 124)]
 [term 37:REDUCE(with prod 124)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 124)] [term 40:REDUCE(with prod 124)]
 [term 41:REDUCE(with prod 124)] [term 42:REDUCE(with prod 124)]
 [term 43:REDUCE(with prod 124)] [term 44:REDUCE(with prod 124)]
 [term 45:REDUCE(with prod 124)] [term 46:REDUCE(with prod 124)]
 [term 47:REDUCE(with prod 124)] [term 48:REDUCE(with prod 124)]
 [term 49:REDUCE(with prod 124)]
From state #162
 [term 10:REDUCE(with prod 123)] [term 12:REDUCE(with prod 123)]
 [term 13:REDUCE(with prod 123)] [term 14:REDUCE(with prod 123)]
 [term 15:SHIFT(to state 61)] [term 16:SHIFT(to state 75)]
 [term 17:SHIFT(to state 82)] [term 18:REDUCE(with prod 123)]
 [term 19:REDUCE(with prod 123)] [term 20:REDUCE(with prod 123)]
 [term 21:REDUCE(with prod 123)] [term 22:REDUCE(with prod 123)]
 [term 23:REDUCE(with prod 123)] [term 24:REDUCE(with prod 123)]
 [term 25:REDUCE(with prod 123)] [term 26:REDUCE(with prod 123)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 123)] [term 31:REDUCE(with prod 123)]
 [term 35:REDUCE(with prod 123)] [term 36:REDUCE(with prod 123)]
 [term 37:REDUCE(with prod 123)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 123)] [term 40:REDUCE(with prod 123)]
 [term 41:REDUCE(with prod 123)] [term 42:REDUCE(with prod 123)]
 [term 43:REDUCE(with prod 123)] [term 44:REDUCE(with prod 123)]
 [term 45:REDUCE(with prod 123)] [term 46:REDUCE(with prod 123)]
 [term 47:REDUCE(with prod 123)] [term 48:REDUCE(with prod 123)]
 [term 49:REDUCE(with prod 123)]
From state #163
 [term 10:REDUCE(with prod 126)] [term 12:REDUCE(with prod 126)]
 [term 13:REDUCE(with prod 126)] [term 14:REDUCE(with prod 126)]
 [term 15:REDUCE(with prod 126)] [term 16:REDUCE(with prod 126)]
 [term 17:REDUCE(with prod 126)] [term 18:REDUCE(with prod 126)]
 [term 19:REDUCE(with prod 126)] [term 20:REDUCE(with prod 126)]
 [term 21:REDUCE(with prod 126)] [term 22:REDUCE(with prod 126)]
 [term 23:REDUCE(with prod 126)] [term 24:REDUCE(with prod 126)]
 [term 25:REDUCE(with prod 126)] [term 26:REDUCE(with prod 126)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 126)] [term 31:REDUCE(with prod 126)]
 [term 35:REDUCE(with prod 126)] [term 36:REDUCE(with prod 126)]
 [term 37:REDUCE(with prod 126)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 126)] [term 40:REDUCE(with prod 126)]
 [term 41:REDUCE(with prod 126)] [term 42:REDUCE(with prod 126)]
 [term 43:REDUCE(with prod 126)] [term 44:REDUCE(with prod 126)]
 [term 45:REDUCE(with prod 126)] [term 46:REDUCE(with prod 126)]
 [term 47:REDUCE(with prod 126)] [term 48:REDUCE(with prod 126)]
 [term 49:REDUCE(with prod 126)]
From state #164
 [term 10:REDUCE(with prod 128)] [term 12:REDUCE(with prod 128)]
 [term 13:REDUCE(with prod 128)] [term 14:REDUCE(with prod 128)]
 [term 15:REDUCE(with prod 128)] [term 16:REDUCE(with prod 128)]
 [term 17:REDUCE(with prod 128)] [term 18:REDUCE(with prod 128)]
 [term 19:REDUCE(with prod 128)] [term 20:REDUCE(with prod 128)]
 [term 21:REDUCE(with prod 128)] [term 22:REDUCE(with prod 128)]
 [term 23:REDUCE(with prod 128)] [term 24:REDUCE(with prod 128)]
 [term 25:REDUCE(with prod 128)] [term 26:REDUCE(with prod 128)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 30:REDUCE(with prod 128)] [term 31:REDUCE(with prod 128)]
 [term 35:REDUCE(with prod 128)] [term 36:REDUCE(with prod 128)]
 [term 37:REDUCE(with prod 128)] [term 38:SHIFT(to state 77)]
 [term 39:REDUCE(with prod 128)] [term 40:REDUCE(with prod 128)]
 [term 41:REDUCE(with prod 128)] [term 42:REDUCE(with prod 128)]
 [term 43:REDUCE(with prod 128)] [term 44:REDUCE(with prod 128)]
 [term 45:REDUCE(with prod 128)] [term 46:REDUCE(with prod 128)]
 [term 47:REDUCE(with prod 128)] [term 48:REDUCE(with prod 128)]
 [term 49:REDUCE(with prod 128)]
From state #165
 [term 12:REDUCE(with prod 130)] [term 13:REDUCE(with prod 130)]
 [term 14:REDUCE(with prod 130)] [term 15:REDUCE(with prod 130)]
 [term 16:REDUCE(with prod 130)] [term 17:REDUCE(with prod 130)]
 [term 19:REDUCE(with prod 130)] [term 20:REDUCE(with prod 130)]
 [term 21:REDUCE(with prod 130)] [term 22:REDUCE(with prod 130)]
 [term 23:REDUCE(with prod 130)] [term 24:REDUCE(with prod 130)]
 [term 25:REDUCE(with prod 130)] [term 26:REDUCE(with prod 130)]
 [term 27:SHIFT(to state 122)] [term 28:REDUCE(with prod 130)]
 [term 29:REDUCE(with prod 130)] [term 30:SHIFT(to state 126)]
 [term 31:SHIFT(to state 168)] [term 34:SHIFT(to state 169)]
 [term 38:SHIFT(to state 121)] [term 43:REDUCE(with prod 130)]
 [term 44:REDUCE(with prod 130)] [term 45:REDUCE(with prod 130)]
 [term 46:REDUCE(with prod 130)] [term 47:REDUCE(with prod 130)]
 [term 48:REDUCE(with prod 130)] [term 50:SHIFT(to state 120)]
 [term 51:SHIFT(to state 119)] [term 52:SHIFT(to state 124)]
 [term 53:SHIFT(to state 123)] [term 54:SHIFT(to state 125)]
From state #166
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 31:SHIFT(to state 167)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #167
 [term 10:REDUCE(with prod 64)] [term 12:REDUCE(with prod 64)]
 [term 13:REDUCE(with prod 64)] [term 14:REDUCE(with prod 64)]
 [term 15:REDUCE(with prod 64)] [term 16:REDUCE(with prod 64)]
 [term 17:REDUCE(with prod 64)] [term 18:REDUCE(with prod 64)]
 [term 19:REDUCE(with prod 64)] [term 20:REDUCE(with prod 64)]
 [term 21:REDUCE(with prod 64)] [term 22:REDUCE(with prod 64)]
 [term 23:REDUCE(with prod 64)] [term 24:REDUCE(with prod 64)]
 [term 25:REDUCE(with prod 64)] [term 26:REDUCE(with prod 64)]
 [term 28:REDUCE(with prod 64)] [term 29:REDUCE(with prod 64)]
 [term 30:REDUCE(with prod 64)] [term 31:REDUCE(with prod 64)]
 [term 35:REDUCE(with prod 64)] [term 36:REDUCE(with prod 64)]
 [term 37:REDUCE(with prod 64)] [term 38:REDUCE(with prod 64)]
 [term 39:REDUCE(with prod 64)] [term 40:REDUCE(with prod 64)]
 [term 41:REDUCE(with prod 64)] [term 42:REDUCE(with prod 64)]
 [term 43:REDUCE(with prod 64)] [term 44:REDUCE(with prod 64)]
 [term 45:REDUCE(with prod 64)] [term 46:REDUCE(with prod 64)]
 [term 47:REDUCE(with prod 64)] [term 48:REDUCE(with prod 64)]
 [term 49:REDUCE(with prod 64)]
From state #168
 [term 30:SHIFT(to state 175)]
From state #169
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 35:SHIFT(to state 170)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #170
 [term 31:SHIFT(to state 171)]
From state #171
 [term 30:SHIFT(to state 172)]
From state #172
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #173
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 31:SHIFT(to state 174)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #174
 [term 10:REDUCE(with prod 92)] [term 12:REDUCE(with prod 92)]
 [term 13:REDUCE(with prod 92)] [term 14:REDUCE(with prod 92)]
 [term 15:REDUCE(with prod 92)] [term 16:REDUCE(with prod 92)]
 [term 17:REDUCE(with prod 92)] [term 18:REDUCE(with prod 92)]
 [term 19:REDUCE(with prod 92)] [term 20:REDUCE(with prod 92)]
 [term 21:REDUCE(with prod 92)] [term 22:REDUCE(with prod 92)]
 [term 23:REDUCE(with prod 92)] [term 24:REDUCE(with prod 92)]
 [term 25:REDUCE(with prod 92)] [term 26:REDUCE(with prod 92)]
 [term 28:REDUCE(with prod 92)] [term 29:REDUCE(with prod 92)]
 [term 30:REDUCE(with prod 92)] [term 31:REDUCE(with prod 92)]
 [term 35:REDUCE(with prod 92)] [term 36:REDUCE(with prod 92)]
 [term 37:REDUCE(with prod 92)] [term 38:REDUCE(with prod 92)]
 [term 39:REDUCE(with prod 92)] [term 40:REDUCE(with prod 92)]
 [term 41:REDUCE(with prod 92)] [term 42:REDUCE(with prod 92)]
 [term 43:REDUCE(with prod 92)] [term 44:REDUCE(with prod 92)]
 [term 45:REDUCE(with prod 92)] [term 46:REDUCE(with prod 92)]
 [term 47:REDUCE(with prod 92)] [term 48:REDUCE(with prod 92)]
 [term 49:REDUCE(with prod 92)]
From state #175
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #176
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 31:SHIFT(to state 177)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #177
 [term 10:REDUCE(with prod 91)] [term 12:REDUCE(with prod 91)]
 [term 13:REDUCE(with prod 91)] [term 14:REDUCE(with prod 91)]
 [term 15:REDUCE(with prod 91)] [term 16:REDUCE(with prod 91)]
 [term 17:REDUCE(with prod 91)] [term 18:REDUCE(with prod 91)]
 [term 19:REDUCE(with prod 91)] [term 20:REDUCE(with prod 91)]
 [term 21:REDUCE(with prod 91)] [term 22:REDUCE(with prod 91)]
 [term 23:REDUCE(with prod 91)] [term 24:REDUCE(with prod 91)]
 [term 25:REDUCE(with prod 91)] [term 26:REDUCE(with prod 91)]
 [term 28:REDUCE(with prod 91)] [term 29:REDUCE(with prod 91)]
 [term 30:REDUCE(with prod 91)] [term 31:REDUCE(with prod 91)]
 [term 35:REDUCE(with prod 91)] [term 36:REDUCE(with prod 91)]
 [term 37:REDUCE(with prod 91)] [term 38:REDUCE(with prod 91)]
 [term 39:REDUCE(with prod 91)] [term 40:REDUCE(with prod 91)]
 [term 41:REDUCE(with prod 91)] [term 42:REDUCE(with prod 91)]
 [term 43:REDUCE(with prod 91)] [term 44:REDUCE(with prod 91)]
 [term 45:REDUCE(with prod 91)] [term 46:REDUCE(with prod 91)]
 [term 47:REDUCE(with prod 91)] [term 48:REDUCE(with prod 91)]
 [term 49:REDUCE(with prod 91)]
From state #178
 [term 31:SHIFT(to state 180)] [term 39:SHIFT(to state 179)]
From state #179
 [term 34:SHIFT(to state 261)] [term 39:SHIFT(to state 260)]
From state #180
 [term 32:SHIFT(to state 183)]
From state #181
 [term 31:REDUCE(with prod 17)] [term 37:SHIFT(to state 182)]
 [term 39:REDUCE(with prod 17)]
From state #182
 [term 31:REDUCE(with prod 18)] [term 39:REDUCE(with prod 18)]
From state #183
 [term 5:REDUCE(with prod 21)] [term 7:REDUCE(with prod 21)]
 [term 8:REDUCE(with prod 21)] [term 9:REDUCE(with prod 21)]
 [term 10:REDUCE(with prod 21)] [term 11:REDUCE(with prod 21)]
 [term 14:REDUCE(with prod 21)] [term 18:REDUCE(with prod 21)]
 [term 28:REDUCE(with prod 21)] [term 29:REDUCE(with prod 21)]
 [term 30:REDUCE(with prod 21)] [term 32:REDUCE(with prod 21)]
 [term 33:REDUCE(with prod 21)] [term 39:REDUCE(with prod 21)]
 [term 40:REDUCE(with prod 21)] [term 41:REDUCE(with prod 21)]
 [term 42:REDUCE(with prod 21)] [term 49:REDUCE(with prod 21)]
From state #184
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 33:SHIFT(to state 199)] [term 39:SHIFT(to state 190)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #185
 [term 5:REDUCE(with prod 29)] [term 6:REDUCE(with prod 29)]
 [term 7:REDUCE(with prod 29)] [term 8:REDUCE(with prod 29)]
 [term 9:REDUCE(with prod 29)] [term 10:REDUCE(with prod 29)]
 [term 11:REDUCE(with prod 29)] [term 14:REDUCE(with prod 29)]
 [term 18:REDUCE(with prod 29)] [term 28:REDUCE(with prod 29)]
 [term 29:REDUCE(with prod 29)] [term 30:REDUCE(with prod 29)]
 [term 32:REDUCE(with prod 29)] [term 33:REDUCE(with prod 29)]
 [term 39:REDUCE(with prod 29)] [term 40:REDUCE(with prod 29)]
 [term 41:REDUCE(with prod 29)] [term 42:REDUCE(with prod 29)]
 [term 49:REDUCE(with prod 29)]
From state #186
 [term 5:REDUCE(with prod 27)] [term 6:REDUCE(with prod 27)]
 [term 7:REDUCE(with prod 27)] [term 8:REDUCE(with prod 27)]
 [term 9:REDUCE(with prod 27)] [term 10:REDUCE(with prod 27)]
 [term 11:REDUCE(with prod 27)] [term 14:REDUCE(with prod 27)]
 [term 18:REDUCE(with prod 27)] [term 28:REDUCE(with prod 27)]
 [term 29:REDUCE(with prod 27)] [term 30:REDUCE(with prod 27)]
 [term 32:REDUCE(with prod 27)] [term 33:REDUCE(with prod 27)]
 [term 39:REDUCE(with prod 27)] [term 40:REDUCE(with prod 27)]
 [term 41:REDUCE(with prod 27)] [term 42:REDUCE(with prod 27)]
 [term 49:REDUCE(with prod 27)]
From state #187
 [term 30:SHIFT(to state 230)]
From state #188
 [term 5:REDUCE(with prod 28)] [term 6:REDUCE(with prod 28)]
 [term 7:REDUCE(with prod 28)] [term 8:REDUCE(with prod 28)]
 [term 9:REDUCE(with prod 28)] [term 10:REDUCE(with prod 28)]
 [term 11:REDUCE(with prod 28)] [term 14:REDUCE(with prod 28)]
 [term 18:REDUCE(with prod 28)] [term 28:REDUCE(with prod 28)]
 [term 29:REDUCE(with prod 28)] [term 30:REDUCE(with prod 28)]
 [term 32:REDUCE(with prod 28)] [term 33:REDUCE(with prod 28)]
 [term 39:REDUCE(with prod 28)] [term 40:REDUCE(with prod 28)]
 [term 41:REDUCE(with prod 28)] [term 42:REDUCE(with prod 28)]
 [term 49:REDUCE(with prod 28)]
From state #189
 [term 30:SHIFT(to state 224)]
From state #190
 [term 12:REDUCE(with prod 130)] [term 13:REDUCE(with prod 130)]
 [term 14:REDUCE(with prod 130)] [term 15:REDUCE(with prod 130)]
 [term 16:REDUCE(with prod 130)] [term 17:REDUCE(with prod 130)]
 [term 19:REDUCE(with prod 130)] [term 20:REDUCE(with prod 130)]
 [term 21:REDUCE(with prod 130)] [term 22:REDUCE(with prod 130)]
 [term 23:REDUCE(with prod 130)] [term 24:REDUCE(with prod 130)]
 [term 25:REDUCE(with prod 130)] [term 26:REDUCE(with prod 130)]
 [term 27:SHIFT(to state 122)] [term 28:REDUCE(with prod 130)]
 [term 29:REDUCE(with prod 130)] [term 30:SHIFT(to state 126)]
 [term 34:SHIFT(to state 215)] [term 36:REDUCE(with prod 130)]
 [term 38:SHIFT(to state 121)] [term 39:SHIFT(to state 214)]
 [term 43:REDUCE(with prod 130)] [term 44:REDUCE(with prod 130)]
 [term 45:REDUCE(with prod 130)] [term 46:REDUCE(with prod 130)]
 [term 47:REDUCE(with prod 130)] [term 48:REDUCE(with prod 130)]
 [term 50:SHIFT(to state 120)] [term 51:SHIFT(to state 119)]
 [term 52:SHIFT(to state 124)] [term 53:SHIFT(to state 123)]
 [term 54:SHIFT(to state 125)]
From state #191
 [term 5:REDUCE(with prod 24)] [term 6:REDUCE(with prod 24)]
 [term 7:REDUCE(with prod 24)] [term 8:REDUCE(with prod 24)]
 [term 9:REDUCE(with prod 24)] [term 10:REDUCE(with prod 24)]
 [term 11:REDUCE(with prod 24)] [term 14:REDUCE(with prod 24)]
 [term 18:REDUCE(with prod 24)] [term 28:REDUCE(with prod 24)]
 [term 29:REDUCE(with prod 24)] [term 30:REDUCE(with prod 24)]
 [term 32:REDUCE(with prod 24)] [term 33:REDUCE(with prod 24)]
 [term 39:REDUCE(with prod 24)] [term 40:REDUCE(with prod 24)]
 [term 41:REDUCE(with prod 24)] [term 42:REDUCE(with prod 24)]
 [term 49:REDUCE(with prod 24)]
From state #192
 [term 5:REDUCE(with prod 30)] [term 6:REDUCE(with prod 30)]
 [term 7:REDUCE(with prod 30)] [term 8:REDUCE(with prod 30)]
 [term 9:REDUCE(with prod 30)] [term 10:REDUCE(with prod 30)]
 [term 11:REDUCE(with prod 30)] [term 14:REDUCE(with prod 30)]
 [term 18:REDUCE(with prod 30)] [term 28:REDUCE(with prod 30)]
 [term 29:REDUCE(with prod 30)] [term 30:REDUCE(with prod 30)]
 [term 32:REDUCE(with prod 30)] [term 33:REDUCE(with prod 30)]
 [term 39:REDUCE(with prod 30)] [term 40:REDUCE(with prod 30)]
 [term 41:REDUCE(with prod 30)] [term 42:REDUCE(with prod 30)]
 [term 49:REDUCE(with prod 30)]
From state #193
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 36:SHIFT(to state 211)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #194
 [term 5:REDUCE(with prod 23)] [term 6:REDUCE(with prod 23)]
 [term 7:REDUCE(with prod 23)] [term 8:REDUCE(with prod 23)]
 [term 9:REDUCE(with prod 23)] [term 10:REDUCE(with prod 23)]
 [term 11:REDUCE(with prod 23)] [term 14:REDUCE(with prod 23)]
 [term 18:REDUCE(with prod 23)] [term 28:REDUCE(with prod 23)]
 [term 29:REDUCE(with prod 23)] [term 30:REDUCE(with prod 23)]
 [term 32:REDUCE(with prod 23)] [term 33:REDUCE(with prod 23)]
 [term 39:REDUCE(with prod 23)] [term 40:REDUCE(with prod 23)]
 [term 41:REDUCE(with prod 23)] [term 42:REDUCE(with prod 23)]
 [term 49:REDUCE(with prod 23)]
From state #195
 [term 5:REDUCE(with prod 26)] [term 6:REDUCE(with prod 26)]
 [term 7:REDUCE(with prod 26)] [term 8:REDUCE(with prod 26)]
 [term 9:REDUCE(with prod 26)] [term 10:REDUCE(with prod 26)]
 [term 11:REDUCE(with prod 26)] [term 14:REDUCE(with prod 26)]
 [term 18:REDUCE(with prod 26)] [term 28:REDUCE(with prod 26)]
 [term 29:REDUCE(with prod 26)] [term 30:REDUCE(with prod 26)]
 [term 32:REDUCE(with prod 26)] [term 33:REDUCE(with prod 26)]
 [term 39:REDUCE(with prod 26)] [term 40:REDUCE(with prod 26)]
 [term 41:REDUCE(with prod 26)] [term 42:REDUCE(with prod 26)]
 [term 49:REDUCE(with prod 26)]
From state #196
 [term 36:SHIFT(to state 210)]
From state #197
 [term 5:REDUCE(with prod 21)] [term 7:REDUCE(with prod 21)]
 [term 8:REDUCE(with prod 21)] [term 9:REDUCE(with prod 21)]
 [term 10:REDUCE(with prod 21)] [term 11:REDUCE(with prod 21)]
 [term 14:REDUCE(with prod 21)] [term 18:REDUCE(with prod 21)]
 [term 28:REDUCE(with prod 21)] [term 29:REDUCE(with prod 21)]
 [term 30:REDUCE(with prod 21)] [term 32:REDUCE(with prod 21)]
 [term 33:REDUCE(with prod 21)] [term 39:REDUCE(with prod 21)]
 [term 40:REDUCE(with prod 21)] [term 41:REDUCE(with prod 21)]
 [term 42:REDUCE(with prod 21)] [term 49:REDUCE(with prod 21)]
From state #198
 [term 30:SHIFT(to state 204)]
From state #199
 [term 33:REDUCE(with prod 11)] [term 39:REDUCE(with prod 11)]
From state #200
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 36:SHIFT(to state 203)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #201
 [term 5:REDUCE(with prod 25)] [term 6:REDUCE(with prod 25)]
 [term 7:REDUCE(with prod 25)] [term 8:REDUCE(with prod 25)]
 [term 9:REDUCE(with prod 25)] [term 10:REDUCE(with prod 25)]
 [term 11:REDUCE(with prod 25)] [term 14:REDUCE(with prod 25)]
 [term 18:REDUCE(with prod 25)] [term 28:REDUCE(with prod 25)]
 [term 29:REDUCE(with prod 25)] [term 30:REDUCE(with prod 25)]
 [term 32:REDUCE(with prod 25)] [term 33:REDUCE(with prod 25)]
 [term 39:REDUCE(with prod 25)] [term 40:REDUCE(with prod 25)]
 [term 41:REDUCE(with prod 25)] [term 42:REDUCE(with prod 25)]
 [term 49:REDUCE(with prod 25)]
From state #202
 [term 5:REDUCE(with prod 22)] [term 7:REDUCE(with prod 22)]
 [term 8:REDUCE(with prod 22)] [term 9:REDUCE(with prod 22)]
 [term 10:REDUCE(with prod 22)] [term 11:REDUCE(with prod 22)]
 [term 14:REDUCE(with prod 22)] [term 18:REDUCE(with prod 22)]
 [term 28:REDUCE(with prod 22)] [term 29:REDUCE(with prod 22)]
 [term 30:REDUCE(with prod 22)] [term 32:REDUCE(with prod 22)]
 [term 33:REDUCE(with prod 22)] [term 39:REDUCE(with prod 22)]
 [term 40:REDUCE(with prod 22)] [term 41:REDUCE(with prod 22)]
 [term 42:REDUCE(with prod 22)] [term 49:REDUCE(with prod 22)]
From state #203
 [term 5:REDUCE(with prod 31)] [term 6:REDUCE(with prod 31)]
 [term 7:REDUCE(with prod 31)] [term 8:REDUCE(with prod 31)]
 [term 9:REDUCE(with prod 31)] [term 10:REDUCE(with prod 31)]
 [term 11:REDUCE(with prod 31)] [term 14:REDUCE(with prod 31)]
 [term 18:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 29:REDUCE(with prod 31)] [term 30:REDUCE(with prod 31)]
 [term 32:REDUCE(with prod 31)] [term 33:REDUCE(with prod 31)]
 [term 39:REDUCE(with prod 31)] [term 40:REDUCE(with prod 31)]
 [term 41:REDUCE(with prod 31)] [term 42:REDUCE(with prod 31)]
 [term 49:REDUCE(with prod 31)]
From state #204
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #205
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 31:SHIFT(to state 206)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #206
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #207
 [term 5:REDUCE(with prod 36)] [term 6:REDUCE(with prod 36)]
 [term 7:REDUCE(with prod 36)] [term 8:REDUCE(with prod 36)]
 [term 9:REDUCE(with prod 36)] [term 10:REDUCE(with prod 36)]
 [term 11:REDUCE(with prod 36)] [term 14:REDUCE(with prod 36)]
 [term 18:REDUCE(with prod 36)] [term 28:REDUCE(with prod 36)]
 [term 29:REDUCE(with prod 36)] [term 30:REDUCE(with prod 36)]
 [term 32:REDUCE(with prod 36)] [term 33:REDUCE(with prod 36)]
 [term 39:REDUCE(with prod 36)] [term 40:REDUCE(with prod 36)]
 [term 41:REDUCE(with prod 36)] [term 42:REDUCE(with prod 36)]
 [term 49:REDUCE(with prod 36)]
From state #208
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 33:SHIFT(to state 209)] [term 39:SHIFT(to state 190)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #209
 [term 5:REDUCE(with prod 48)] [term 6:REDUCE(with prod 48)]
 [term 7:REDUCE(with prod 48)] [term 8:REDUCE(with prod 48)]
 [term 9:REDUCE(with prod 48)] [term 10:REDUCE(with prod 48)]
 [term 11:REDUCE(with prod 48)] [term 14:REDUCE(with prod 48)]
 [term 18:REDUCE(with prod 48)] [term 28:REDUCE(with prod 48)]
 [term 29:REDUCE(with prod 48)] [term 30:REDUCE(with prod 48)]
 [term 32:REDUCE(with prod 48)] [term 33:REDUCE(with prod 48)]
 [term 39:REDUCE(with prod 48)] [term 40:REDUCE(with prod 48)]
 [term 41:REDUCE(with prod 48)] [term 42:REDUCE(with prod 48)]
 [term 49:REDUCE(with prod 48)]
From state #210
 [term 5:REDUCE(with prod 45)] [term 6:REDUCE(with prod 45)]
 [term 7:REDUCE(with prod 45)] [term 8:REDUCE(with prod 45)]
 [term 9:REDUCE(with prod 45)] [term 10:REDUCE(with prod 45)]
 [term 11:REDUCE(with prod 45)] [term 14:REDUCE(with prod 45)]
 [term 18:REDUCE(with prod 45)] [term 28:REDUCE(with prod 45)]
 [term 29:REDUCE(with prod 45)] [term 30:REDUCE(with prod 45)]
 [term 32:REDUCE(with prod 45)] [term 33:REDUCE(with prod 45)]
 [term 39:REDUCE(with prod 45)] [term 40:REDUCE(with prod 45)]
 [term 41:REDUCE(with prod 45)] [term 42:REDUCE(with prod 45)]
 [term 49:REDUCE(with prod 45)]
From state #211
 [term 5:REDUCE(with prod 46)] [term 6:REDUCE(with prod 46)]
 [term 7:REDUCE(with prod 46)] [term 8:REDUCE(with prod 46)]
 [term 9:REDUCE(with prod 46)] [term 10:REDUCE(with prod 46)]
 [term 11:REDUCE(with prod 46)] [term 14:REDUCE(with prod 46)]
 [term 18:REDUCE(with prod 46)] [term 28:REDUCE(with prod 46)]
 [term 29:REDUCE(with prod 46)] [term 30:REDUCE(with prod 46)]
 [term 32:REDUCE(with prod 46)] [term 33:REDUCE(with prod 46)]
 [term 39:REDUCE(with prod 46)] [term 40:REDUCE(with prod 46)]
 [term 41:REDUCE(with prod 46)] [term 42:REDUCE(with prod 46)]
 [term 49:REDUCE(with prod 46)]
From state #212
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 36:SHIFT(to state 213)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #213
 [term 5:REDUCE(with prod 47)] [term 6:REDUCE(with prod 47)]
 [term 7:REDUCE(with prod 47)] [term 8:REDUCE(with prod 47)]
 [term 9:REDUCE(with prod 47)] [term 10:REDUCE(with prod 47)]
 [term 11:REDUCE(with prod 47)] [term 14:REDUCE(with prod 47)]
 [term 18:REDUCE(with prod 47)] [term 28:REDUCE(with prod 47)]
 [term 29:REDUCE(with prod 47)] [term 30:REDUCE(with prod 47)]
 [term 32:REDUCE(with prod 47)] [term 33:REDUCE(with prod 47)]
 [term 39:REDUCE(with prod 47)] [term 40:REDUCE(with prod 47)]
 [term 41:REDUCE(with prod 47)] [term 42:REDUCE(with prod 47)]
 [term 49:REDUCE(with prod 47)]
From state #214
 [term 27:SHIFT(to state 221)]
From state #215
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 35:SHIFT(to state 216)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #216
 [term 39:SHIFT(to state 217)]
From state #217
 [term 27:SHIFT(to state 218)]
From state #218
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #219
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 36:SHIFT(to state 220)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #220
 [term 5:REDUCE(with prod 33)] [term 6:REDUCE(with prod 33)]
 [term 7:REDUCE(with prod 33)] [term 8:REDUCE(with prod 33)]
 [term 9:REDUCE(with prod 33)] [term 10:REDUCE(with prod 33)]
 [term 11:REDUCE(with prod 33)] [term 14:REDUCE(with prod 33)]
 [term 18:REDUCE(with prod 33)] [term 28:REDUCE(with prod 33)]
 [term 29:REDUCE(with prod 33)] [term 30:REDUCE(with prod 33)]
 [term 32:REDUCE(with prod 33)] [term 33:REDUCE(with prod 33)]
 [term 39:REDUCE(with prod 33)] [term 40:REDUCE(with prod 33)]
 [term 41:REDUCE(with prod 33)] [term 42:REDUCE(with prod 33)]
 [term 49:REDUCE(with prod 33)]
From state #221
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #222
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 36:SHIFT(to state 223)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #223
 [term 5:REDUCE(with prod 32)] [term 6:REDUCE(with prod 32)]
 [term 7:REDUCE(with prod 32)] [term 8:REDUCE(with prod 32)]
 [term 9:REDUCE(with prod 32)] [term 10:REDUCE(with prod 32)]
 [term 11:REDUCE(with prod 32)] [term 14:REDUCE(with prod 32)]
 [term 18:REDUCE(with prod 32)] [term 28:REDUCE(with prod 32)]
 [term 29:REDUCE(with prod 32)] [term 30:REDUCE(with prod 32)]
 [term 32:REDUCE(with prod 32)] [term 33:REDUCE(with prod 32)]
 [term 39:REDUCE(with prod 32)] [term 40:REDUCE(with prod 32)]
 [term 41:REDUCE(with prod 32)] [term 42:REDUCE(with prod 32)]
 [term 49:REDUCE(with prod 32)]
From state #224
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #225
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 31:SHIFT(to state 226)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #226
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #227
 [term 5:REDUCE(with prod 35)] [term 6:SHIFT(to state 228)]
 [term 7:REDUCE(with prod 35)] [term 8:REDUCE(with prod 35)]
 [term 9:REDUCE(with prod 35)] [term 10:REDUCE(with prod 35)]
 [term 11:REDUCE(with prod 35)] [term 14:REDUCE(with prod 35)]
 [term 18:REDUCE(with prod 35)] [term 28:REDUCE(with prod 35)]
 [term 29:REDUCE(with prod 35)] [term 30:REDUCE(with prod 35)]
 [term 32:REDUCE(with prod 35)] [term 33:REDUCE(with prod 35)]
 [term 39:REDUCE(with prod 35)] [term 40:REDUCE(with prod 35)]
 [term 41:REDUCE(with prod 35)] [term 42:REDUCE(with prod 35)]
 [term 49:REDUCE(with prod 35)]
From state #228
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #229
 [term 5:REDUCE(with prod 34)] [term 6:REDUCE(with prod 34)]
 [term 7:REDUCE(with prod 34)] [term 8:REDUCE(with prod 34)]
 [term 9:REDUCE(with prod 34)] [term 10:REDUCE(with prod 34)]
 [term 11:REDUCE(with prod 34)] [term 14:REDUCE(with prod 34)]
 [term 18:REDUCE(with prod 34)] [term 28:REDUCE(with prod 34)]
 [term 29:REDUCE(with prod 34)] [term 30:REDUCE(with prod 34)]
 [term 32:REDUCE(with prod 34)] [term 33:REDUCE(with prod 34)]
 [term 39:REDUCE(with prod 34)] [term 40:REDUCE(with prod 34)]
 [term 41:REDUCE(with prod 34)] [term 42:REDUCE(with prod 34)]
 [term 49:REDUCE(with prod 34)]
From state #230
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 36:SHIFT(to state 231)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #231
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 36:SHIFT(to state 247)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #232
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 36:SHIFT(to state 233)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #233
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 36:SHIFT(to state 234)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #234
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 31:SHIFT(to state 242)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #235
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 36:SHIFT(to state 236)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #236
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 31:SHIFT(to state 237)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #237
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #238
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 31:SHIFT(to state 239)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #239
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #240
 [term 5:REDUCE(with prod 44)] [term 6:REDUCE(with prod 44)]
 [term 7:REDUCE(with prod 44)] [term 8:REDUCE(with prod 44)]
 [term 9:REDUCE(with prod 44)] [term 10:REDUCE(with prod 44)]
 [term 11:REDUCE(with prod 44)] [term 14:REDUCE(with prod 44)]
 [term 18:REDUCE(with prod 44)] [term 28:REDUCE(with prod 44)]
 [term 29:REDUCE(with prod 44)] [term 30:REDUCE(with prod 44)]
 [term 32:REDUCE(with prod 44)] [term 33:REDUCE(with prod 44)]
 [term 39:REDUCE(with prod 44)] [term 40:REDUCE(with prod 44)]
 [term 41:REDUCE(with prod 44)] [term 42:REDUCE(with prod 44)]
 [term 49:REDUCE(with prod 44)]
From state #241
 [term 5:REDUCE(with prod 41)] [term 6:REDUCE(with prod 41)]
 [term 7:REDUCE(with prod 41)] [term 8:REDUCE(with prod 41)]
 [term 9:REDUCE(with prod 41)] [term 10:REDUCE(with prod 41)]
 [term 11:REDUCE(with prod 41)] [term 14:REDUCE(with prod 41)]
 [term 18:REDUCE(with prod 41)] [term 28:REDUCE(with prod 41)]
 [term 29:REDUCE(with prod 41)] [term 30:REDUCE(with prod 41)]
 [term 32:REDUCE(with prod 41)] [term 33:REDUCE(with prod 41)]
 [term 39:REDUCE(with prod 41)] [term 40:REDUCE(with prod 41)]
 [term 41:REDUCE(with prod 41)] [term 42:REDUCE(with prod 41)]
 [term 49:REDUCE(with prod 41)]
From state #242
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #243
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 31:SHIFT(to state 244)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #244
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #245
 [term 5:REDUCE(with prod 42)] [term 6:REDUCE(with prod 42)]
 [term 7:REDUCE(with prod 42)] [term 8:REDUCE(with prod 42)]
 [term 9:REDUCE(with prod 42)] [term 10:REDUCE(with prod 42)]
 [term 11:REDUCE(with prod 42)] [term 14:REDUCE(with prod 42)]
 [term 18:REDUCE(with prod 42)] [term 28:REDUCE(with prod 42)]
 [term 29:REDUCE(with prod 42)] [term 30:REDUCE(with prod 42)]
 [term 32:REDUCE(with prod 42)] [term 33:REDUCE(with prod 42)]
 [term 39:REDUCE(with prod 42)] [term 40:REDUCE(with prod 42)]
 [term 41:REDUCE(with prod 42)] [term 42:REDUCE(with prod 42)]
 [term 49:REDUCE(with prod 42)]
From state #246
 [term 5:REDUCE(with prod 38)] [term 6:REDUCE(with prod 38)]
 [term 7:REDUCE(with prod 38)] [term 8:REDUCE(with prod 38)]
 [term 9:REDUCE(with prod 38)] [term 10:REDUCE(with prod 38)]
 [term 11:REDUCE(with prod 38)] [term 14:REDUCE(with prod 38)]
 [term 18:REDUCE(with prod 38)] [term 28:REDUCE(with prod 38)]
 [term 29:REDUCE(with prod 38)] [term 30:REDUCE(with prod 38)]
 [term 32:REDUCE(with prod 38)] [term 33:REDUCE(with prod 38)]
 [term 39:REDUCE(with prod 38)] [term 40:REDUCE(with prod 38)]
 [term 41:REDUCE(with prod 38)] [term 42:REDUCE(with prod 38)]
 [term 49:REDUCE(with prod 38)]
From state #247
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 31:SHIFT(to state 255)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #248
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 36:SHIFT(to state 249)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #249
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 31:SHIFT(to state 250)] [term 39:SHIFT(to state 41)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #250
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #251
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 31:SHIFT(to state 252)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #252
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #253
 [term 5:REDUCE(with prod 43)] [term 6:REDUCE(with prod 43)]
 [term 7:REDUCE(with prod 43)] [term 8:REDUCE(with prod 43)]
 [term 9:REDUCE(with prod 43)] [term 10:REDUCE(with prod 43)]
 [term 11:REDUCE(with prod 43)] [term 14:REDUCE(with prod 43)]
 [term 18:REDUCE(with prod 43)] [term 28:REDUCE(with prod 43)]
 [term 29:REDUCE(with prod 43)] [term 30:REDUCE(with prod 43)]
 [term 32:REDUCE(with prod 43)] [term 33:REDUCE(with prod 43)]
 [term 39:REDUCE(with prod 43)] [term 40:REDUCE(with prod 43)]
 [term 41:REDUCE(with prod 43)] [term 42:REDUCE(with prod 43)]
 [term 49:REDUCE(with prod 43)]
From state #254
 [term 5:REDUCE(with prod 39)] [term 6:REDUCE(with prod 39)]
 [term 7:REDUCE(with prod 39)] [term 8:REDUCE(with prod 39)]
 [term 9:REDUCE(with prod 39)] [term 10:REDUCE(with prod 39)]
 [term 11:REDUCE(with prod 39)] [term 14:REDUCE(with prod 39)]
 [term 18:REDUCE(with prod 39)] [term 28:REDUCE(with prod 39)]
 [term 29:REDUCE(with prod 39)] [term 30:REDUCE(with prod 39)]
 [term 32:REDUCE(with prod 39)] [term 33:REDUCE(with prod 39)]
 [term 39:REDUCE(with prod 39)] [term 40:REDUCE(with prod 39)]
 [term 41:REDUCE(with prod 39)] [term 42:REDUCE(with prod 39)]
 [term 49:REDUCE(with prod 39)]
From state #255
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #256
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 31:SHIFT(to state 257)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #257
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 39:SHIFT(to state 190)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #258
 [term 5:REDUCE(with prod 40)] [term 6:REDUCE(with prod 40)]
 [term 7:REDUCE(with prod 40)] [term 8:REDUCE(with prod 40)]
 [term 9:REDUCE(with prod 40)] [term 10:REDUCE(with prod 40)]
 [term 11:REDUCE(with prod 40)] [term 14:REDUCE(with prod 40)]
 [term 18:REDUCE(with prod 40)] [term 28:REDUCE(with prod 40)]
 [term 29:REDUCE(with prod 40)] [term 30:REDUCE(with prod 40)]
 [term 32:REDUCE(with prod 40)] [term 33:REDUCE(with prod 40)]
 [term 39:REDUCE(with prod 40)] [term 40:REDUCE(with prod 40)]
 [term 41:REDUCE(with prod 40)] [term 42:REDUCE(with prod 40)]
 [term 49:REDUCE(with prod 40)]
From state #259
 [term 5:REDUCE(with prod 37)] [term 6:REDUCE(with prod 37)]
 [term 7:REDUCE(with prod 37)] [term 8:REDUCE(with prod 37)]
 [term 9:REDUCE(with prod 37)] [term 10:REDUCE(with prod 37)]
 [term 11:REDUCE(with prod 37)] [term 14:REDUCE(with prod 37)]
 [term 18:REDUCE(with prod 37)] [term 28:REDUCE(with prod 37)]
 [term 29:REDUCE(with prod 37)] [term 30:REDUCE(with prod 37)]
 [term 32:REDUCE(with prod 37)] [term 33:REDUCE(with prod 37)]
 [term 39:REDUCE(with prod 37)] [term 40:REDUCE(with prod 37)]
 [term 41:REDUCE(with prod 37)] [term 42:REDUCE(with prod 37)]
 [term 49:REDUCE(with prod 37)]
From state #260
 [term 31:REDUCE(with prod 19)] [term 37:REDUCE(with prod 19)]
 [term 39:REDUCE(with prod 19)]
From state #261
 [term 35:SHIFT(to state 262)]
From state #262
 [term 39:SHIFT(to state 263)]
From state #263
 [term 31:REDUCE(with prod 20)] [term 37:REDUCE(with prod 20)]
 [term 39:REDUCE(with prod 20)]
From state #264
 [term 33:REDUCE(with prod 12)] [term 39:REDUCE(with prod 12)]
From state #265
 [term 31:REDUCE(with prod 16)] [term 39:REDUCE(with prod 16)]
From state #266
 [term 10:SHIFT(to state 45)] [term 14:SHIFT(to state 32)]
 [term 18:SHIFT(to state 36)] [term 28:SHIFT(to state 31)]
 [term 29:SHIFT(to state 29)] [term 30:SHIFT(to state 28)]
 [term 39:SHIFT(to state 41)] [term 40:SHIFT(to state 44)]
 [term 41:SHIFT(to state 56)] [term 42:SHIFT(to state 58)]
 [term 49:SHIFT(to state 54)]
From state #267
 [term 12:SHIFT(to state 81)] [term 13:SHIFT(to state 68)]
 [term 14:SHIFT(to state 76)] [term 15:SHIFT(to state 61)]
 [term 16:SHIFT(to state 75)] [term 17:SHIFT(to state 82)]
 [term 19:SHIFT(to state 64)] [term 20:SHIFT(to state 69)]
 [term 21:SHIFT(to state 78)] [term 22:SHIFT(to state 66)]
 [term 23:SHIFT(to state 65)] [term 24:SHIFT(to state 80)]
 [term 25:SHIFT(to state 72)] [term 26:SHIFT(to state 62)]
 [term 28:SHIFT(to state 67)] [term 29:SHIFT(to state 71)]
 [term 36:SHIFT(to state 268)] [term 38:SHIFT(to state 77)]
 [term 43:SHIFT(to state 74)] [term 44:SHIFT(to state 73)]
 [term 45:SHIFT(to state 83)] [term 46:SHIFT(to state 70)]
 [term 47:SHIFT(to state 79)] [term 48:SHIFT(to state 63)]
From state #268
 [term 33:REDUCE(with prod 14)] [term 39:REDUCE(with prod 14)]
From state #269
 [term 31:SHIFT(to state 270)] [term 39:SHIFT(to state 179)]
From state #270
 [term 32:SHIFT(to state 271)]
From state #271
 [term 5:REDUCE(with prod 21)] [term 7:REDUCE(with prod 21)]
 [term 8:REDUCE(with prod 21)] [term 9:REDUCE(with prod 21)]
 [term 10:REDUCE(with prod 21)] [term 11:REDUCE(with prod 21)]
 [term 14:REDUCE(with prod 21)] [term 18:REDUCE(with prod 21)]
 [term 28:REDUCE(with prod 21)] [term 29:REDUCE(with prod 21)]
 [term 30:REDUCE(with prod 21)] [term 32:REDUCE(with prod 21)]
 [term 33:REDUCE(with prod 21)] [term 39:REDUCE(with prod 21)]
 [term 40:REDUCE(with prod 21)] [term 41:REDUCE(with prod 21)]
 [term 42:REDUCE(with prod 21)] [term 49:REDUCE(with prod 21)]
From state #272
 [term 5:SHIFT(to state 189)] [term 7:SHIFT(to state 198)]
 [term 8:SHIFT(to state 187)] [term 9:SHIFT(to state 196)]
 [term 10:SHIFT(to state 45)] [term 11:SHIFT(to state 193)]
 [term 14:SHIFT(to state 32)] [term 18:SHIFT(to state 36)]
 [term 28:SHIFT(to state 31)] [term 29:SHIFT(to state 29)]
 [term 30:SHIFT(to state 28)] [term 32:SHIFT(to state 197)]
 [term 33:SHIFT(to state 273)] [term 39:SHIFT(to state 190)]
 [term 40:SHIFT(to state 44)] [term 41:SHIFT(to state 56)]
 [term 42:SHIFT(to state 58)] [term 49:SHIFT(to state 54)]
From state #273
 [term 33:REDUCE(with prod 10)] [term 39:REDUCE(with prod 10)]
From state #274
 [term 33:SHIFT(to state 275)] [term 39:SHIFT(to state 11)]
From state #275
 [term 0:REDUCE(with prod 4)] [term 3:REDUCE(with prod 4)]
From state #276
 [term 0:REDUCE(with prod 1)]
From state #277
 [term 0:REDUCE(with prod 3)] [term 3:REDUCE(with prod 3)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 1->state 2] [non term 2->state 1] [non term 3->state 3]
From state #1
 [non term 3->state 277]
From state #2
From state #3
From state #4
From state #5
From state #6
 [non term 4->state 274]
From state #7
From state #8
From state #9
 [non term 4->state 10]
From state #10
 [non term 5->state 14] [non term 6->state 15] [non term 7->state 13]
From state #11
From state #12
From state #13
From state #14
From state #15
From state #16
From state #17
From state #18
From state #19
From state #20
From state #21
 [non term 8->state 178]
From state #22
 [non term 13->state 53] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #23
From state #24
From state #25
From state #26
From state #27
From state #28
 [non term 13->state 166] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #29
 [non term 13->state 164] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #30
From state #31
 [non term 13->state 163] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #32
 [non term 13->state 162] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #33
From state #34
From state #35
From state #36
 [non term 13->state 161] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #37
From state #38
From state #39
From state #40
From state #41
From state #42
From state #43
From state #44
From state #45
From state #46
From state #47
From state #48
From state #49
From state #50
From state #51
From state #52
From state #53
From state #54
 [non term 13->state 60] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #55
From state #56
From state #57
From state #58
From state #59
From state #60
From state #61
 [non term 13->state 111] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #62
 [non term 13->state 110] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #63
 [non term 13->state 109] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #64
 [non term 13->state 108] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #65
 [non term 13->state 107] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #66
 [non term 13->state 106] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #67
From state #68
 [non term 13->state 105] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #69
 [non term 13->state 104] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #70
 [non term 13->state 103] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #71
From state #72
 [non term 13->state 102] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #73
 [non term 13->state 101] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #74
 [non term 13->state 100] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #75
 [non term 13->state 99] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #76
 [non term 13->state 98] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #77
From state #78
 [non term 13->state 91] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #79
 [non term 13->state 90] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #80
 [non term 13->state 89] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #81
From state #82
 [non term 13->state 85] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #83
 [non term 13->state 84] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #84
From state #85
From state #86
From state #87
From state #88
From state #89
From state #90
From state #91
From state #92
From state #93
 [non term 12->state 94]
From state #94
 [non term 13->state 96] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #95
From state #96
From state #97
From state #98
From state #99
From state #100
From state #101
From state #102
From state #103
From state #104
From state #105
From state #106
From state #107
From state #108
From state #109
From state #110
From state #111
From state #112
From state #113
From state #114
 [non term 13->state 117] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #115
From state #116
From state #117
From state #118
From state #119
 [non term 13->state 160] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #120
 [non term 13->state 159] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #121
From state #122
 [non term 13->state 137] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #123
 [non term 13->state 136] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #124
 [non term 13->state 135] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #125
 [non term 13->state 134] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #126
 [non term 12->state 132]
From state #127
 [non term 13->state 128] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #128
From state #129
From state #130
 [non term 13->state 131] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #131
From state #132
 [non term 13->state 96] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #133
From state #134
From state #135
From state #136
From state #137
From state #138
From state #139
 [non term 13->state 158] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #140
 [non term 13->state 157] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #141
 [non term 13->state 156] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #142
 [non term 13->state 152] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #143
 [non term 13->state 151] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #144
 [non term 13->state 150] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #145
 [non term 12->state 148]
From state #146
 [non term 13->state 147] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #147
From state #148
 [non term 13->state 96] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #149
From state #150
From state #151
From state #152
From state #153
From state #154
 [non term 13->state 155] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #155
From state #156
From state #157
From state #158
From state #159
From state #160
From state #161
From state #162
From state #163
From state #164
From state #165
From state #166
From state #167
From state #168
From state #169
 [non term 13->state 128] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #170
From state #171
From state #172
 [non term 13->state 173] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #173
From state #174
From state #175
 [non term 13->state 176] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #176
From state #177
From state #178
 [non term 9->state 181]
From state #179
From state #180
From state #181
From state #182
From state #183
 [non term 10->state 184]
From state #184
 [non term 11->state 202] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #185
From state #186
From state #187
From state #188
From state #189
From state #190
From state #191
From state #192
From state #193
 [non term 13->state 212] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #194
From state #195
From state #196
From state #197
 [non term 10->state 208]
From state #198
From state #199
From state #200
From state #201
From state #202
From state #203
From state #204
 [non term 13->state 205] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #205
From state #206
 [non term 11->state 207] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #207
From state #208
 [non term 11->state 202] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #209
From state #210
From state #211
From state #212
From state #213
From state #214
From state #215
 [non term 13->state 128] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #216
From state #217
From state #218
 [non term 13->state 219] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #219
From state #220
From state #221
 [non term 13->state 222] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #222
From state #223
From state #224
 [non term 13->state 225] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #225
From state #226
 [non term 11->state 227] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #227
From state #228
 [non term 11->state 229] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #229
From state #230
 [non term 13->state 232] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #231
 [non term 13->state 248] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #232
From state #233
 [non term 13->state 235] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #234
 [non term 13->state 243] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #235
From state #236
 [non term 13->state 238] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #237
 [non term 11->state 241] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #238
From state #239
 [non term 11->state 240] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #240
From state #241
From state #242
 [non term 11->state 246] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #243
From state #244
 [non term 11->state 245] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #245
From state #246
From state #247
 [non term 13->state 256] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #248
From state #249
 [non term 13->state 251] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #250
 [non term 11->state 254] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #251
From state #252
 [non term 11->state 253] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #253
From state #254
From state #255
 [non term 11->state 259] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #256
From state #257
 [non term 11->state 258] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #258
From state #259
From state #260
From state #261
From state #262
From state #263
From state #264
From state #265
 [non term 8->state 269]
From state #266
 [non term 13->state 267] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #267
From state #268
From state #269
 [non term 9->state 181]
From state #270
From state #271
 [non term 10->state 272]
From state #272
 [non term 11->state 202] [non term 13->state 200] [non term 14->state 194]
 [non term 15->state 191] [non term 16->state 201] [non term 17->state 195]
 [non term 18->state 186] [non term 19->state 188] [non term 20->state 185]
 [non term 21->state 192] [non term 22->state 34] [non term 23->state 33]
 [non term 24->state 50] [non term 25->state 57] [non term 26->state 25]
 [non term 27->state 39] [non term 28->state 55] [non term 29->state 35]
 [non term 30->state 26] [non term 31->state 24] [non term 32->state 47]
 [non term 33->state 52] [non term 34->state 48] [non term 35->state 42]
 [non term 36->state 38] [non term 37->state 51] [non term 38->state 37]
 [non term 39->state 59] [non term 40->state 49] [non term 41->state 43]
 [non term 42->state 23] [non term 43->state 30] [non term 44->state 40]
 [non term 45->state 27] [non term 46->state 46]
From state #273
From state #274
 [non term 5->state 14] [non term 6->state 15] [non term 7->state 13]
From state #275
From state #276
From state #277
-----------------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 1 warning
  55 terminals, 47 non-terminals, and 134 productions declared, 
  producing 278 unique parse states.
  1 terminal declared but not used.
  0 non-terminal declared but not used.
  0 productions never reduced.
  0 conflicts detected (100 expected).
  Code written to "Parser.java", and "TokenIds.java".
---------------------------------------------------- (v0.10k)
