/*
 * File: parser.cup
 * Author: Tiffany Lam, Jenny Lin
 * Course: CS461
 * Project: 5
 * Date: April 28, 2017
 */

/* Bantam Java Compiler and Language Toolset.

   Copyright (C) 2009 by Marc Corliss (corliss@hws.edu) and 
                         David Furcy (furcyd@uwosh.edu) and
                         E Christopher Lewis (lewis@vmware.com).
   ALL RIGHTS RESERVED.

   The Bantam Java toolset is distributed under the following 
   conditions:

     You may make copies of the toolset for your own use and 
     modify those copies.

     All copies of the toolset must retain the author names and 
     copyright notice.

     You may not sell the toolset or distribute it in 
     conjunction with a commerical product or service without 
     the expressed written consent of the authors.

   THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS 
   OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE 
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
   PARTICULAR PURPOSE. 
*/

/* code below is copied to the file containing the bantam.parser */

package bantam.parser;

/* import the AST and utility class files */
import bantam.lexer.*;
import bantam.ast.*;
import bantam.util.ErrorHandler;

import java.util.Arrays;
import java.util.List;

/* import Symbol class, which represents the type of token passed
   from the bantam.lexer to the bantam.parser.  Note: in the bantam.lexer package there is
   a file Token.java that  defines a subclass of Symbol called Token,
   which is what is actually passed to the bantam.parser */
import java_cup.runtime.Symbol;

/* the code below is copied to the class containing the context-free
   grammar productions */
action code {:
    /** object for error handling */
    private ErrorHandler errorHandler = new ErrorHandler();

    /** object for an empty string spacing */
    private Other emptyStringSpacing = new Other(-1, "");

    /* sets the error handler */
    public ErrorHandler getErrorHandler() {
	return errorHandler;
    }

    /* returns the current line number from the scanner */
    public int getCurrLineNum() {
	return ((Lexer)parser.getScanner()).getCurrLineNum();
    }

    /* returns the current file name from the scanner */
    public String getCurrFilename() {
	return ((Lexer)parser.getScanner()).getCurrFilename();
    }

    /**
     * adds provided Others to expr's Other's list
     *
     * @param expr Expression to add Others to
     * @param start Other to add to start of expr's Others list
     * @param end Other to append to expr's Others list
     */
    public void addOthersToExpr(Expr expr, Other start, Other end) {
        expr.getCommentAndSpacingList().add(0, start);
        expr.addCommentAndSpacing(end);
    }

    public void addToStartOfOther(Other parent, Other newOther) {
        if(parent.getCommentAndSpacingList() != null){
            parent.getCommentAndSpacingList().add(0, newOther);
        }
        else{
            parent.addCommentAndSpacing(newOther);
        }
    }

    /**
     * adds left and right parenthesis to the first and last other
     *
     * @param expr Expression to parentheses Others to
     * @param leftOther spacing and comment after the left parenthesis
     * @param rightOther spacing and comment in front of the right parenthesis
     */
    public void addParenToExpr(Expr expr, Other leftOther, Other rightOther){
        List<Other> commentAndSpacingList = expr.getCommentAndSpacingList();
        Other leftParen = new Other(expr.getLineNum(), "(");
        Other rightParen = new Other(expr.getLineNum(), ")");

        //set the parentheses as wrappers
        leftParen.setWrapper();
        rightParen.setWrapper();
        leftParen.addCommentAndSpacing(leftOther);
        rightParen.addCommentAndSpacing(rightOther);

        //add wrappers to the expr
        if(commentAndSpacingList == null) {
            expr.addCommentAndSpacingToFront(leftParen);
            expr.addCommentAndSpacing(rightParen);
        }
        //there's no wrappers for the expr yet so just add the wrappers to the expr
        else if(!commentAndSpacingList.get(0).isExprWrapper()) {
            expr.addCommentAndSpacingToFront(leftParen);
            expr.addCommentAndSpacing(rightParen);
        }
        //add the left and right parens to the wrappers
        else{
            Other startWrapper = commentAndSpacingList.get(0);
            Other endWrapper = commentAndSpacingList.remove(commentAndSpacingList.size()-1);

            //add left paren to the end of start wrapper
            startWrapper.addCommentAndSpacing(leftParen);

            //add end wrapper to the end of right paren and add right paren to expr
            rightParen.addCommentAndSpacing(endWrapper);
            expr.addCommentAndSpacing(rightParen);
        }
    }

:}

/* code below is copied to the Parser class, which drives parsing */
parser code {:
/*
 * File: Parser.java
 * Author: Tiffany Lam, Jenny Lin
 * Course: CS461
 * Project: Project: 5
 * Date: April 28, 2017
 */

    /**
     * @return the ErrorHandler for this Parser
     */
    public ErrorHandler getErrorHandler() { return action_obj.getErrorHandler(); }

    /** overrides done_parsing in inherited class, called when parsing finishes
      * either after accepting or because of errors
      * */
    public void done_parsing() {
	super.done_parsing();
	// if lexing and/or parsing errors then exit
	action_obj.getErrorHandler().checkErrors();
    }

    /** overrides syntax_error in inherited class and handles syntax errors
      * @param curr current symbol from the bantam.lexer
      * */
    public void syntax_error(Symbol curr) {
	// get token value from the symbol
	Token t = (Token)curr.value;

	// get the error handler object
	ErrorHandler errorHandler = action_obj.getErrorHandler();

	// may want to modify and augment the code below for more
	// accurate error reporting
	errorHandler.register(errorHandler.PARSE_ERROR, action_obj.getCurrFilename(),
			      action_obj.getCurrLineNum(),
			      "unexpected input near '" + t.getLexeme() + "'");
    }

    /** override error_sync_size in inherited class and
      * change the minimum number of tokens to skip on an error from 3 to 2
      * @return minimum number of tokens to skip on an error
      * */
    protected int error_sync_size() {
	return 2;
    }
:}

/* list of terminals, which correspond to tokens returned by the bantam.lexer
 */
terminal Token LEX_ERROR;
terminal Token CLASS, EXTENDS, IF, ELSE, WHILE, FOR, BREAK, NEW, RETURN, INSTANCEOF;
terminal Token PLUS, MINUS, TIMES, DIVIDE, MODULUS, NOT, AND, OR;
terminal Token EQ, NE, LT, LEQ, GT, GEQ, ASSIGN, INCR, DECR;
terminal Token LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE;
terminal Token SEMI, COMMA, DOT;
terminal Token ID, INT_CONST, BOOLEAN_CONST, STRING_CONST;
terminal Token COMMENT, SPACING;
terminal Token SIGNEDLEFTSHIFT, SIGNEDRIGHTSHIFT, UNSIGNEDRIGHTSHIFT;
terminal Token BITOR, BITXOR, BITAND;

/* list of non-terminals used in context-free grammar
   format: nonterminal <type> <list of nonterminal names>
   example: nonterminal Expr expr1, expr2
   The type specifies what type of result the non-terminal will return
   The type should correspond to a class name from the AST
*/
nonterminal Program program;
nonterminal ClassList class_list;
nonterminal Class_ class;
nonterminal MemberList member_list;
nonterminal Member member;
nonterminal Method method;
nonterminal Field field;
nonterminal FormalList formal_list;
nonterminal Formal formal;
nonterminal StmtList stmt_list;
nonterminal Stmt stmt;
nonterminal ExprList expr_list;
nonterminal Expr expr;
nonterminal ExprStmt expr_stmt;
nonterminal DeclStmt decl_stmt;
nonterminal IfStmt if_stmt;
nonterminal WhileStmt while_stmt;
nonterminal ForStmt for_stmt;
nonterminal BreakStmt break_stmt;
nonterminal ReturnStmt ret_stmt;
nonterminal BlockStmt block_stmt;
nonterminal AssignExpr assign_expr;
nonterminal ArrayAssignExpr arr_assign_expr;
nonterminal DispatchExpr dispatch_expr;
nonterminal NewExpr new_expr;
nonterminal NewArrayExpr new_arr_expr;
nonterminal InstanceofExpr instanceof_expr;
nonterminal CastExpr cast_expr;
nonterminal BinaryExpr binary_expr;
nonterminal BinaryArithExpr binary_arith_expr;
nonterminal BinaryCompExpr binary_comp_expr;
nonterminal BinaryLogicExpr binary_logic_expr;
nonterminal UnaryExpr unary_expr;
nonterminal UnaryNegExpr unary_neg_expr;
nonterminal UnaryNotExpr unary_not_expr;
nonterminal UnaryIncrExpr unary_incr_expr;
nonterminal UnaryDecrExpr unary_decr_expr;
nonterminal ConstExpr const_expr;
nonterminal VarExpr var_expr;
nonterminal ArrayExpr arr_expr;
nonterminal Other other;


/* precedence/associativity rules
   format: precedence <associativity> <list of terminals>
   example: precedence right ASSIGN
   precedence specified by order (from lowest to highest)
   note: use a single precedence rule for terminals with same precedence
   associativity specified by middle operand (left, right, none)
*/
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left BITOR;
precedence left BITXOR;
precedence left BITAND;
precedence left EQ, NE;
precedence left INSTANCEOF, LT, LEQ, GT, GEQ;
precedence left SIGNEDLEFTSHIFT, SIGNEDRIGHTSHIFT, UNSIGNEDRIGHTSHIFT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULUS;
precedence right INCR, DECR, NOT;
precedence left DOT, LPAREN, RPAREN, LSQBRACE, RSQBRACE;
precedence left ELSE;
precedence left COMMENT, SPACING;

/* program, which is simply a list of classes */
program
	::=
	    class_list:cl other:o
	        {:  Program p = new Program(0, cl);
	            p.addCommentAndSpacing(o);
	            RESULT = p; :}
        | class_list:cl
            {:  Program p = new Program(0, cl);
                p.addCommentAndSpacing(emptyStringSpacing);
                RESULT = p; :}
    ;

other
    ::=
        other:o COMMENT:c
            {:  o.addCommentAndSpacing(new Other(getCurrLineNum(), c.getName()));
                RESULT = o; :}
        | other:o SPACING:s
            {:  o.addCommentAndSpacing(new Other(getCurrLineNum(), s.getName()));
                RESULT = o; :}
        | COMMENT:c
            {: RESULT = new Other(getCurrLineNum(), c.getName()); :}
        | SPACING:s
            {: RESULT = new Other(getCurrLineNum(), s.getName()); :}
    ;

/* list of classes (must be at least one class in program) */
class_list
    ::=
        /* single class */
        class:c
            {:  ClassList cl = (ClassList)(new ClassList(0)).addElement(c);
                cl.addCommentAndSpacing(emptyStringSpacing);
                RESULT = cl; :}
        | other:o class:c
            {:  ClassList cl = (ClassList)(new ClassList(0)).addElement(c);
                cl.addCommentAndSpacing(o);
                RESULT = cl; :}
        /* several classes */
        | class_list:cl class:c
            {:  cl.addCommentAndSpacing(emptyStringSpacing);
                RESULT = (ClassList)cl.addElement(c); :}
        | class_list:cl other:o class:c
            {:  cl.addCommentAndSpacing(o);
                RESULT = (ClassList)cl.addElement(c); :}

	;

/* a single class */
class
    ::=
        /* class with no specified parent - uses Object class */
        CLASS:t other:o1 ID:name other:o2 LBRACE member_list:ml RBRACE
            {:  Class_ c = new Class_(t.getLineNum(), getCurrFilename(),
                    name.getName(), "Object", ml);
                c.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = c; :}
        | CLASS:t other:o1 ID:name LBRACE member_list:ml RBRACE
            {:  Class_ c = new Class_(t.getLineNum(), getCurrFilename(),
                    name.getName(), "Object", ml);
                c.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = c; :}
        /* class with a specified parent */
        | CLASS:t other:o1 ID:name other:o2 EXTENDS other:o3 ID:parent other:o4
            LBRACE member_list:ml RBRACE
            {:  Class_ c = new Class_(t.getLineNum(), getCurrFilename(),
                    name.getName(), parent.getName(), ml);
                c.addCommentAndSpacing(Arrays.asList(o1, o2, o3, o4));
                RESULT = c; :}
        | CLASS:t other:o1 ID:name other:o2 EXTENDS other:o3 ID:parent
            LBRACE member_list:ml RBRACE
            {:  Class_ c = new Class_(t.getLineNum(), getCurrFilename(),
                    name.getName(), parent.getName(), ml);
                c.addCommentAndSpacing(
                    Arrays.asList(o1, o2, o3, emptyStringSpacing));
                RESULT = c; :}
	;

/* member list */
member_list
    ::=
        /* no member */
            {:  MemberList ml = new MemberList(getCurrLineNum());
                ml.addCommentAndSpacing(emptyStringSpacing);
                RESULT = ml; :}
        | other:o
            {:  MemberList ml = new MemberList(getCurrLineNum());
                ml.addCommentAndSpacing(o);
                RESULT = ml; :}
        /* several members */
        | member_list:ml member:m
            {:  ml.addCommentAndSpacing(emptyStringSpacing);
                RESULT = (MemberList)ml.addElement(m); :}
        | member_list:ml member:m other:o
            {:  ml.addCommentAndSpacing(o);
                RESULT = (MemberList)ml.addElement(m); :}
	;

/* member */
member
    ::=
        method:m    {: RESULT = m; :}
        | field:f   {: RESULT = f; :}
    ;

/* method */
method
    ::=
        /* method */
        ID:retTyp other:o1 ID:name other:o2 LPAREN formal_list:fl RPAREN other:o3
            LBRACE stmt_list:sl RBRACE
            {:  Method m = new Method(getCurrLineNum(), retTyp.getName(),
                    name.getName(), fl, sl);
                m.addCommentAndSpacing(Arrays.asList(o1, o2, o3));
                RESULT = m; :}
        | ID:retTyp other:o1 ID:name other:o2 LPAREN formal_list:fl RPAREN
            LBRACE stmt_list:sl RBRACE
            {:  Method m = new Method(getCurrLineNum(), retTyp.getName(),
                    name.getName(), fl, sl);
                m.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing));
                RESULT = m; :}
        | ID:retTyp other:o1 ID:name LPAREN formal_list:fl RPAREN other:o3
            LBRACE stmt_list:sl RBRACE
            {:  Method m = new Method(getCurrLineNum(), retTyp.getName(),
                    name.getName(), fl, sl);
                m.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3));
                RESULT = m; :}
        | ID:retTyp other:o1 ID:name LPAREN formal_list:fl RPAREN
            LBRACE stmt_list:sl RBRACE
            {:  Method m = new Method(getCurrLineNum(), retTyp.getName(),
                    name.getName(), fl, sl);
                m.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing));
                RESULT = m; :}
        /* method with array return type */
        | ID:retTyp LSQBRACE RSQBRACE ID:name LPAREN formal_list:fl RPAREN LBRACE stmt_list:sl RBRACE
            {: RESULT = new Method(getCurrLineNum(), retTyp.getName()+"[]",
                name.getName(), fl, sl); :}
    ;

/* field */
field
    ::=
        /* uninitialized field w/o []*/
        ID:type other:o1 ID:name other:o2 SEMI
            {:  Field f = new Field(getCurrLineNum(), type.getName(),
                    name.getName(), null);
                f.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = f; :}
        | ID:type other:o1 ID:name SEMI
            {:  Field f = new Field(getCurrLineNum(), type.getName(),
                    name.getName(), null);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = f; :}
        /* uninitialized field w/ []*/
        | ID:type LSQBRACE RSQBRACE ID:name SEMI
            {: RESULT = new Field(getCurrLineNum(), type.getName()+"[]",
                name.getName(), null); :}
        /* initialized field w/o []*/
        | ID:type other:o1 ID:name ASSIGN expr:expression SEMI
            {:  Field f = new Field(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | ID:type other:o1 ID:name other:o2 ASSIGN expr:expression SEMI
            {:  Field f = new Field(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                    emptyStringSpacing));
                RESULT = f; :}
        | ID:type other:o1 ID:name ASSIGN other:o3 expr:expression SEMI
            {:  Field f = new Field(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                    emptyStringSpacing));
                RESULT = f; :}
        | ID:type other:o1 ID:name ASSIGN expr:expression other:o4 SEMI
            {:  Field f = new Field(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, o4));
                RESULT = f; :}
        | ID:type other:o1 ID:name other:o2 ASSIGN other:o3 expr:expression SEMI
            {:  Field f = new Field(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, o3, emptyStringSpacing));
                RESULT = f; :}
        | ID:type other:o1 ID:name other:o2 ASSIGN expr:expression other:o4 SEMI
            {:  Field f = new Field(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing, o4));
                RESULT = f; :}
        | ID:type other:o1 ID:name ASSIGN other:o3 expr:expression other:o4 SEMI
            {:  Field f = new Field(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3, o4));
                RESULT = f; :}
        | ID:type other:o1 ID:name other:o2 ASSIGN other:o3 expr:expression other:o4 SEMI
            {:  Field f = new Field(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, o3, o4));
                RESULT = f; :}
        /* initialized field w/ []*/
        | ID:type LSQBRACE RSQBRACE ID:name ASSIGN expr:expression SEMI
            {: RESULT = new Field(getCurrLineNum(), type.getName()+"[]",
                name.getName(), expression); :}
    ;

/* formal list */
formal_list
    ::=
        /* no formal */
            {: RESULT = new FormalList(getCurrLineNum()); :}
        | other:o
            {:  FormalList fl = new FormalList(getCurrLineNum());
                fl.addCommentAndSpacing(o);
                RESULT = fl; :}
        /* one or more formals */
        | formal_list:fl formal:f
            {: RESULT = (FormalList)fl.addElement(f); :}
        /* one or more formals separated by commas */
        | formal_list:fl formal:f COMMA
            {: RESULT = (FormalList)fl.addElement(f); :}
    ;

/* formal */
formal
    ::=
        /* normal type formal */
        other:o1 ID:type other:o2 ID:name other:o3
            {:  Formal f = new Formal(getCurrLineNum(), type.getName(), name.getName());
                f.addCommentAndSpacing(Arrays.asList(o1, o2, o3));
                RESULT = f; :}
        | other:o1 ID:type other:o2 ID:name
            {:  Formal f = new Formal(getCurrLineNum(), type.getName(), name.getName());
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing));
                RESULT = f; :}
        | ID:type other:o2 ID:name other:o3
            {:  Formal f = new Formal(getCurrLineNum(), type.getName(), name.getName());
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3));
                RESULT = f; :}
        | ID:type other:o2 ID:name
            {:  Formal f = new Formal(getCurrLineNum(), type.getName(), name.getName());
                f.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing));
                RESULT = f; :}
        /* array type formal */
        | ID:type LSQBRACE RSQBRACE ID:name
            {: RESULT = new Formal(getCurrLineNum(),
                type.getName()+"[]", name.getName()); :}
    ;

/* statement list */
stmt_list
    ::=
        /* no statement */
            {: StmtList sl = new StmtList(getCurrLineNum());
               sl.addCommentAndSpacing(emptyStringSpacing);
               RESULT = sl; :}
        | other:o
            {:  StmtList sl = new StmtList(getCurrLineNum());
                sl.addCommentAndSpacing(o);
                RESULT = sl; :}
        /* several statements */
        | stmt_list:sl stmt:s
            {:  sl.addCommentAndSpacing(emptyStringSpacing);
                RESULT = (StmtList)sl.addElement(s); :}
        | stmt_list:sl stmt:s other:o
            {: sl.addCommentAndSpacing(o);
               RESULT = (StmtList)sl.addElement(s); :}
    ;

/* statement */
stmt
    ::=
        expr_stmt:exprStmt      {: RESULT = exprStmt; :}
        | decl_stmt:decStmt     {: RESULT = decStmt; :}
        | if_stmt:ifStmt        {: RESULT = ifStmt; :}
        | while_stmt:whileStmt  {: RESULT = whileStmt; :}
        | for_stmt:forStmt      {: RESULT = forStmt; :}
        | break_stmt:breakStmt  {: RESULT = breakStmt; :}
        | ret_stmt:retStmt      {: RESULT = retStmt; :}
        | block_stmt:blockStmt  {: RESULT = blockStmt; :}
    ;

/* expression statement */
expr_stmt
    ::=
        expr:expression SEMI
            {:  ExprStmt e = new ExprStmt(getCurrLineNum(), expression);
                e.addCommentAndSpacing(emptyStringSpacing);
                RESULT = e; :}
        | expr:expression other:o SEMI
            {:  ExprStmt e = new ExprStmt(getCurrLineNum(), expression);
                e.addCommentAndSpacing(o);
                RESULT = e; :} ;

/* declaration statement */
decl_stmt
    ::=
        ID:type other:o1 ID:name ASSIGN expr:expression SEMI
            {:  DeclStmt d = new DeclStmt(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                d.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing));
                RESULT = d; :}
        | ID:type other:o1 ID:name other:o2 ASSIGN expr:expression SEMI
            {:  DeclStmt d = new DeclStmt(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                d.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                    emptyStringSpacing));
                RESULT = d; :}
        | ID:type other:o1 ID:name ASSIGN other:o3 expr:expression SEMI
            {:  DeclStmt d = new DeclStmt(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                d.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                    emptyStringSpacing));
                RESULT = d; :}
        | ID:type other:o1 ID:name ASSIGN expr:expression other:o4 SEMI
            {:  DeclStmt d = new DeclStmt(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                d.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, o4));
                RESULT = d; :}
        | ID:type other:o1 ID:name other:o2 ASSIGN other:o3 expr:expression SEMI
            {:  DeclStmt d = new DeclStmt(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                d.addCommentAndSpacing(Arrays.asList(o1, o2, o3, emptyStringSpacing));
                RESULT = d; :}
        | ID:type other:o1 ID:name other:o2 ASSIGN expr:expression other:o4 SEMI
            {:  DeclStmt d = new DeclStmt(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                d.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing, o4));
                RESULT = d; :}
        | ID:type other:o1 ID:name ASSIGN other:o3 expr:expression other:o4 SEMI
            {:  DeclStmt d = new DeclStmt(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                d.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3, o4));
                RESULT = d; :}
        | ID:type other:o1 ID:name other:o2 ASSIGN other:o3 expr:expression other:o4 SEMI
            {:  DeclStmt d = new DeclStmt(getCurrLineNum(), type.getName(),
                    name.getName(), expression);
                d.addCommentAndSpacing(Arrays.asList(o1, o2, o3, o4));
                RESULT = d; :}
        | ID:type LSQBRACE RSQBRACE ID:name ASSIGN expr:expression SEMI
            {: DeclStmt d = new DeclStmt(getCurrLineNum(), type.getName()+"[]",
                name.getName(), expression);
                d.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = d; :}
    ;

/* if statement */
if_stmt
    ::=
        /* if with else statement */
        IF LPAREN expr:predExpr RPAREN stmt:thenStmt ELSE stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN stmt:thenStmt ELSE stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt ELSE stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN stmt:thenStmt other:o3 ELSE stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN stmt:thenStmt ELSE other:o4 stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN stmt:thenStmt ELSE stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt ELSE stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN stmt:thenStmt other:o3 ELSE stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN stmt:thenStmt ELSE other:o4 stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN stmt:thenStmt ELSE stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt other:o3 ELSE stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt ELSE other:o4 stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt ELSE stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN stmt:thenStmt other:o3 ELSE other:o4 stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        o4, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN stmt:thenStmt other:o3 ELSE stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        emptyStringSpacing, o5));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN stmt:thenStmt ELSE other:o4 stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        o4, o5));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt other:o3 ELSE stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt ELSE other:o4 stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt ELSE stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN stmt:thenStmt other:o3 ELSE other:o4 stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        o4, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN stmt:thenStmt other:o3 ELSE stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        emptyStringSpacing, o5));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN stmt:thenStmt ELSE other:o4 stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        o4, o5));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt other:o3 ELSE other:o4 stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        o4, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt other:o3 ELSE stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        emptyStringSpacing, o5));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt ELSE other:o4 stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        o4, o5));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN stmt:thenStmt other:o3 ELSE other:o4 stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        o4, o5));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt other:o3 ELSE other:o4 stmt:elseStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        o4, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt other:o3 ELSE stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        emptyStringSpacing, o5));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt ELSE other:o4 stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        o4, o5));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN stmt:thenStmt other:o3 ELSE other:o4 stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        o4, o5));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt other:o3 ELSE other:o4 stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        o4, o5));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt other:o3 ELSE other:o4 stmt:elseStmt other:o5
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt);
                i.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        o4, o5));
                RESULT = i; :}

        /* if with no else statement */
        | IF LPAREN expr:predExpr RPAREN stmt:thenStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, null);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN stmt:thenStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, null);
                i.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, null);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN stmt:thenStmt other:o3
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, null);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, null);
                i.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN stmt:thenStmt other:o3
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, null);
                i.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt other:o3
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, null);
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
        | IF other:o1 LPAREN expr:predExpr RPAREN other:o2 stmt:thenStmt other:o3
            {: IfStmt i = new IfStmt(getCurrLineNum(), predExpr, thenStmt, null);
                i.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = i; :}
    ;

/* while statement */
while_stmt
    ::=
        WHILE LPAREN expr:predExpr RPAREN stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing, emptyStringSpacing, emptyStringSpacing));
                RESULT = w; :}
        | WHILE other:o1 LPAREN expr:predExpr RPAREN stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing, emptyStringSpacing));
                RESULT = w; :}
        | WHILE LPAREN other:o2 expr:predExpr RPAREN stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2,
                    emptyStringSpacing, emptyStringSpacing, emptyStringSpacing));
                RESULT = w; :}
        | WHILE LPAREN expr:predExpr other:o3 RPAREN stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, o3, emptyStringSpacing, emptyStringSpacing));
                RESULT = w; :}
        | WHILE LPAREN expr:predExpr RPAREN other:o4 stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing, o4, emptyStringSpacing));
                RESULT = w; :}
        | WHILE LPAREN expr:predExpr RPAREN stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing, emptyStringSpacing, o5));
                RESULT = w; :}
        | WHILE other:o1 LPAREN other:o2 expr:predExpr RPAREN stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing));
                RESULT = w; :}
        | WHILE other:o1 LPAREN expr:predExpr other:o3 RPAREN stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                    emptyStringSpacing, emptyStringSpacing));
                RESULT = w; :}
        | WHILE other:o1 LPAREN expr:predExpr RPAREN other:o4 stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, o4, emptyStringSpacing));
                RESULT = w; :}
        | WHILE other:o1 LPAREN expr:predExpr RPAREN stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing, o5));
                RESULT = w; :}
        | WHILE LPAREN other:o2 expr:predExpr other:o3 RPAREN stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                    emptyStringSpacing, emptyStringSpacing));
                RESULT = w; :}
        | WHILE LPAREN other:o2 expr:predExpr RPAREN other:o4 stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2,
                    emptyStringSpacing, o4, emptyStringSpacing));
                RESULT = w; :}
        | WHILE LPAREN other:o2 expr:predExpr RPAREN stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2,
                    emptyStringSpacing, emptyStringSpacing, o5));
                RESULT = w; :}
        | WHILE LPAREN expr:predExpr other:o3 RPAREN other:o4 stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, o3, o4, emptyStringSpacing));
                RESULT = w; :}
        | WHILE LPAREN expr:predExpr other:o3 RPAREN stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, o3, emptyStringSpacing, o5));
                RESULT = w; :}
        | WHILE LPAREN expr:predExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing, o4, o5));
                RESULT = w; :}
        | WHILE other:o1 LPAREN other:o2 expr:predExpr other:o3 RPAREN stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                    emptyStringSpacing, emptyStringSpacing));
                RESULT = w; :}
        | WHILE other:o1 LPAREN other:o2 expr:predExpr RPAREN other:o4 stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                    o4, emptyStringSpacing));
                RESULT = w; :}
        | WHILE other:o1 LPAREN other:o2 expr:predExpr RPAREN stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                    emptyStringSpacing, o5));
                RESULT = w; :}
        | WHILE other:o1 LPAREN expr:predExpr other:o3 RPAREN other:o4 stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                    o4, emptyStringSpacing));
                RESULT = w; :}
        | WHILE other:o1 LPAREN expr:predExpr other:o3 RPAREN stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                    emptyStringSpacing, o5));
                RESULT = w; :}
        | WHILE other:o1 LPAREN expr:predExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, o4, o5));
                RESULT = w; :}
        | WHILE other:o1 LPAREN other:o2 expr:predExpr other:o3 RPAREN other:o4 stmt:bodyStmt
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, o2, o3, o4,
                    emptyStringSpacing));
                RESULT = w; :}
        | WHILE other:o1 LPAREN other:o2 expr:predExpr other:o3 RPAREN stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                    emptyStringSpacing, o5));
                RESULT = w; :}
        | WHILE other:o1 LPAREN other:o2 expr:predExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                    o4, o5));
                RESULT = w; :}
        | WHILE other:o1 LPAREN expr:predExpr other:o3 RPAREN other:o4 stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                    o4, o5));
                RESULT = w; :}
        | WHILE LPAREN other:o2 expr:predExpr other:o3 RPAREN other:o4 stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                    o4, o5));
                RESULT = w; :}
        | WHILE other:o1 LPAREN other:o2 expr:predExpr other:o3 RPAREN other:o4 stmt:bodyStmt other:o5
            {:  WhileStmt w = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt);
                w.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                    o4, o5));
                RESULT = w; :}
    ;

/* for statement */
for_stmt
    ::=
        /* for(;;) Stmt */
        FOR LPAREN SEMI SEMI RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI SEMI RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN SEMI SEMI RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN SEMI SEMI RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI SEMI RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI SEMI RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR LPAREN SEMI SEMI RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        o4, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI SEMI RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        o4, o5));
                RESULT = f; :}


        /* for(initExpr;;) Stmt */
        | FOR LPAREN expr:initExpr SEMI SEMI RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI SEMI RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI SEMI RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI SEMI RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI SEMI RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI SEMI RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI SEMI RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing,
                                                        o4, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI SEMI RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing,
                                                        o4, o5));
                RESULT = f; :}


        /* for(; predExpr;) Stmt */
        | FOR LPAREN SEMI other:o2 expr:predExpr SEMI RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI other:o2 expr:predExpr SEMI RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN SEMI other:o2 expr:predExpr SEMI RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN SEMI other:o2 expr:predExpr SEMI RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI other:o2 expr:predExpr SEMI RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI other:o2 expr:predExpr SEMI RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR LPAREN SEMI other:o2 expr:predExpr SEMI RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        o4, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI other:o2 expr:predExpr SEMI RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        o4, o5));
                RESULT = f; :}


        /* for(;; updateExpr) Stmt */
        | FOR LPAREN SEMI SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN SEMI SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN SEMI SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR LPAREN SEMI SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        o4, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        o4, o5));
                RESULT = f; :}


        /* for(initExpr; predExpr;) Stmt */
        | FOR LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing,
                                                        o4, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, null, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                                                        o4, o5));
                RESULT = f; :}


        /* for(initExpr;; updateExpr) Stmt */
        | FOR LPAREN expr:initExpr SEMI SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3,
                                                        o4, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, null, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                                                        o4, o5));
                RESULT = f; :}


        /* for(; predExpr; updateExpr) Stmt */
        | FOR LPAREN SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR LPAREN SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        o4, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), null, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        o4, o5));
                RESULT = f; :}

        /* for(initExpr; predExpr; updateExpr) Stmt */
        | FOR LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        emptyStringSpacing, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        o4, emptyStringSpacing));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        emptyStringSpacing, o5));
                RESULT = f; :}
        | FOR LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                                                        o4, o5));
                RESULT = f; :}
        | FOR other:o1 LPAREN expr:initExpr SEMI other:o2 expr:predExpr SEMI other:o3 expr:updateExpr RPAREN other:o4 stmt:bodyStmt other:o5
            {: ForStmt f = new ForStmt( getCurrLineNum(), initExpr, predExpr, updateExpr, bodyStmt);
                f.addCommentAndSpacing(Arrays.asList(o1, o2, o3,
                                                        o4, o5));
                RESULT = f; :}
    ;

/* break statement */
break_stmt
    ::=
        BREAK SEMI
            {: BreakStmt b = new BreakStmt(getCurrLineNum());
                b.addCommentAndSpacing(emptyStringSpacing);
                RESULT = b; :}
        | BREAK other:o SEMI
            {: BreakStmt b = new BreakStmt(getCurrLineNum());
                b.addCommentAndSpacing(o);
                RESULT = b; :}
    ;

/* return statement */
ret_stmt
    ::=
        /* empty return */
        RETURN SEMI
            {: ReturnStmt r = new ReturnStmt(getCurrLineNum(), null );
                r.addCommentAndSpacing(emptyStringSpacing);
                RESULT = r; :}
        | RETURN other:o SEMI
            {: ReturnStmt r = new ReturnStmt(getCurrLineNum(), null );
                r.addCommentAndSpacing(o);
                RESULT = r; :}
        /* return expression; */
        | RETURN expr:expression SEMI
            {:  ReturnStmt r = new ReturnStmt(getCurrLineNum(), expression );
                r.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = r; :}
        | RETURN other:o1 expr:expression SEMI
            {: ReturnStmt r = new ReturnStmt(getCurrLineNum(), expression );
                r.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = r; :}
        | RETURN expr:expression other: o2 SEMI
            {: ReturnStmt r = new ReturnStmt(getCurrLineNum(), expression );
                r.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = r; :}
        | RETURN other:o1 expr:expression other: o2 SEMI
            {: ReturnStmt r = new ReturnStmt(getCurrLineNum(), expression );
                r.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = r; :}
    ;

/* block statement */
block_stmt
    ::= LBRACE stmt_list:sl RBRACE  {: RESULT = new BlockStmt(getCurrLineNum(), sl); :} ;

/* expression list */
expr_list
    ::=
        /* no expression */
            {:  ExprList el = new ExprList(getCurrLineNum());
                el.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing,emptyStringSpacing));
                RESULT = el; :}
        /* one expression */
        | expr_list:el expr:e
            {:  el.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing,emptyStringSpacing));
                RESULT = (ExprList)el.addElement(e); :}
        | expr_list:el other:o1 expr:e
            {:  el.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = (ExprList)el.addElement(e); :}
        | expr_list:el expr:e other:o2
            {:  el.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = (ExprList)el.addElement(e); :}
        | expr_list:el other:o1 expr:e other:o2
            {:  el.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = (ExprList)el.addElement(e); :}
        /* more than one expression, separated by commas */
        | expr_list:el expr:e COMMA
            {:  el.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing,emptyStringSpacing));
                RESULT = (ExprList)el.addElement(e); :}
        | expr_list:el other:o1 expr:e COMMA
            {:  el.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = (ExprList)el.addElement(e); :}
        | expr_list:el expr:e other:o2 COMMA
            {:  el.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = (ExprList)el.addElement(e); :}
        | expr_list:el other:o1 expr:e other:o2 COMMA
            {:  el.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = (ExprList)el.addElement(e); :}
    ;

/* expression */
expr
    ::=
        assign_expr:assignExpr             {: RESULT = assignExpr; :}
        | arr_assign_expr:arrAssignExpr    {: RESULT = arrAssignExpr; :}
        | dispatch_expr:dispatchExpr       {: RESULT = dispatchExpr; :}
        | new_expr:newExpr                 {: RESULT = newExpr; :}
        | new_arr_expr:newArrExpr          {: RESULT = newArrExpr; :}
        | instanceof_expr:instanceofExpr   {: RESULT = instanceofExpr; :}
        | cast_expr:castExpr               {: RESULT = castExpr; :}
        | binary_expr:binaryExpr           {: RESULT = binaryExpr; :}
        | unary_expr:unaryExpr             {: RESULT = unaryExpr; :}
        | const_expr:constExpr             {: RESULT = constExpr; :}
        | var_expr:varExpr                 {: RESULT = varExpr; :}
        | arr_expr:arrExpr                 {: RESULT = arrExpr; :}
        | LPAREN expr:expression RPAREN
            {:  addParenToExpr(expression, emptyStringSpacing, emptyStringSpacing);
                RESULT = expression; :}
        | LPAREN other:o1 expr:expression RPAREN
            {:  addParenToExpr(expression, o1, emptyStringSpacing);
                RESULT = expression; :}
        | LPAREN expr:expression other:o2 RPAREN
            {:  addParenToExpr(expression, emptyStringSpacing, o2);
                RESULT = expression; :}
        | LPAREN other:o1 expr:expression other:o2 RPAREN
            {:  addParenToExpr(expression, o1, o2);
                RESULT = expression; :}
    ;

/* assignment expression */
assign_expr
    ::=
        /* simple assignment like x = y */
        ID:name ASSIGN expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    null, name.getName(), expression);
                a.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = a; :}
        | ID:name other:o1 ASSIGN expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    null, name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = a; :}
        | ID:name ASSIGN other:o2 expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    null, name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = a; :}
        | ID:name other:o1 ASSIGN other:o2 expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    null, name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = a; :}
        /* assignment with reference like this.x = y */
        | ID:reference DOT ID:name ASSIGN expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing, emptyStringSpacing));
                RESULT = a; :}
        | ID:reference other:o1 DOT ID:name ASSIGN expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(o1,
                    emptyStringSpacing, emptyStringSpacing, emptyStringSpacing));
                RESULT = a; :}
        | ID:reference DOT other:o2 ID:name ASSIGN expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2,
                    emptyStringSpacing, emptyStringSpacing));
                RESULT = a; :}
        | ID:reference DOT ID:name other:o3 ASSIGN expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, o3, emptyStringSpacing));
                RESULT = a; :}
        | ID:reference DOT ID:name ASSIGN other:o4 expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing, o4));
                RESULT = a; :}
        | ID:reference other:o1 DOT other:o2 ID:name ASSIGN expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                    emptyStringSpacing));
                RESULT = a; :}
        | ID:reference other:o1 DOT ID:name other:o3 ASSIGN expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                    emptyStringSpacing));
                RESULT = a; :}
        | ID:reference other:o1 DOT ID:name ASSIGN other:o4 expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, o4));
                RESULT = a; :}
        | ID:reference DOT other:o2 ID:name other:o3 ASSIGN expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                    emptyStringSpacing));
                RESULT = a; :}
        | ID:reference DOT other:o2 ID:name ASSIGN other:o4 expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2,
                    emptyStringSpacing, o4));
                RESULT = a; :}
        | ID:reference DOT ID:name other:o3 ASSIGN other:o4 expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, o3, o4));
                RESULT = a; :}
        | ID:reference other:o1 DOT other:o2 ID:name other:o3 ASSIGN expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(o1, o2, o3, emptyStringSpacing));
                RESULT = a; :}
        | ID:reference other:o1 DOT other:o2 ID:name ASSIGN other:o4 expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing, o4));
                RESULT = a; :}
        | ID:reference DOT other:o2 ID:name other:o3 ASSIGN other:o4 expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3, o4));
                RESULT = a; :}
        | ID:reference other:o1 DOT other:o2 ID:name other:o3 ASSIGN other:o4 expr:expression
            {:  AssignExpr a = new AssignExpr(getCurrLineNum(),
                    reference.getName(), name.getName(), expression);
                a.addCommentAndSpacing(Arrays.asList(o1, o2, o3, o4));
                RESULT = a; :}
    ;

/* array assignment expression */
arr_assign_expr
    ::=
        /* simple assignment into array x[0] = y */
        ID:name LSQBRACE expr:size RSQBRACE ASSIGN expr:expression
            {: RESULT = new ArrayAssignExpr(getCurrLineNum(),
                null, name.getName(), size, expression); :}
        /* assignment with reference into array this.x[0] = y */
        | ID:reference DOT ID:name LSQBRACE expr:size RSQBRACE ASSIGN expr:expression
            {: RESULT = new ArrayAssignExpr(getCurrLineNum(),
                reference.getName(), name.getName(), size, expression); :}
    ;

/* dispatch expression */
dispatch_expr
    ::=
        ID:name LPAREN expr_list:el RPAREN
            {: DispatchExpr d = new DispatchExpr(getCurrLineNum(), null, name.getName(), el);
                d.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing));
                RESULT = d; :}
        | ID:name other:o3 LPAREN expr_list:el RPAREN
            {: DispatchExpr d = new DispatchExpr(getCurrLineNum(), null, name.getName(), el);
                d.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3));
                RESULT = d; :}
        | ID:ref DOT ID:name LPAREN expr_list:el RPAREN
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                DispatchExpr d = new DispatchExpr(getCurrLineNum(), reference,
                    name.getName(), el);
                d.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, emptyStringSpacing));
                RESULT = d; :}
        | ID:ref other:o1 DOT ID:name LPAREN expr_list:el RPAREN
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                DispatchExpr d = new DispatchExpr(getCurrLineNum(), reference,
                    name.getName(), el);
                d.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing));
                RESULT = d; :}
        | ID:ref DOT other:o2 ID:name LPAREN expr_list:el RPAREN
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                DispatchExpr d = new DispatchExpr(getCurrLineNum(), reference,
                    name.getName(), el);
                d.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, emptyStringSpacing));
                RESULT = d; :}
        | ID:ref DOT ID:name other:o3 LPAREN expr_list:el RPAREN
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                DispatchExpr d = new DispatchExpr(getCurrLineNum(), reference,
                    name.getName(), el);
                d.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing, o3));
                RESULT = d; :}
       | ID:ref other:o1 DOT other:o2 ID:name LPAREN expr_list:el RPAREN
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                DispatchExpr d = new DispatchExpr(getCurrLineNum(), reference,
                    name.getName(), el);
                d.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing));
                RESULT = d; :}
       | ID:ref other:o1 DOT ID:name other:o3 LPAREN expr_list:el RPAREN
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                DispatchExpr d = new DispatchExpr(getCurrLineNum(), reference,
                    name.getName(), el);
                d.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3));
                RESULT = d; :}
        | ID:ref DOT other:o2 ID:name other:o3 LPAREN expr_list:el RPAREN
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                DispatchExpr d = new DispatchExpr(getCurrLineNum(), reference,
                    name.getName(), el);
                d.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3));
                RESULT = d; :}
        | ID:ref other:o1 DOT other:o2 ID:name other:o3 LPAREN expr_list:el RPAREN
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                DispatchExpr d = new DispatchExpr(getCurrLineNum(), reference,
                    name.getName(), el);
                d.addCommentAndSpacing(Arrays.asList(o1, o2, o3));
                RESULT = d; :}
    ;

/* new expression */
new_expr
    ::=
        NEW other:o1 ID:type LPAREN RPAREN
            {: NewExpr n = new NewExpr(getCurrLineNum(), type.getName());
                n.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, emptyStringSpacing));
                RESULT = n; :}
        | NEW other:o1 ID:type other:o2 LPAREN RPAREN
            {: NewExpr n = new NewExpr(getCurrLineNum(), type.getName());
                n.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing));
                RESULT = n; :}
        | NEW other:o1 ID:type LPAREN other:o3 RPAREN
            {: NewExpr n = new NewExpr(getCurrLineNum(), type.getName());
                n.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3));
                RESULT = n; :}
        | NEW other:o1 ID:type other:o2 LPAREN other:o3 RPAREN
            {: NewExpr n = new NewExpr(getCurrLineNum(), type.getName());
                n.addCommentAndSpacing(Arrays.asList(o1, o2, o3));
                RESULT = n; :}
    ;

/* new array expression */
new_arr_expr
    ::=
        NEW ID:type LSQBRACE expr:size RSQBRACE
            {: RESULT = new NewArrayExpr(getCurrLineNum(), type.getName(), size); :}
    ;

/* instanceof expression */
instanceof_expr
    ::=
        /* instanceof type */
        expr:expression INSTANCEOF other:o2 ID:type
            {: InstanceofExpr i = new InstanceofExpr(getCurrLineNum(), expression, type.getName());
                i.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = i; :}
        | expr:expression other:o1 INSTANCEOF other:o2 ID:type
            {: InstanceofExpr i = new InstanceofExpr(getCurrLineNum(), expression, type.getName());
                i.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = i; :}
        /* instanceof type[] */
        | expr:expression INSTANCEOF ID:type LSQBRACE RSQBRACE
            {: RESULT = new InstanceofExpr(getCurrLineNum(),
                expression, type.getName()+"[]"); :}
    ;

/* cast expression */
cast_expr
    ::=
        /* type casting to (TYPE) */
        LPAREN ID:type RPAREN expr:expression
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing, emptyStringSpacing));
                RESULT = c; :}
        | LPAREN other:o1 ID:type RPAREN expr:expression
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing));
                RESULT = c; :}
        | LPAREN ID:type other:o2 RPAREN expr:expression
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2,
                    emptyStringSpacing, emptyStringSpacing));
                RESULT = c; :}
        | LPAREN ID:type RPAREN other:o3 expr:expression
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, o3, emptyStringSpacing));
                RESULT = c; :}
        | LPAREN ID:type RPAREN expr:expression other:o4
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, emptyStringSpacing, o4));
                RESULT = c; :}
        | LPAREN other:o1 ID:type other:o2 RPAREN expr:expression
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing,
                    emptyStringSpacing));
                RESULT = c; :}
        | LPAREN other:o1 ID:type RPAREN other:o3 expr:expression
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing, o3,
                    emptyStringSpacing));
                RESULT = c; :}
        | LPAREN other:o1 ID:type RPAREN expr:expression other:o4
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing,
                    emptyStringSpacing, o4));
                RESULT = c; :}
        | LPAREN ID:type other:o2 RPAREN other:o3 expr:expression
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3,
                    emptyStringSpacing));
                RESULT = c; :}
        | LPAREN ID:type other:o2 RPAREN expr:expression other:o4
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2,
                    emptyStringSpacing, o4));
                RESULT = c; :}
        | LPAREN ID:type RPAREN other:o3 expr:expression other:o4
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(emptyStringSpacing,
                    emptyStringSpacing, o3, o4));
                RESULT = c; :}
        | LPAREN other:o1 ID:type other:o2 RPAREN other:o3 expr:expression
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(o1, o2, o3, emptyStringSpacing));
                RESULT = c; :}
        | LPAREN other:o1 ID:type other:o2 RPAREN expr:expression other:o4
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(o1, o2, emptyStringSpacing, o4));
                RESULT = c; :}
        | LPAREN ID:type other:o2 RPAREN other:o3 expr:expression other:o4
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2, o3, o4));
                RESULT = c; :}
        | LPAREN other:o1 ID:type other:o2 RPAREN other:o3 expr:expression other:o4
            {:  CastExpr c = new CastExpr(getCurrLineNum(), type.getName(), expression);
                c.addCommentAndSpacing(Arrays.asList(o1, o2, o3, o4));
                RESULT = c; :}
    ;

/* constant expression */
const_expr
    ::=
        INT_CONST:intConst
            {: RESULT = new ConstIntExpr(getCurrLineNum(), intConst.getName()); :}
        | BOOLEAN_CONST:booleanConst
            {: RESULT = new ConstBooleanExpr(getCurrLineNum(), booleanConst.getName()); :}
        | STRING_CONST:stringConst
            {: RESULT = new ConstStringExpr(getCurrLineNum(), stringConst.getName()); :}
    ;

/* binary expression */
binary_expr
    ::=
        binary_arith_expr:binaryArithExpr      {: RESULT = binaryArithExpr; :}
        | binary_comp_expr:binaryCompExpr      {: RESULT = binaryCompExpr; :}
        | binary_logic_expr:binaryLogicExpr    {: RESULT = binaryLogicExpr; :}
    ;

/* binary arith expression */
binary_arith_expr
    ::=
        expr:leftExpr PLUS expr:rightExpr
            {:  BinaryArithPlusExpr plusExpr =
                    new BinaryArithPlusExpr(getCurrLineNum(), leftExpr, rightExpr);
                plusExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = plusExpr; :}
        | expr:leftExpr other:o1 PLUS expr:rightExpr
            {:  BinaryArithPlusExpr plusExpr =
                    new BinaryArithPlusExpr(getCurrLineNum(), leftExpr, rightExpr);
                plusExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = plusExpr; :}
        | expr:leftExpr PLUS other:o2 expr:rightExpr
            {:  BinaryArithPlusExpr plusExpr =
                    new BinaryArithPlusExpr(getCurrLineNum(), leftExpr, rightExpr);
                plusExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = plusExpr; :}
        | expr:leftExpr other:o1 PLUS other:o2 expr:rightExpr
            {:  BinaryArithPlusExpr plusExpr =
                    new BinaryArithPlusExpr(getCurrLineNum(), leftExpr, rightExpr);
                plusExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = plusExpr; :}
        | expr:leftExpr MINUS expr:rightExpr
            {:  BinaryArithMinusExpr minusExpr =
                    new BinaryArithMinusExpr(getCurrLineNum(), leftExpr, rightExpr);
                minusExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = minusExpr; :}
        | expr:leftExpr other:o1 MINUS expr:rightExpr
            {:  BinaryArithMinusExpr minusExpr =
                    new BinaryArithMinusExpr(getCurrLineNum(), leftExpr, rightExpr);
                minusExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = minusExpr; :}
        | expr:leftExpr MINUS other:o2 expr:rightExpr
            {:  BinaryArithMinusExpr minusExpr =
                    new BinaryArithMinusExpr(getCurrLineNum(), leftExpr, rightExpr);
                minusExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = minusExpr; :}
        | expr:leftExpr other:o1 MINUS other:o2 expr:rightExpr
            {:  BinaryArithMinusExpr minusExpr =
                    new BinaryArithMinusExpr(getCurrLineNum(), leftExpr, rightExpr);
                minusExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = minusExpr; :}
        | expr:leftExpr TIMES expr:rightExpr
            {:  BinaryArithTimesExpr timesExpr =
                    new BinaryArithTimesExpr(getCurrLineNum(), leftExpr, rightExpr);
                timesExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = timesExpr; :}
        | expr:leftExpr other:o1 TIMES expr:rightExpr
            {:  BinaryArithTimesExpr timesExpr =
                    new BinaryArithTimesExpr(getCurrLineNum(), leftExpr, rightExpr);
                timesExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = timesExpr; :}
        | expr:leftExpr TIMES other:o2 expr:rightExpr
            {:  BinaryArithTimesExpr timesExpr =
                    new BinaryArithTimesExpr(getCurrLineNum(), leftExpr, rightExpr);
                timesExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = timesExpr; :}
        | expr:leftExpr other:o1 TIMES other:o2 expr:rightExpr
            {:  BinaryArithTimesExpr timesExpr =
                    new BinaryArithTimesExpr(getCurrLineNum(), leftExpr, rightExpr);
                timesExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = timesExpr; :}
        | expr:leftExpr DIVIDE expr:rightExpr
            {:  BinaryArithDivideExpr divideExpr =
                    new BinaryArithDivideExpr(getCurrLineNum(), leftExpr, rightExpr);
                divideExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = divideExpr; :}
        | expr:leftExpr other:o1 DIVIDE expr:rightExpr
            {:  BinaryArithDivideExpr divideExpr =
                    new BinaryArithDivideExpr(getCurrLineNum(), leftExpr, rightExpr);
                divideExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = divideExpr; :}
        | expr:leftExpr DIVIDE other:o2 expr:rightExpr
            {:  BinaryArithDivideExpr divideExpr =
                    new BinaryArithDivideExpr(getCurrLineNum(), leftExpr, rightExpr);
                divideExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = divideExpr; :}
        | expr:leftExpr other:o1 DIVIDE other:o2 expr:rightExpr
            {:  BinaryArithDivideExpr divideExpr =
                    new BinaryArithDivideExpr(getCurrLineNum(), leftExpr, rightExpr);
                divideExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = divideExpr; :}
        | expr:leftExpr MODULUS expr:rightExpr
            {:  BinaryArithModulusExpr modExpr =
                    new BinaryArithModulusExpr(getCurrLineNum(), leftExpr, rightExpr);
                modExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = modExpr; :}
        | expr:leftExpr other:o1 MODULUS expr:rightExpr
            {:  BinaryArithModulusExpr modExpr =
                    new BinaryArithModulusExpr(getCurrLineNum(), leftExpr, rightExpr);
                modExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = modExpr; :}
        | expr:leftExpr MODULUS other:o2 expr:rightExpr
            {:  BinaryArithModulusExpr modExpr =
                    new BinaryArithModulusExpr(getCurrLineNum(), leftExpr, rightExpr);
                modExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = modExpr; :}
        | expr:leftExpr other:o1 MODULUS other:o2 expr:rightExpr
            {:  BinaryArithModulusExpr modExpr =
                    new BinaryArithModulusExpr(getCurrLineNum(), leftExpr, rightExpr);
                modExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = modExpr; :}
    ;

/* binary comp expression */
binary_comp_expr
    ::=
        expr:leftExpr EQ expr:rightExpr
            {:  BinaryCompEqExpr eqExpr =
                    new BinaryCompEqExpr(getCurrLineNum(), leftExpr, rightExpr);
                eqExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = eqExpr; :}
        | expr:leftExpr other:o1 EQ expr:rightExpr
            {:  BinaryCompEqExpr eqExpr =
                    new BinaryCompEqExpr(getCurrLineNum(), leftExpr, rightExpr);
                eqExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = eqExpr; :}
        | expr:leftExpr EQ other:o2 expr:rightExpr
            {:  BinaryCompEqExpr eqExpr =
                    new BinaryCompEqExpr(getCurrLineNum(), leftExpr, rightExpr);
                eqExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = eqExpr; :}
        | expr:leftExpr other:o1 EQ other:o2 expr:rightExpr
            {:  BinaryCompEqExpr eqExpr =
                    new BinaryCompEqExpr(getCurrLineNum(), leftExpr, rightExpr);
                eqExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = eqExpr; :}
        | expr:leftExpr NE expr:rightExpr
            {:  BinaryCompNeExpr neExpr =
                    new BinaryCompNeExpr(getCurrLineNum(), leftExpr, rightExpr);
                neExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = neExpr; :}
        | expr:leftExpr other:o1 NE expr:rightExpr
            {:  BinaryCompNeExpr neExpr =
                    new BinaryCompNeExpr(getCurrLineNum(), leftExpr, rightExpr);
                neExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = neExpr; :}
        | expr:leftExpr NE other:o2 expr:rightExpr
            {:  BinaryCompNeExpr neExpr =
                    new BinaryCompNeExpr(getCurrLineNum(), leftExpr, rightExpr);
                neExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = neExpr; :}
        | expr:leftExpr other:o1 NE other:o2 expr:rightExpr
            {:  BinaryCompNeExpr neExpr =
                    new BinaryCompNeExpr(getCurrLineNum(), leftExpr, rightExpr);
                neExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = neExpr; :}
        | expr:leftExpr LT expr:rightExpr
            {:  BinaryCompLtExpr ltExpr =
                    new BinaryCompLtExpr(getCurrLineNum(), leftExpr, rightExpr);
                ltExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = ltExpr; :}
        | expr:leftExpr other:o1 LT expr:rightExpr
            {:  BinaryCompLtExpr ltExpr =
                    new BinaryCompLtExpr(getCurrLineNum(), leftExpr, rightExpr);
                ltExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = ltExpr; :}
        | expr:leftExpr LT other:o2 expr:rightExpr
            {:  BinaryCompLtExpr ltExpr =
                    new BinaryCompLtExpr(getCurrLineNum(), leftExpr, rightExpr);
                ltExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = ltExpr; :}
        | expr:leftExpr other:o1 LT other:o2 expr:rightExpr
            {:  BinaryCompLtExpr ltExpr =
                    new BinaryCompLtExpr(getCurrLineNum(), leftExpr, rightExpr);
                ltExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = ltExpr; :}
        | expr:leftExpr LEQ expr:rightExpr
            {:  BinaryCompLeqExpr leqExpr =
                    new BinaryCompLeqExpr(getCurrLineNum(), leftExpr, rightExpr);
                leqExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = leqExpr; :}
        | expr:leftExpr other:o1 LEQ expr:rightExpr
            {:  BinaryCompLeqExpr leqExpr =
                    new BinaryCompLeqExpr(getCurrLineNum(), leftExpr, rightExpr);
                leqExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = leqExpr; :}
        | expr:leftExpr LEQ other:o2 expr:rightExpr
            {:  BinaryCompLeqExpr leqExpr =
                    new BinaryCompLeqExpr(getCurrLineNum(), leftExpr, rightExpr);
                leqExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = leqExpr; :}
        | expr:leftExpr other:o1 LEQ other:o2 expr:rightExpr
            {:  BinaryCompLeqExpr leqExpr =
                    new BinaryCompLeqExpr(getCurrLineNum(), leftExpr, rightExpr);
                leqExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = leqExpr; :}
        | expr:leftExpr GT expr:rightExpr
            {:  BinaryCompGtExpr gtExpr =
                    new BinaryCompGtExpr(getCurrLineNum(), leftExpr, rightExpr);
                gtExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = gtExpr; :}
        | expr:leftExpr other:o1 GT expr:rightExpr
            {:  BinaryCompGtExpr gtExpr =
                    new BinaryCompGtExpr(getCurrLineNum(), leftExpr, rightExpr);
                gtExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = gtExpr; :}
        | expr:leftExpr GT other:o2 expr:rightExpr
            {:  BinaryCompGtExpr gtExpr =
                    new BinaryCompGtExpr(getCurrLineNum(), leftExpr, rightExpr);
                gtExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = gtExpr; :}
        | expr:leftExpr other:o1 GT other:o2 expr:rightExpr
            {:  BinaryCompGtExpr gtExpr =
                    new BinaryCompGtExpr(getCurrLineNum(), leftExpr, rightExpr);
                gtExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = gtExpr; :}
        | expr:leftExpr GEQ expr:rightExpr
            {:  BinaryCompGeqExpr geqExpr =
                    new BinaryCompGeqExpr(getCurrLineNum(), leftExpr, rightExpr);
                geqExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = geqExpr; :}
        | expr:leftExpr other:o1 GEQ expr:rightExpr
            {:  BinaryCompGeqExpr geqExpr =
                    new BinaryCompGeqExpr(getCurrLineNum(), leftExpr, rightExpr);
                geqExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = geqExpr; :}
        | expr:leftExpr GEQ other:o2 expr:rightExpr
            {:  BinaryCompGeqExpr geqExpr =
                    new BinaryCompGeqExpr(getCurrLineNum(), leftExpr, rightExpr);
                geqExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = geqExpr; :}
        | expr:leftExpr other:o1 GEQ other:o2 expr:rightExpr
            {:  BinaryCompGeqExpr geqExpr =
                    new BinaryCompGeqExpr(getCurrLineNum(), leftExpr, rightExpr);
                geqExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = geqExpr; :}
    ;

/* binary logic expression */
binary_logic_expr
    ::=
        expr:leftExpr AND expr:rightExpr
            {:  BinaryLogicAndExpr andExpr =
                    new BinaryLogicAndExpr(getCurrLineNum(), leftExpr, rightExpr);
                andExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = andExpr; :}
        | expr:leftExpr other:o1 AND expr:rightExpr
            {:  BinaryLogicAndExpr andExpr =
                    new BinaryLogicAndExpr(getCurrLineNum(), leftExpr, rightExpr);
                andExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = andExpr; :}
        | expr:leftExpr AND other:o2 expr:rightExpr
            {:  BinaryLogicAndExpr andExpr =
                    new BinaryLogicAndExpr(getCurrLineNum(), leftExpr, rightExpr);
                andExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = andExpr; :}
        | expr:leftExpr other:o1 AND other:o2 expr:rightExpr
            {:  BinaryLogicAndExpr andExpr =
                    new BinaryLogicAndExpr(getCurrLineNum(), leftExpr, rightExpr);
                andExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = andExpr; :}
        | expr:leftExpr OR expr:rightExpr
            {:  BinaryLogicOrExpr orExpr =
                    new BinaryLogicOrExpr(getCurrLineNum(), leftExpr, rightExpr);
                orExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = orExpr; :}
        | expr:leftExpr other:o1 OR expr:rightExpr
            {:  BinaryLogicOrExpr orExpr =
                    new BinaryLogicOrExpr(getCurrLineNum(), leftExpr, rightExpr);
                orExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = orExpr; :}
        | expr:leftExpr OR other:o2 expr:rightExpr
            {:  BinaryLogicOrExpr orExpr =
                    new BinaryLogicOrExpr(getCurrLineNum(), leftExpr, rightExpr);
                orExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = orExpr; :}
        | expr:leftExpr other:o1 OR other:o2 expr:rightExpr
            {:  BinaryLogicOrExpr orExpr =
                    new BinaryLogicOrExpr(getCurrLineNum(), leftExpr, rightExpr);
                orExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = orExpr; :}
        | expr:leftExpr BITOR expr:rightExpr
            {:  BinaryLogicBitOrExpr orExpr =
                    new BinaryLogicBitOrExpr(getCurrLineNum(), leftExpr, rightExpr);
                orExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = orExpr; :}
        | expr:leftExpr other:o1 BITOR expr:rightExpr
            {:  BinaryLogicBitOrExpr orExpr =
                    new BinaryLogicBitOrExpr(getCurrLineNum(), leftExpr, rightExpr);
                orExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = orExpr; :}
        | expr:leftExpr BITOR other:o2 expr:rightExpr
            {:  BinaryLogicBitOrExpr orExpr =
                    new BinaryLogicBitOrExpr(getCurrLineNum(), leftExpr, rightExpr);
                orExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = orExpr; :}
        | expr:leftExpr other:o1 BITOR other:o2 expr:rightExpr
            {:  BinaryLogicBitOrExpr orExpr =
                    new BinaryLogicBitOrExpr(getCurrLineNum(), leftExpr, rightExpr);
                orExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = orExpr; :}
        | expr:leftExpr BITXOR expr:rightExpr
            {:  BinaryLogicBitXorExpr xorExpr =
                    new BinaryLogicBitXorExpr(getCurrLineNum(), leftExpr, rightExpr);
                xorExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = xorExpr; :}
        | expr:leftExpr other:o1 BITXOR expr:rightExpr
            {:  BinaryLogicBitXorExpr xorExpr =
                    new BinaryLogicBitXorExpr(getCurrLineNum(), leftExpr, rightExpr);
                xorExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = xorExpr; :}
        | expr:leftExpr BITXOR other:o2 expr:rightExpr
            {:  BinaryLogicBitXorExpr xorExpr =
                    new BinaryLogicBitXorExpr(getCurrLineNum(), leftExpr, rightExpr);
                xorExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = xorExpr; :}
        | expr:leftExpr other:o1 BITXOR other:o2 expr:rightExpr
            {:  BinaryLogicBitXorExpr xorExpr =
                    new BinaryLogicBitXorExpr(getCurrLineNum(), leftExpr, rightExpr);
                xorExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = xorExpr; :}
        | expr:leftExpr BITAND expr:rightExpr
            {:  BinaryLogicBitAndExpr andExpr =
                    new BinaryLogicBitAndExpr(getCurrLineNum(), leftExpr, rightExpr);
                andExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = andExpr; :}
        | expr:leftExpr other:o1 BITAND expr:rightExpr
            {:  BinaryLogicBitAndExpr andExpr =
                    new BinaryLogicBitAndExpr(getCurrLineNum(), leftExpr, rightExpr);
                andExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = andExpr; :}
        | expr:leftExpr BITAND other:o2 expr:rightExpr
            {:  BinaryLogicBitAndExpr andExpr =
                    new BinaryLogicBitAndExpr(getCurrLineNum(), leftExpr, rightExpr);
                andExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = andExpr; :}
        | expr:leftExpr other:o1 BITAND other:o2 expr:rightExpr
            {:  BinaryLogicBitAndExpr andExpr =
                    new BinaryLogicBitAndExpr(getCurrLineNum(), leftExpr, rightExpr);
                andExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = andExpr; :}
        | expr:leftExpr SIGNEDLEFTSHIFT expr:rightExpr
            {:  BinaryLogicLeftShiftExpr leftShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                leftShiftExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = leftShiftExpr; :}
        | expr:leftExpr other:o1 SIGNEDLEFTSHIFT expr:rightExpr
            {:  BinaryLogicLeftShiftExpr leftShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                leftShiftExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = leftShiftExpr; :}
        | expr:leftExpr SIGNEDLEFTSHIFT other:o2 expr:rightExpr
            {:  BinaryLogicLeftShiftExpr leftShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                leftShiftExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = leftShiftExpr; :}
        | expr:leftExpr other:o1 SIGNEDLEFTSHIFT other:o2 expr:rightExpr
            {:  BinaryLogicLeftShiftExpr leftShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                leftShiftExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = leftShiftExpr; :}
        | expr:leftExpr SIGNEDRIGHTSHIFT expr:rightExpr
            {:  BinaryLogicLeftShiftExpr rightShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                rightShiftExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = rightShiftExpr; :}
        | expr:leftExpr other:o1 SIGNEDRIGHTSHIFT expr:rightExpr
            {:  BinaryLogicLeftShiftExpr rightShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                rightShiftExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = rightShiftExpr; :}
        | expr:leftExpr SIGNEDRIGHTSHIFT other:o2 expr:rightExpr
            {:  BinaryLogicLeftShiftExpr rightShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                rightShiftExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = rightShiftExpr; :}
        | expr:leftExpr other:o1 SIGNEDRIGHTSHIFT other:o2 expr:rightExpr
            {:  BinaryLogicLeftShiftExpr rightShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                rightShiftExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = rightShiftExpr; :}
        | expr:leftExpr UNSIGNEDRIGHTSHIFT expr:rightExpr
            {:  BinaryLogicLeftShiftExpr unsignedShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                unsignedShiftExpr.addCommentAndSpacing(
                    Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = unsignedShiftExpr; :}
        | expr:leftExpr other:o1 UNSIGNEDRIGHTSHIFT expr:rightExpr
            {:  BinaryLogicLeftShiftExpr unsignedShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                unsignedShiftExpr.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = unsignedShiftExpr; :}
        | expr:leftExpr UNSIGNEDRIGHTSHIFT other:o2 expr:rightExpr
            {:  BinaryLogicLeftShiftExpr unsignedShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                unsignedShiftExpr.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = unsignedShiftExpr; :}
        | expr:leftExpr other:o1 UNSIGNEDRIGHTSHIFT other:o2 expr:rightExpr
            {:  BinaryLogicLeftShiftExpr unsignedShiftExpr =
                    new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr);
                unsignedShiftExpr.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = unsignedShiftExpr; :}

    ;

/* unary expression */
unary_expr
    ::=
        unary_neg_expr:unaryNegExpr        {: RESULT = unaryNegExpr; :}
        | unary_not_expr:unaryNotExpr      {: RESULT = unaryNotExpr; :}
        | unary_incr_expr:unaryIncrExpr    {: RESULT = unaryIncrExpr; :}
        | unary_decr_expr:unaryDecrExpr    {: RESULT = unaryDecrExpr; :}
    ;

/* unary neg expression */
unary_neg_expr
    ::=
        MINUS expr:expression
            {:  UnaryNegExpr negExpr = new UnaryNegExpr(getCurrLineNum(), expression);
                negExpr.addCommentAndSpacing(emptyStringSpacing);
                RESULT = negExpr; :}
        | MINUS other:o expr:expression
            {:  UnaryNegExpr negExpr = new UnaryNegExpr(getCurrLineNum(), expression);
                negExpr.addCommentAndSpacing(o);
                RESULT = negExpr; :}
    ;

/* unary not expression */
unary_not_expr
    ::=
        NOT expr:expression
            {:  UnaryNotExpr notExpr = new UnaryNotExpr(getCurrLineNum(), expression);
                notExpr.addCommentAndSpacing(emptyStringSpacing);
                RESULT = notExpr; :}
        | NOT other:o expr:expression
            {:  UnaryNotExpr notExpr = new UnaryNotExpr(getCurrLineNum(), expression);
                notExpr.addCommentAndSpacing(o);
                RESULT = notExpr; :}
    ;

/* unary incr expression */
unary_incr_expr
    ::=
        INCR expr:expression
            {:  UnaryIncrExpr incrExpr = new UnaryIncrExpr(getCurrLineNum(), expression, false);
                incrExpr.addCommentAndSpacing(emptyStringSpacing);
                RESULT = incrExpr; :}
        | INCR other:o expr:expression
            {:  UnaryIncrExpr incrExpr = new UnaryIncrExpr(getCurrLineNum(), expression, false);
                incrExpr.addCommentAndSpacing(o);
                RESULT = incrExpr; :}
        | expr:expression INCR
            {:  UnaryIncrExpr incrExpr = new UnaryIncrExpr(getCurrLineNum(), expression, true);
                incrExpr.addCommentAndSpacing(emptyStringSpacing);
                RESULT = incrExpr; :}
        | expr:expression other:o INCR
            {:  UnaryIncrExpr incrExpr = new UnaryIncrExpr(getCurrLineNum(), expression, true);
                incrExpr.addCommentAndSpacing(o);
                RESULT = incrExpr; :}
    ;

/* unary decr expression */
unary_decr_expr
    ::=
        DECR expr:expression
            {:  UnaryDecrExpr decrExpr = new UnaryDecrExpr(getCurrLineNum(), expression, false);
                decrExpr.addCommentAndSpacing(emptyStringSpacing);
                RESULT = decrExpr; :}
        | DECR other:o expr:expression
            {:  UnaryDecrExpr decrExpr = new UnaryDecrExpr(getCurrLineNum(), expression, false);
                decrExpr.addCommentAndSpacing(o);
                RESULT = decrExpr; :}
        | expr:expression DECR
            {:  UnaryDecrExpr decrExpr = new UnaryDecrExpr(getCurrLineNum(), expression, true);
                decrExpr.addCommentAndSpacing(emptyStringSpacing);
                RESULT = decrExpr; :}
        | expr:expression other:o DECR
            {:  UnaryDecrExpr decrExpr = new UnaryDecrExpr(getCurrLineNum(), expression, true);
                decrExpr.addCommentAndSpacing(o);
                RESULT = decrExpr; :}
    ;
/* variable expression */
var_expr
    ::=
        /* single identifier like x */
        ID:name
            {:  VarExpr v = new VarExpr(getCurrLineNum(), null, name.getName());
                v.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = v; :}
        /* identifier with reference */
        | ID:ref DOT ID:name
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                VarExpr v = new VarExpr(getCurrLineNum(), reference, name.getName());
                v.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                RESULT = v; :}
        | ID:ref other:o1 DOT ID:name
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                VarExpr v = new VarExpr(getCurrLineNum(), reference, name.getName());
                v.addCommentAndSpacing(Arrays.asList(o1, emptyStringSpacing));
                RESULT = v; :}
        | ID:ref DOT other:o2 ID:name
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                VarExpr v = new VarExpr(getCurrLineNum(), reference, name.getName());
                v.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, o2));
                RESULT = v; :}
        | ID:ref other:o1 DOT other:o2 ID:name
            {:  VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                reference.addCommentAndSpacing(Arrays.asList(emptyStringSpacing, emptyStringSpacing));
                VarExpr v = new VarExpr(getCurrLineNum(), reference, name.getName());
                v.addCommentAndSpacing(Arrays.asList(o1, o2));
                RESULT = v; :}
    ;

/* array expression */
arr_expr
    ::=
        /* simple array expression like x[1] */
        ID:name LSQBRACE expr:index RSQBRACE
            {: RESULT = new ArrayExpr(getCurrLineNum(),
                null, name.getName(), index); :}
        /* array identifier with reference */
        | ID:ref DOT ID:name LSQBRACE expr:index RSQBRACE
            {: RESULT = new ArrayExpr(getCurrLineNum(),
                new VarExpr(getCurrLineNum(), null, ref.getName()),
                name.getName(), index);:}
    ;
/* add more productions... */
