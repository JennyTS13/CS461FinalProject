/*
 * File: parser.cup
 * Author: Tiffany Lam, Jenny Lin
 * Course: CS461
 * Project: 5
 * Date: April 28, 2017
 */

/* Bantam Java Compiler and Language Toolset.

   Copyright (C) 2009 by Marc Corliss (corliss@hws.edu) and 
                         David Furcy (furcyd@uwosh.edu) and
                         E Christopher Lewis (lewis@vmware.com).
   ALL RIGHTS RESERVED.

   The Bantam Java toolset is distributed under the following 
   conditions:

     You may make copies of the toolset for your own use and 
     modify those copies.

     All copies of the toolset must retain the author names and 
     copyright notice.

     You may not sell the toolset or distribute it in 
     conjunction with a commerical product or service without 
     the expressed written consent of the authors.

   THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS 
   OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE 
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
   PARTICULAR PURPOSE. 
*/

/* code below is copied to the file containing the bantam.parser */

package bantam.parser;

/* import the AST and utility class files */
import bantam.lexer.*;
import bantam.ast.*;
import bantam.util.ErrorHandler;

import java.util.Arrays;
import java.util.List;

/* import Symbol class, which represents the type of token passed
   from the bantam.lexer to the bantam.parser.  Note: in the bantam.lexer package there is
   a file Token.java that  defines a subclass of Symbol called Token,
   which is what is actually passed to the bantam.parser */
import java_cup.runtime.Symbol;

/* the code below is copied to the class containing the context-free
   grammar productions */
action code {:
    /** object for error handling */
    private ErrorHandler errorHandler = new ErrorHandler();

    /** object for an empty string spacing */
    private Other emptyStringSpacing = new Other(-1, "");

    /* sets the error handler */
    public ErrorHandler getErrorHandler() {
	return errorHandler;
    }

    /* returns the current line number from the scanner */
    public int getCurrLineNum() {
	return ((Lexer)parser.getScanner()).getCurrLineNum();
    }

    /* returns the current file name from the scanner */
    public String getCurrFilename() {
	return ((Lexer)parser.getScanner()).getCurrFilename();
    }

    /**
     * adds provided Others to expr's Other's list
     *
     * @param expr Expression to add Others to
     * @param start Other to add to start of expr's Others list
     * @param end Other to append to expr's Others list
     */
    public void addOthersToExpr(Expr expr, Other start, Other end) {
        expr.getCommentAndSpacingList().add(0, start);
        expr.addCommentAndSpacing(end);
    }

    public void addToStartOfOther(Other parent, Other newOther) {
        if(parent.getCommentAndSpacingList() != null){
            parent.getCommentAndSpacingList().add(0, newOther);
        }
        else{
            parent.addCommentAndSpacing(newOther);
        }
    }

    /**
     * adds left and right parenthesis to the first and last other
     *
     * @param expr Expression to parentheses Others to
     * @param leftOther spacing and comment after the left parenthesis
     * @param rightOther spacing and comment in front of the right parenthesis
     */
    public void addParenToExpr(Expr expr, Other leftOther, Other rightOther){
        List<Other> commentAndSpacingList = expr.getCommentAndSpacingList();
        Other leftParen = new Other(expr.getLineNum(), "(");
        Other rightParen = new Other(expr.getLineNum(), ")");

        //set the parentheses as wrappers
        leftParen.setWrapper();
        rightParen.setWrapper();
        leftParen.addCommentAndSpacing(leftOther);
        rightParen.addCommentAndSpacing(rightOther);

        //add wrappers to the expr
        if(commentAndSpacingList == null) {
            expr.addCommentAndSpacingToFront(leftParen);
            expr.addCommentAndSpacing(rightParen);
        }
        //there's no wrappers for the expr yet so just add the wrappers to the expr
        else if(!commentAndSpacingList.get(0).isExprWrapper()) {
            expr.addCommentAndSpacingToFront(leftParen);
            expr.addCommentAndSpacing(rightParen);
        }
        //add the left and right parens to the wrappers
        else{
            Other startWrapper = commentAndSpacingList.get(0);
            Other endWrapper = commentAndSpacingList.remove(commentAndSpacingList.size()-1);

            //add left paren to the end of start wrapper
            startWrapper.addCommentAndSpacing(leftParen);

            //add end wrapper to the end of right paren and add right paren to expr
            rightParen.addCommentAndSpacing(endWrapper);
            expr.addCommentAndSpacing(rightParen);
        }
    }

:}

/* code below is copied to the Parser class, which drives parsing */
parser code {:
/*
 * File: Parser.java
 * Author: Tiffany Lam, Jenny Lin
 * Course: CS461
 * Project: Project: 5
 * Date: April 28, 2017
 */

    /**
     * @return the ErrorHandler for this Parser
     */
    public ErrorHandler getErrorHandler() { return action_obj.getErrorHandler(); }

    /** overrides done_parsing in inherited class, called when parsing finishes
      * either after accepting or because of errors
      * */
    public void done_parsing() {
	super.done_parsing();
	// if lexing and/or parsing errors then exit
	action_obj.getErrorHandler().checkErrors();
    }

    /** overrides syntax_error in inherited class and handles syntax errors
      * @param curr current symbol from the bantam.lexer
      * */
    public void syntax_error(Symbol curr) {
	// get token value from the symbol
	Token t = (Token)curr.value;

	// get the error handler object
	ErrorHandler errorHandler = action_obj.getErrorHandler();

	// may want to modify and augment the code below for more
	// accurate error reporting
	errorHandler.register(errorHandler.PARSE_ERROR, action_obj.getCurrFilename(),
			      action_obj.getCurrLineNum(),
			      "unexpected input near '" + t.getLexeme() + "'");
    }

    /** override error_sync_size in inherited class and
      * change the minimum number of tokens to skip on an error from 3 to 2
      * @return minimum number of tokens to skip on an error
      * */
    protected int error_sync_size() {
	return 2;
    }
:}

/* list of terminals, which correspond to tokens returned by the bantam.lexer
 */
terminal Token LEX_ERROR;
terminal Token CLASS, EXTENDS, IF, ELSE, WHILE, FOR, BREAK, NEW, RETURN, INSTANCEOF;
terminal Token PLUS, MINUS, TIMES, DIVIDE, MODULUS, NOT, AND, OR;
terminal Token EQ, NE, LT, LEQ, GT, GEQ, ASSIGN, INCR, DECR;
terminal Token LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE;
terminal Token SEMI, COMMA, DOT;
terminal Token ID, INT_CONST, BOOLEAN_CONST, STRING_CONST;
terminal Token SIGNEDLEFTSHIFT, SIGNEDRIGHTSHIFT, UNSIGNEDRIGHTSHIFT;
terminal Token BITOR, BITXOR, BITAND;

/* list of non-terminals used in context-free grammar
   format: nonterminal <type> <list of nonterminal names>
   example: nonterminal Expr expr1, expr2
   The type specifies what type of result the non-terminal will return
   The type should correspond to a class name from the AST
*/
nonterminal Program program;
nonterminal ClassList class_list;
nonterminal Class_ class;
nonterminal MemberList member_list;
nonterminal Member member;
nonterminal Method method;
nonterminal Field field;
nonterminal FormalList formal_list;
nonterminal Formal formal;
nonterminal StmtList stmt_list;
nonterminal Stmt stmt;
nonterminal ExprList expr_list;
nonterminal Expr expr;
nonterminal ExprStmt expr_stmt;
nonterminal DeclStmt decl_stmt;
nonterminal IfStmt if_stmt;
nonterminal WhileStmt while_stmt;
nonterminal ForStmt for_stmt;
nonterminal BreakStmt break_stmt;
nonterminal ReturnStmt ret_stmt;
nonterminal BlockStmt block_stmt;
nonterminal AssignExpr assign_expr;
nonterminal ArrayAssignExpr arr_assign_expr;
nonterminal DispatchExpr dispatch_expr;
nonterminal NewExpr new_expr;
nonterminal NewArrayExpr new_arr_expr;
nonterminal InstanceofExpr instanceof_expr;
nonterminal CastExpr cast_expr;
nonterminal BinaryExpr binary_expr;
nonterminal BinaryArithExpr binary_arith_expr;
nonterminal BinaryCompExpr binary_comp_expr;
nonterminal BinaryLogicExpr binary_logic_expr;
nonterminal UnaryExpr unary_expr;
nonterminal UnaryNegExpr unary_neg_expr;
nonterminal UnaryNotExpr unary_not_expr;
nonterminal UnaryIncrExpr unary_incr_expr;
nonterminal UnaryDecrExpr unary_decr_expr;
nonterminal ConstExpr const_expr;
nonterminal VarExpr var_expr;
nonterminal ArrayExpr arr_expr;


/* precedence/associativity rules
   format: precedence <associativity> <list of terminals>
   example: precedence right ASSIGN
   precedence specified by order (from lowest to highest)
   note: use a single precedence rule for terminals with same precedence
   associativity specified by middle operand (left, right, none)
*/
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left BITOR;
precedence left BITXOR;
precedence left BITAND;
precedence left EQ, NE;
precedence left INSTANCEOF, LT, LEQ, GT, GEQ;
precedence left SIGNEDLEFTSHIFT, SIGNEDRIGHTSHIFT, UNSIGNEDRIGHTSHIFT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULUS;
precedence right INCR, DECR, NOT;
precedence left DOT, LPAREN, RPAREN, LSQBRACE, RSQBRACE;
precedence left ELSE;


/* program, which is simply a list of classes */
program
	::=
	    class_list:cl
	        {: RESULT = new Program(0, cl); :}
    ;

/* list of classes (must be at least one class in program) */
class_list
    ::=
        /* single class */
        class:c
            {: RESULT = (ClassList)(new ClassList(0)).addElement(c); :}
        /* several classes */
        | class_list:cl class:c
            {: RESULT = (ClassList)cl.addElement(c); :}
	;

/* a single class */
class
    ::=
        /* class with no specified parent - uses Object class */
        CLASS:t ID:name LBRACE member_list:ml RBRACE
            {: RESULT = new Class_(t.getLineNum(), getCurrFilename(),
                name.getName(), "Object", ml); :}
        /* class with a specified parent */
        | CLASS:t ID:name EXTENDS ID:parent LBRACE member_list:ml RBRACE
            {: RESULT = new Class_(t.getLineNum(), getCurrFilename(),
                name.getName(), parent.getName(), ml); :}
	;

/* member list */
member_list
    ::=
        /* no member */
            {: RESULT = new MemberList(getCurrLineNum()); :}
        /* several members */
        | member_list:ml member:m
            {: RESULT = (MemberList)ml.addElement(m); :}
	;

/* member */
member
    ::=
        method:m    {: RESULT = m; :}
        | field:f   {: RESULT = f; :}
    ;

/* method */
method
    ::=
        /* method */
        ID:retTyp ID:name LPAREN formal_list:fl RPAREN LBRACE stmt_list:sl RBRACE
            {: RESULT = new Method(getCurrLineNum(), retTyp.getName(),
                name.getName(), fl, sl); :}
        /* method with array return type */
        | ID:retTyp LSQBRACE RSQBRACE ID:name LPAREN formal_list:fl RPAREN LBRACE stmt_list:sl RBRACE
            {: RESULT = new Method(getCurrLineNum(), retTyp.getName()+"[]",
                name.getName(), fl, sl); :}

    ;

/* field */
field
    ::=
        /* uninitialized field w/o []*/
        ID:type ID:name SEMI
            {: RESULT = new Field(getCurrLineNum(), type.getName(),
                name.getName(), null); :}
        /* uninitialized field w/ []*/
        | ID:type LSQBRACE RSQBRACE ID:name SEMI
            {: RESULT = new Field(getCurrLineNum(), type.getName()+"[]",
                name.getName(), null); :}
        /* initialized field w/o []*/
        | ID:type ID:name ASSIGN expr:expression SEMI
            {: RESULT = new Field(getCurrLineNum(), type.getName(),
                name.getName(), expression); :}
        /* initialized field w/ []*/
        | ID:type LSQBRACE RSQBRACE ID:name ASSIGN expr:expression SEMI
            {: RESULT = new Field(getCurrLineNum(), type.getName()+"[]",
                name.getName(), expression); :}
    ;

/* formal list */
formal_list
    ::=
        /* no formal */
            {: RESULT = new FormalList(getCurrLineNum()); :}
        /* one or more formals */
        | formal_list:fl formal:f
            {: RESULT = (FormalList)fl.addElement(f); :}
        /* one or more formals separated by commas */
        | formal_list:fl formal:f COMMA
            {: RESULT = (FormalList)fl.addElement(f); :}
    ;

/* formal */
formal
    ::=
        /* normal type formal */
        ID:type ID:name
            {: RESULT = new Formal(getCurrLineNum(), type.getName(), name.getName()); :}
        /* array type formal */
        | ID:type LSQBRACE RSQBRACE ID:name
            {: RESULT = new Formal(getCurrLineNum(),
                type.getName()+"[]", name.getName()); :}
    ;

/* statement list */
stmt_list
    ::=
        /* no statement */
            {: RESULT = new StmtList(getCurrLineNum()); :}
        /* several statements */
        | stmt_list:sl stmt:s
            {: RESULT = (StmtList)sl.addElement(s); :}
    ;

/* statement */
stmt
    ::=
        expr_stmt:exprStmt      {: RESULT = exprStmt; :}
        | decl_stmt:decStmt     {: RESULT = decStmt; :}
        | if_stmt:ifStmt        {: RESULT = ifStmt; :}
        | while_stmt:whileStmt  {: RESULT = whileStmt; :}
        | for_stmt:forStmt      {: RESULT = forStmt; :}
        | break_stmt:breakStmt  {: RESULT = breakStmt; :}
        | ret_stmt:retStmt      {: RESULT = retStmt; :}
        | block_stmt:blockStmt  {: RESULT = blockStmt; :}
    ;

/* expression statement */
expr_stmt
    ::= expr:expression SEMI {: RESULT = new ExprStmt(getCurrLineNum(), expression); :} ;

/* declaration statement */
decl_stmt
    ::=
        ID:type ID:name ASSIGN expr:expression SEMI
            {: RESULT = new DeclStmt(getCurrLineNum(), type.getName(),
                name.getName(), expression); :}
        | ID:type LSQBRACE RSQBRACE ID:name ASSIGN expr:expression SEMI
            {: RESULT = new DeclStmt(getCurrLineNum(), type.getName()+"[]",
                name.getName(), expression); :}
    ;

/* if statement */
if_stmt
    ::=
        IF LPAREN expr:predExpr RPAREN stmt:thenStmt ELSE stmt:elseStmt
            {: RESULT = new IfStmt(getCurrLineNum(), predExpr, thenStmt, elseStmt); :}
        | IF LPAREN expr:predExpr RPAREN stmt:thenStmt
            {: RESULT = new IfStmt(getCurrLineNum(), predExpr, thenStmt, null); :}
    ;

/* while statement */
while_stmt
    ::=
        WHILE LPAREN expr:predExpr RPAREN stmt:bodyStmt
            {: RESULT = new WhileStmt(getCurrLineNum(), predExpr, bodyStmt); :}
    ;

/* for statement */
for_stmt
    ::=
        /* for(;;) Stmt */
        FOR LPAREN SEMI SEMI RPAREN stmt:bodyStmt
            {: RESULT = new ForStmt( getCurrLineNum(), null, null, null, bodyStmt); :}
        /* for(initExpr;;) Stmt */
        | FOR LPAREN expr:initExpr SEMI SEMI RPAREN stmt:bodyStmt
            {: RESULT = new ForStmt( getCurrLineNum(), initExpr, null, null, bodyStmt); :}
        /* for(;predExpr;) Stmt */
        | FOR LPAREN SEMI expr:predExpr SEMI RPAREN stmt:bodyStmt
            {: RESULT = new ForStmt( getCurrLineNum(), null, predExpr, null, bodyStmt); :}
        /* for(;;updateExpr) Stmt */
        | FOR LPAREN SEMI SEMI expr:updateExpr RPAREN stmt:bodyStmt
            {: RESULT = new ForStmt( getCurrLineNum(),
                null, null, updateExpr, bodyStmt); :}
        /* for(initExpr;predExpr;) Stmt */
        | FOR LPAREN expr:initExpr SEMI expr:predExpr SEMI RPAREN stmt:bodyStmt
            {: RESULT = new ForStmt( getCurrLineNum(),
                initExpr, predExpr, null, bodyStmt); :}
        /* for(initExpr;;updateExpr) Stmt */
        | FOR LPAREN expr:initExpr SEMI SEMI expr:updateExpr RPAREN stmt:bodyStmt
            {: RESULT = new ForStmt( getCurrLineNum(),
                initExpr, null, updateExpr, bodyStmt); :}
        /* for(;predExpr;updateExpr) Stmt */
        | FOR LPAREN SEMI expr:predExpr SEMI expr:updateExpr RPAREN stmt:bodyStmt
            {: RESULT = new ForStmt( getCurrLineNum(),
                null, predExpr, updateExpr, bodyStmt); :}
        /* for(initExpr;predExpr;updateExpr) Stmt */
        | FOR LPAREN expr:initExpr SEMI expr:predExpr SEMI expr:updateExpr RPAREN stmt:bodyStmt
            {: RESULT = new ForStmt( getCurrLineNum(),
                initExpr, predExpr, updateExpr, bodyStmt); :}
    ;

/* break statement */
break_stmt
    ::= BREAK SEMI  {: RESULT = new BreakStmt(getCurrLineNum()); :} ;

/* return statement */
ret_stmt
    ::=
        /* empty return */
        RETURN SEMI
            {: RESULT = new ReturnStmt(getCurrLineNum(), null ); :}
        /* return expression; */
        | RETURN expr:expression SEMI
            {: RESULT = new ReturnStmt(getCurrLineNum(), expression); :}
    ;

/* block statement */
block_stmt
    ::= LBRACE stmt_list:sl RBRACE  {: RESULT = new BlockStmt(getCurrLineNum(), sl); :} ;

/* expression list */
expr_list
    ::=
        /* no expression */
            {: RESULT = new ExprList(getCurrLineNum()); :}
        /* one or more expression */
        | expr_list:el expr:e
            {: RESULT = (ExprList)el.addElement(e); :}
        /* one or more expression separated by commas */
        | expr_list:el expr:e COMMA
            {: RESULT = (ExprList)el.addElement(e); :}
    ;

/* expression */
expr
    ::=
         assign_expr:assignExpr             {: RESULT = assignExpr; :}
         | arr_assign_expr:arrAssignExpr    {: RESULT = arrAssignExpr; :}
         | dispatch_expr:dispatchExpr       {: RESULT = dispatchExpr; :}
         | new_expr:newExpr                 {: RESULT = newExpr; :}
         | new_arr_expr:newArrExpr          {: RESULT = newArrExpr; :}
         | instanceof_expr:instanceofExpr   {: RESULT = instanceofExpr; :}
         | cast_expr:castExpr               {: RESULT = castExpr; :}
         | binary_expr:binaryExpr           {: RESULT = binaryExpr; :}
         | unary_expr:unaryExpr             {: RESULT = unaryExpr; :}
         | const_expr:constExpr             {: RESULT = constExpr; :}
         | var_expr:varExpr                 {: RESULT = varExpr; :}
         | arr_expr:arrExpr                 {: RESULT = arrExpr; :}
         | LPAREN expr:expression RPAREN    {: RESULT = expression; :}
    ;

/* assignment expression */
assign_expr
    ::=
        /* simple assignment like x = y */
        ID:name ASSIGN expr:expression
            {: RESULT = new AssignExpr(getCurrLineNum(),
                null, name.getName(), expression); :}
        /* assignment with reference like this.x = y */
        | ID:reference DOT ID:name ASSIGN expr:expression
            {: RESULT = new AssignExpr(getCurrLineNum(),
                reference.getName(), name.getName(), expression); :}
    ;

/* array assignment expression */
arr_assign_expr
    ::=
        /* simple assignment into array x[0] = y */
        ID:name LSQBRACE expr:size RSQBRACE ASSIGN expr:expression
            {: RESULT = new ArrayAssignExpr(getCurrLineNum(),
                null, name.getName(), size, expression); :}
        /* assignment with reference into array this.x[0] = y */
        | ID:reference DOT ID:name LSQBRACE expr:size RSQBRACE ASSIGN expr:expression
            {: RESULT = new ArrayAssignExpr(getCurrLineNum(),
                reference.getName(), name.getName(), size, expression); :}
    ;

/* dispatch expression */
dispatch_expr
    ::=
        ID:name LPAREN expr_list:el RPAREN
            {: RESULT = new DispatchExpr(getCurrLineNum(), null, name.getName(), el);; :}
        | expr:expression DOT ID:name LPAREN expr_list:el RPAREN
            {: RESULT = new DispatchExpr(getCurrLineNum(), expression,
                name.getName(), el); :}
        | ID:ref DOT ID:name LPAREN expr_list:el RPAREN
            {: VarExpr reference = new VarExpr(getCurrLineNum(), null, ref.getName());
                RESULT = new DispatchExpr(getCurrLineNum(),
                reference, name.getName(), el); :}
    ;

/* new expression */
new_expr
    ::=
        NEW ID:type LPAREN RPAREN
            {: RESULT = new NewExpr(getCurrLineNum(), type.getName()); :}
    ;

/* new array expression */
new_arr_expr
    ::=
        NEW ID:type LSQBRACE expr:size RSQBRACE
            {: RESULT = new NewArrayExpr(getCurrLineNum(), type.getName(), size); :}
    ;

/* instanceof expression */
instanceof_expr
    ::=
        /* instanceof type */
        expr:expression INSTANCEOF ID:type
            {: RESULT = new InstanceofExpr(getCurrLineNum(), expression, type.getName()); :}
        /* instanceof type[] */
        | expr:expression INSTANCEOF ID:type LSQBRACE RSQBRACE
            {: RESULT = new InstanceofExpr(getCurrLineNum(),
                expression, type.getName()+"[]"); :}
    ;

/* cast expression */
cast_expr
    ::=
        /* type casting to (TYPE) */
        LPAREN ID:type RPAREN LPAREN expr:expression RPAREN
            {: RESULT = new CastExpr(getCurrLineNum(), type.getName(), expression); :}
        /* type casting to (TYPE []) */
        | LPAREN ID:type LSQBRACE RSQBRACE RPAREN LPAREN expr:expression RPAREN
            {: RESULT = new CastExpr(getCurrLineNum(), type.getName()+"[]", expression); :}
    ;

/* constant expression */
const_expr
    ::=
        INT_CONST:intConst
            {: RESULT = new ConstIntExpr(getCurrLineNum(), intConst.getName()); :}
        | BOOLEAN_CONST:booleanConst
            {: RESULT = new ConstBooleanExpr(getCurrLineNum(), booleanConst.getName()); :}
        | STRING_CONST:stringConst
            {: RESULT = new ConstStringExpr(getCurrLineNum(), stringConst.getName()); :}
    ;

/* binary expression */
binary_expr
    ::=
        binary_arith_expr:binaryArithExpr      {: RESULT = binaryArithExpr; :}
        | binary_comp_expr:binaryCompExpr      {: RESULT = binaryCompExpr; :}
        | binary_logic_expr:binaryLogicExpr    {: RESULT = binaryLogicExpr; :}
    ;

/* binary arith expression */
binary_arith_expr
    ::=
        expr:leftExpr PLUS expr:rightExpr
            {: RESULT = new BinaryArithPlusExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr MINUS expr:rightExpr
            {: RESULT = new BinaryArithMinusExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr TIMES expr:rightExpr
            {: RESULT = new BinaryArithTimesExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr DIVIDE expr:rightExpr
            {: RESULT = new BinaryArithDivideExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr MODULUS expr:rightExpr
            {: RESULT = new BinaryArithModulusExpr(getCurrLineNum(), leftExpr, rightExpr); :}
    ;

/* binary comp expression */
binary_comp_expr
    ::=
        expr:leftExpr EQ expr:rightExpr
            {: RESULT = new BinaryCompEqExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr NE expr:rightExpr
            {: RESULT = new BinaryCompNeExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr LT expr:rightExpr
            {: RESULT = new BinaryCompLtExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr LEQ expr:rightExpr
            {: RESULT = new BinaryCompLeqExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr GT expr:rightExpr
            {: RESULT = new BinaryCompGtExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr GEQ expr:rightExpr
            {: RESULT = new BinaryCompGeqExpr(getCurrLineNum(), leftExpr, rightExpr); :}
    ;

/* binary logic expression */
binary_logic_expr
    ::=
        expr:leftExpr AND expr:rightExpr
            {: RESULT = new BinaryLogicAndExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr OR expr:rightExpr
            {: RESULT = new BinaryLogicOrExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr BITOR expr:rightExpr
            {: RESULT = new BinaryLogicBitOrExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr BITXOR expr:rightExpr
            {: RESULT = new BinaryLogicBitXorExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr BITAND expr:rightExpr
            {: RESULT = new BinaryLogicBitAndExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr SIGNEDLEFTSHIFT expr:rightExpr
            {: RESULT = new BinaryLogicLeftShiftExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr SIGNEDRIGHTSHIFT expr:rightExpr
            {: RESULT = new BinaryLogicRightShiftExpr(getCurrLineNum(), leftExpr, rightExpr); :}
        | expr:leftExpr UNSIGNEDRIGHTSHIFT expr:rightExpr
            {: RESULT = new BinaryLogicUnsignedShiftExpr(getCurrLineNum(), leftExpr, rightExpr); :}
    ;

/* unary expression */
unary_expr
    ::=
        unary_neg_expr:unaryNegExpr        {: RESULT = unaryNegExpr; :}
        | unary_not_expr:unaryNotExpr      {: RESULT = unaryNotExpr; :}
        | unary_incr_expr:unaryIncrExpr    {: RESULT = unaryIncrExpr; :}
        | unary_decr_expr:unaryDecrExpr    {: RESULT = unaryDecrExpr; :}
    ;

/* unary neg expression */
unary_neg_expr
    ::=
        MINUS expr:expression
            {: RESULT = new UnaryNegExpr(getCurrLineNum(), expression); :}
    ;

/* unary not expression */
unary_not_expr
    ::=
        NOT expr:expression
            {: RESULT = new UnaryNotExpr(getCurrLineNum(), expression); :}
    ;

/* unary incr expression */
unary_incr_expr
    ::=
        INCR expr:expression
            {: RESULT = new UnaryIncrExpr(getCurrLineNum(), expression, false); :}
        | expr:expression INCR
            {: RESULT = new UnaryIncrExpr(getCurrLineNum(), expression, true); :}
    ;

/* unary decr expression */
unary_decr_expr
    ::=
        DECR expr:expression
            {: RESULT = new UnaryDecrExpr(getCurrLineNum(), expression, false); :}
        | expr:expression DECR
            {: RESULT = new UnaryDecrExpr(getCurrLineNum(), expression, true); :}
    ;
/* variable expression */
var_expr
    ::=
        /* single identifier like x */
        ID:name
            {: RESULT = new VarExpr(getCurrLineNum(), null, name.getName()); :}
        /* identifier with reference */
        | ID:ref DOT ID:name
            {: RESULT = new VarExpr(getCurrLineNum(),
                new VarExpr(getCurrLineNum(), null, ref.getName()),
                name.getName()); :}
    ;

/* array expression */
arr_expr
    ::=
        /* simple array expression like x[1] */
        ID:name LSQBRACE expr:index RSQBRACE
            {: RESULT = new ArrayExpr(getCurrLineNum(),
                null, name.getName(), index); :}
        /* array identifier with reference */
        | ID:ref DOT ID:name LSQBRACE expr:index RSQBRACE
            {: RESULT = new ArrayExpr(getCurrLineNum(),
                new VarExpr(getCurrLineNum(), null, ref.getName()),
                name.getName(), index);:}
    ;
/* add more productions... */
